
Project_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a14  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08007bc8  08007bc8  00008bc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fb8  08007fb8  000091e8  2**0
                  CONTENTS
  4 .ARM          00000008  08007fb8  08007fb8  00008fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fc0  08007fc0  000091e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fc0  08007fc0  00008fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007fc4  08007fc4  00008fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08007fc8  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091e8  2**0
                  CONTENTS
 10 .bss          0000026c  200001e8  200001e8  000091e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000454  20000454  000091e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000099d8  00000000  00000000  00009218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bd8  00000000  00000000  00012bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e8  00000000  00000000  000147c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006bf  00000000  00000000  000150b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002510c  00000000  00000000  0001576f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b2e1  00000000  00000000  0003a87b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0930  00000000  00000000  00045b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  0012648c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003848  00000000  00000000  00126514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000042  00000000  00000000  00129d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007bac 	.word	0x08007bac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	08007bac 	.word	0x08007bac

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96a 	b.w	8000f54 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14e      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	458c      	cmp	ip, r1
 8000ca8:	4686      	mov	lr, r0
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	d962      	bls.n	8000d76 <__udivmoddi4+0xde>
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0320 	rsb	r3, r2, #32
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f f68c 	uxth.w	r6, ip
 8000cce:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb04 f106 	mul.w	r1, r4, r6
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cee:	f080 8112 	bcs.w	8000f16 <__udivmoddi4+0x27e>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 810f 	bls.w	8000f16 <__udivmoddi4+0x27e>
 8000cf8:	3c02      	subs	r4, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	fa1f f38e 	uxth.w	r3, lr
 8000d02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d06:	fb07 1110 	mls	r1, r7, r0, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f606 	mul.w	r6, r0, r6
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x94>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1e:	f080 80fc 	bcs.w	8000f1a <__udivmoddi4+0x282>
 8000d22:	429e      	cmp	r6, r3
 8000d24:	f240 80f9 	bls.w	8000f1a <__udivmoddi4+0x282>
 8000d28:	4463      	add	r3, ip
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	2100      	movs	r1, #0
 8000d34:	b11d      	cbz	r5, 8000d3e <__udivmoddi4+0xa6>
 8000d36:	40d3      	lsrs	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d905      	bls.n	8000d52 <__udivmoddi4+0xba>
 8000d46:	b10d      	cbz	r5, 8000d4c <__udivmoddi4+0xb4>
 8000d48:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e7f5      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d52:	fab3 f183 	clz	r1, r3
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d146      	bne.n	8000de8 <__udivmoddi4+0x150>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xcc>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f0c0 80f0 	bcc.w	8000f44 <__udivmoddi4+0x2ac>
 8000d64:	1a86      	subs	r6, r0, r2
 8000d66:	eb64 0303 	sbc.w	r3, r4, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d0e6      	beq.n	8000d3e <__udivmoddi4+0xa6>
 8000d70:	e9c5 6300 	strd	r6, r3, [r5]
 8000d74:	e7e3      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x204>
 8000d7c:	eba1 040c 	sub.w	r4, r1, ip
 8000d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d84:	fa1f f78c 	uxth.w	r7, ip
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb08 4416 	mls	r4, r8, r6, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb07 f006 	mul.w	r0, r7, r6
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x11c>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x11a>
 8000dac:	4298      	cmp	r0, r3
 8000dae:	f200 80cd 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000db2:	4626      	mov	r6, r4
 8000db4:	1a1c      	subs	r4, r3, r0
 8000db6:	fa1f f38e 	uxth.w	r3, lr
 8000dba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb00 f707 	mul.w	r7, r0, r7
 8000dca:	429f      	cmp	r7, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x148>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x146>
 8000dd8:	429f      	cmp	r7, r3
 8000dda:	f200 80b0 	bhi.w	8000f3e <__udivmoddi4+0x2a6>
 8000dde:	4620      	mov	r0, r4
 8000de0:	1bdb      	subs	r3, r3, r7
 8000de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0x9c>
 8000de8:	f1c1 0620 	rsb	r6, r1, #32
 8000dec:	408b      	lsls	r3, r1
 8000dee:	fa22 f706 	lsr.w	r7, r2, r6
 8000df2:	431f      	orrs	r7, r3
 8000df4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000df8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dfc:	ea43 030c 	orr.w	r3, r3, ip
 8000e00:	40f4      	lsrs	r4, r6
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	0c38      	lsrs	r0, r7, #16
 8000e08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e10:	fa1f fc87 	uxth.w	ip, r7
 8000e14:	fb00 441e 	mls	r4, r0, lr, r4
 8000e18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e20:	45a1      	cmp	r9, r4
 8000e22:	fa02 f201 	lsl.w	r2, r2, r1
 8000e26:	d90a      	bls.n	8000e3e <__udivmoddi4+0x1a6>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e2e:	f080 8084 	bcs.w	8000f3a <__udivmoddi4+0x2a2>
 8000e32:	45a1      	cmp	r9, r4
 8000e34:	f240 8081 	bls.w	8000f3a <__udivmoddi4+0x2a2>
 8000e38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	eba4 0409 	sub.w	r4, r4, r9
 8000e42:	fa1f f983 	uxth.w	r9, r3
 8000e46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1d2>
 8000e5a:	193c      	adds	r4, r7, r4
 8000e5c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e60:	d267      	bcs.n	8000f32 <__udivmoddi4+0x29a>
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d965      	bls.n	8000f32 <__udivmoddi4+0x29a>
 8000e66:	3b02      	subs	r3, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e72:	eba4 040c 	sub.w	r4, r4, ip
 8000e76:	429c      	cmp	r4, r3
 8000e78:	46ce      	mov	lr, r9
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	d351      	bcc.n	8000f22 <__udivmoddi4+0x28a>
 8000e7e:	d04e      	beq.n	8000f1e <__udivmoddi4+0x286>
 8000e80:	b155      	cbz	r5, 8000e98 <__udivmoddi4+0x200>
 8000e82:	ebb8 030e 	subs.w	r3, r8, lr
 8000e86:	eb64 040c 	sbc.w	r4, r4, ip
 8000e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8e:	40cb      	lsrs	r3, r1
 8000e90:	431e      	orrs	r6, r3
 8000e92:	40cc      	lsrs	r4, r1
 8000e94:	e9c5 6400 	strd	r6, r4, [r5]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	e750      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eac:	4094      	lsls	r4, r2
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb8:	fa1f f78c 	uxth.w	r7, ip
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec4:	0c23      	lsrs	r3, r4, #16
 8000ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eca:	fb00 f107 	mul.w	r1, r0, r7
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x24c>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eda:	d22c      	bcs.n	8000f36 <__udivmoddi4+0x29e>
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d92a      	bls.n	8000f36 <__udivmoddi4+0x29e>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eec:	fb08 3311 	mls	r3, r8, r1, r3
 8000ef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef4:	fb01 f307 	mul.w	r3, r1, r7
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x276>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f04:	d213      	bcs.n	8000f2e <__udivmoddi4+0x296>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d911      	bls.n	8000f2e <__udivmoddi4+0x296>
 8000f0a:	3902      	subs	r1, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	1ae4      	subs	r4, r4, r3
 8000f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f14:	e739      	b.n	8000d8a <__udivmoddi4+0xf2>
 8000f16:	4604      	mov	r4, r0
 8000f18:	e6f0      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e706      	b.n	8000d2c <__udivmoddi4+0x94>
 8000f1e:	45c8      	cmp	r8, r9
 8000f20:	d2ae      	bcs.n	8000e80 <__udivmoddi4+0x1e8>
 8000f22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7a8      	b.n	8000e80 <__udivmoddi4+0x1e8>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	e7ed      	b.n	8000f0e <__udivmoddi4+0x276>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e799      	b.n	8000e6a <__udivmoddi4+0x1d2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	e7d4      	b.n	8000ee4 <__udivmoddi4+0x24c>
 8000f3a:	46d6      	mov	lr, sl
 8000f3c:	e77f      	b.n	8000e3e <__udivmoddi4+0x1a6>
 8000f3e:	4463      	add	r3, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e74d      	b.n	8000de0 <__udivmoddi4+0x148>
 8000f44:	4606      	mov	r6, r0
 8000f46:	4623      	mov	r3, r4
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e70f      	b.n	8000d6c <__udivmoddi4+0xd4>
 8000f4c:	3e02      	subs	r6, #2
 8000f4e:	4463      	add	r3, ip
 8000f50:	e730      	b.n	8000db4 <__udivmoddi4+0x11c>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <LCD_Delay>:
#include "string.h"



// Hàm tạo độ trễ nhỏ
static void LCD_Delay(uint16_t ms) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(ms);
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fe1d 	bl	8001ba4 <HAL_Delay>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <LCD_Enable>:

// Gửi tín hiệu đến LCD
static void LCD_Enable(void) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_EN_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <LCD_Enable+0x28>)
 8000f7e:	f001 fcd7 	bl	8002930 <HAL_GPIO_WritePin>
    LCD_Delay(1);  // Tạo xung kích
 8000f82:	2001      	movs	r0, #1
 8000f84:	f7ff ffe8 	bl	8000f58 <LCD_Delay>
    HAL_GPIO_WritePin(LCD_EN_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2104      	movs	r1, #4
 8000f8c:	4803      	ldr	r0, [pc, #12]	@ (8000f9c <LCD_Enable+0x28>)
 8000f8e:	f001 fccf 	bl	8002930 <HAL_GPIO_WritePin>
    LCD_Delay(1);
 8000f92:	2001      	movs	r0, #1
 8000f94:	f7ff ffe0 	bl	8000f58 <LCD_Delay>
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40020400 	.word	0x40020400

08000fa0 <LCD_Send4Bits>:

// Gửi 4 bit dữ liệu
static void LCD_Send4Bits(uint8_t data) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_D4_Port, LCD_D4_Pin, (data >> 0) & 0x01);
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	2108      	movs	r1, #8
 8000fb6:	4815      	ldr	r0, [pc, #84]	@ (800100c <LCD_Send4Bits+0x6c>)
 8000fb8:	f001 fcba 	bl	8002930 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_Port, LCD_D5_Pin, (data >> 1) & 0x01);
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	085b      	lsrs	r3, r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	461a      	mov	r2, r3
 8000fca:	2110      	movs	r1, #16
 8000fcc:	480f      	ldr	r0, [pc, #60]	@ (800100c <LCD_Send4Bits+0x6c>)
 8000fce:	f001 fcaf 	bl	8002930 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_Port, LCD_D6_Pin, (data >> 2) & 0x01);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	089b      	lsrs	r3, r3, #2
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	461a      	mov	r2, r3
 8000fe0:	2120      	movs	r1, #32
 8000fe2:	480a      	ldr	r0, [pc, #40]	@ (800100c <LCD_Send4Bits+0x6c>)
 8000fe4:	f001 fca4 	bl	8002930 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_Port, LCD_D7_Pin, (data >> 3) & 0x01);
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	08db      	lsrs	r3, r3, #3
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	2140      	movs	r1, #64	@ 0x40
 8000ff8:	4804      	ldr	r0, [pc, #16]	@ (800100c <LCD_Send4Bits+0x6c>)
 8000ffa:	f001 fc99 	bl	8002930 <HAL_GPIO_WritePin>
    LCD_Enable();
 8000ffe:	f7ff ffb9 	bl	8000f74 <LCD_Enable>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40020400 	.word	0x40020400

08001010 <LCD_Send>:

// Gửi lệnh hoặc dữ liệu (rs = 0: lệnh, rs = 1: dữ liệu)
static void LCD_Send(uint8_t data, GPIO_PinState rs) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	460a      	mov	r2, r1
 800101a:	71fb      	strb	r3, [r7, #7]
 800101c:	4613      	mov	r3, r2
 800101e:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS_Pin, rs);
 8001020:	79bb      	ldrb	r3, [r7, #6]
 8001022:	461a      	mov	r2, r3
 8001024:	2102      	movs	r1, #2
 8001026:	480a      	ldr	r0, [pc, #40]	@ (8001050 <LCD_Send+0x40>)
 8001028:	f001 fc82 	bl	8002930 <HAL_GPIO_WritePin>
    LCD_Send4Bits(data >> 4);  // Gửi 4 bit cao
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	091b      	lsrs	r3, r3, #4
 8001030:	b2db      	uxtb	r3, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff ffb4 	bl	8000fa0 <LCD_Send4Bits>
    LCD_Send4Bits(data & 0x0F); // Gửi 4 bit thấp
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	b2db      	uxtb	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ffad 	bl	8000fa0 <LCD_Send4Bits>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40020400 	.word	0x40020400

08001054 <LCD_Init>:

// Hàm khởi tạo LCD
void LCD_Init(void) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
    // Đặt tất cả các chân làm Output
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = LCD_RS_Pin | LCD_EN_Pin | LCD_D4_Pin | LCD_D5_Pin | LCD_D6_Pin | LCD_D7_Pin;
 8001068:	237e      	movs	r3, #126	@ 0x7e
 800106a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	4619      	mov	r1, r3
 800107c:	4814      	ldr	r0, [pc, #80]	@ (80010d0 <LCD_Init+0x7c>)
 800107e:	f001 faab 	bl	80025d8 <HAL_GPIO_Init>

    // Đợi LCD khởi động
    LCD_Delay(20);
 8001082:	2014      	movs	r0, #20
 8001084:	f7ff ff68 	bl	8000f58 <LCD_Delay>

    // Chuyển sang chế độ 4-bit
    LCD_Send4Bits(0x03);
 8001088:	2003      	movs	r0, #3
 800108a:	f7ff ff89 	bl	8000fa0 <LCD_Send4Bits>
    LCD_Delay(5);
 800108e:	2005      	movs	r0, #5
 8001090:	f7ff ff62 	bl	8000f58 <LCD_Delay>
    LCD_Send4Bits(0x03);
 8001094:	2003      	movs	r0, #3
 8001096:	f7ff ff83 	bl	8000fa0 <LCD_Send4Bits>
    LCD_Delay(1);
 800109a:	2001      	movs	r0, #1
 800109c:	f7ff ff5c 	bl	8000f58 <LCD_Delay>
    LCD_Send4Bits(0x03);
 80010a0:	2003      	movs	r0, #3
 80010a2:	f7ff ff7d 	bl	8000fa0 <LCD_Send4Bits>
    LCD_Send4Bits(0x02);
 80010a6:	2002      	movs	r0, #2
 80010a8:	f7ff ff7a 	bl	8000fa0 <LCD_Send4Bits>

    // Cấu hình LCD
    LCD_Send(0x28, GPIO_PIN_RESET); // Giao diện 4-bit, 2 dòng, font 5x8
 80010ac:	2100      	movs	r1, #0
 80010ae:	2028      	movs	r0, #40	@ 0x28
 80010b0:	f7ff ffae 	bl	8001010 <LCD_Send>
    LCD_Send(0x0C, GPIO_PIN_RESET); // Bật màn hình, tắt con trỏ
 80010b4:	2100      	movs	r1, #0
 80010b6:	200c      	movs	r0, #12
 80010b8:	f7ff ffaa 	bl	8001010 <LCD_Send>
    LCD_Send(0x06, GPIO_PIN_RESET); // Tự động dịch con trỏ sang phải
 80010bc:	2100      	movs	r1, #0
 80010be:	2006      	movs	r0, #6
 80010c0:	f7ff ffa6 	bl	8001010 <LCD_Send>
    LCD_Clear();
 80010c4:	f000 f845 	bl	8001152 <LCD_Clear>
}
 80010c8:	bf00      	nop
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40020400 	.word	0x40020400

080010d4 <LCD_SendChar>:

// Hàm hiển thị ký tự
void LCD_SendChar(char c) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
    LCD_Send(c, GPIO_PIN_SET);
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2101      	movs	r1, #1
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ff94 	bl	8001010 <LCD_Send>
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <LCD_SendString>:

// Hàm hiển thị chuỗi
void LCD_SendString(char *str) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    while (*str) {
 80010f8:	e006      	b.n	8001108 <LCD_SendString+0x18>
        LCD_SendChar(*str++);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	1c5a      	adds	r2, r3, #1
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ffe6 	bl	80010d4 <LCD_SendChar>
    while (*str) {
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1f4      	bne.n	80010fa <LCD_SendString+0xa>
    }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <LCD_SetCursor>:

// Hàm di chuyển con trỏ
void LCD_SetCursor(uint8_t row, uint8_t col) {
 800111a:	b580      	push	{r7, lr}
 800111c:	b084      	sub	sp, #16
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	460a      	mov	r2, r1
 8001124:	71fb      	strb	r3, [r7, #7]
 8001126:	4613      	mov	r3, r2
 8001128:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = (row == 0) ? 0x80 + col : 0xC0 + col;
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d103      	bne.n	8001138 <LCD_SetCursor+0x1e>
 8001130:	79bb      	ldrb	r3, [r7, #6]
 8001132:	3b80      	subs	r3, #128	@ 0x80
 8001134:	b2db      	uxtb	r3, r3
 8001136:	e002      	b.n	800113e <LCD_SetCursor+0x24>
 8001138:	79bb      	ldrb	r3, [r7, #6]
 800113a:	3b40      	subs	r3, #64	@ 0x40
 800113c:	b2db      	uxtb	r3, r3
 800113e:	73fb      	strb	r3, [r7, #15]
    LCD_Send(addr, GPIO_PIN_RESET);
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff63 	bl	8001010 <LCD_Send>
}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <LCD_Clear>:

// Hàm xóa màn hình
void LCD_Clear(void) {
 8001152:	b580      	push	{r7, lr}
 8001154:	af00      	add	r7, sp, #0
    LCD_Send(0x01, GPIO_PIN_RESET);
 8001156:	2100      	movs	r1, #0
 8001158:	2001      	movs	r0, #1
 800115a:	f7ff ff59 	bl	8001010 <LCD_Send>
    LCD_Delay(2);
 800115e:	2002      	movs	r0, #2
 8001160:	f7ff fefa 	bl	8000f58 <LCD_Delay>
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}

08001168 <LCD_DisplayGasPPM>:

// Hàm hiển thị khí gas
void LCD_DisplayGasPPM(uint16_t data, uint8_t row, uint8_t col){
 8001168:	b580      	push	{r7, lr}
 800116a:	b090      	sub	sp, #64	@ 0x40
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	80fb      	strh	r3, [r7, #6]
 8001172:	460b      	mov	r3, r1
 8001174:	717b      	strb	r3, [r7, #5]
 8001176:	4613      	mov	r3, r2
 8001178:	713b      	strb	r3, [r7, #4]
	char buffer[50];
	sprintf(buffer, "GAS: %d ppm", data);
 800117a:	88fa      	ldrh	r2, [r7, #6]
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	4909      	ldr	r1, [pc, #36]	@ (80011a8 <LCD_DisplayGasPPM+0x40>)
 8001182:	4618      	mov	r0, r3
 8001184:	f003 f9fc 	bl	8004580 <siprintf>
	//LCD_Clear();
	LCD_SetCursor(row, col);
 8001188:	793a      	ldrb	r2, [r7, #4]
 800118a:	797b      	ldrb	r3, [r7, #5]
 800118c:	4611      	mov	r1, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ffc3 	bl	800111a <LCD_SetCursor>
	LCD_SendString(buffer);
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ffa9 	bl	80010f0 <LCD_SendString>
}
 800119e:	bf00      	nop
 80011a0:	3740      	adds	r7, #64	@ 0x40
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	08007bc8 	.word	0x08007bc8

080011ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b2:	f000 fc85 	bl	8001ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b6:	f000 f883 	bl	80012c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ba:	f000 f96f 	bl	800149c <MX_GPIO_Init>
  MX_ADC1_Init();
 80011be:	f000 f8f1 	bl	80013a4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80011c2:	f000 f941 	bl	8001448 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 80011c6:	f7ff ff45 	bl	8001054 <LCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      uint32_t adc_value = Read_ADC_Value();      // Đọc giá trị ADC
 80011ca:	f000 f9d9 	bl	8001580 <Read_ADC_Value>
 80011ce:	6078      	str	r0, [r7, #4]
      rs = Calculate_RS(adc_value);      // Tính R_S
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f000 f9f1 	bl	80015b8 <Calculate_RS>
 80011d6:	eef0 7a40 	vmov.f32	s15, s0
 80011da:	4b31      	ldr	r3, [pc, #196]	@ (80012a0 <main+0xf4>)
 80011dc:	edc3 7a00 	vstr	s15, [r3]
      gas_concentration = RS_to_PPM(rs); ;
 80011e0:	4b2f      	ldr	r3, [pc, #188]	@ (80012a0 <main+0xf4>)
 80011e2:	edd3 7a00 	vldr	s15, [r3]
 80011e6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ea:	f000 fa25 	bl	8001638 <RS_to_PPM>
 80011ee:	eef0 7a40 	vmov.f32	s15, s0
 80011f2:	4b2c      	ldr	r3, [pc, #176]	@ (80012a4 <main+0xf8>)
 80011f4:	edc3 7a00 	vstr	s15, [r3]
	LCD_Clear();
 80011f8:	f7ff ffab 	bl	8001152 <LCD_Clear>
	if(gas_concentration < 2000)
 80011fc:	4b29      	ldr	r3, [pc, #164]	@ (80012a4 <main+0xf8>)
 80011fe:	edd3 7a00 	vldr	s15, [r3]
 8001202:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80012a8 <main+0xfc>
 8001206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800120a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120e:	d514      	bpl.n	800123a <main+0x8e>
	{
		LCD_DisplayGasPPM((uint16_t)gas_concentration, 0, 0);
 8001210:	4b24      	ldr	r3, [pc, #144]	@ (80012a4 <main+0xf8>)
 8001212:	edd3 7a00 	vldr	s15, [r3]
 8001216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800121a:	ee17 3a90 	vmov	r3, s15
 800121e:	b29b      	uxth	r3, r3
 8001220:	2200      	movs	r2, #0
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff9f 	bl	8001168 <LCD_DisplayGasPPM>
		LCD_SetCursor(1, 0);
 800122a:	2100      	movs	r1, #0
 800122c:	2001      	movs	r0, #1
 800122e:	f7ff ff74 	bl	800111a <LCD_SetCursor>
		LCD_SendString("Binh thuong");
 8001232:	481e      	ldr	r0, [pc, #120]	@ (80012ac <main+0x100>)
 8001234:	f7ff ff5c 	bl	80010f0 <LCD_SendString>
 8001238:	e015      	b.n	8001266 <main+0xba>
	}
	else
	{
		Buzzer_Alert();
 800123a:	f000 f98d 	bl	8001558 <Buzzer_Alert>
		LCD_DisplayGasPPM((uint16_t)gas_concentration, 0, 0);
 800123e:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <main+0xf8>)
 8001240:	edd3 7a00 	vldr	s15, [r3]
 8001244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001248:	ee17 3a90 	vmov	r3, s15
 800124c:	b29b      	uxth	r3, r3
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ff88 	bl	8001168 <LCD_DisplayGasPPM>
		LCD_SetCursor(1, 0);
 8001258:	2100      	movs	r1, #0
 800125a:	2001      	movs	r0, #1
 800125c:	f7ff ff5d 	bl	800111a <LCD_SetCursor>
		LCD_SendString("Khi gas ro ri");
 8001260:	4813      	ldr	r0, [pc, #76]	@ (80012b0 <main+0x104>)
 8001262:	f7ff ff45 	bl	80010f0 <LCD_SendString>
	}
	// Truyền nồng độ khí gas đo được từ stm32 sang esp8266 bằng uart
	sprintf(buffer, "Gas: %u\n", (uint16_t)gas_concentration);
 8001266:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <main+0xf8>)
 8001268:	edd3 7a00 	vldr	s15, [r3]
 800126c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001270:	ee17 3a90 	vmov	r3, s15
 8001274:	b29b      	uxth	r3, r3
 8001276:	461a      	mov	r2, r3
 8001278:	490e      	ldr	r1, [pc, #56]	@ (80012b4 <main+0x108>)
 800127a:	480f      	ldr	r0, [pc, #60]	@ (80012b8 <main+0x10c>)
 800127c:	f003 f980 	bl	8004580 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *) buffer, strlen(buffer), HAL_MAX_DELAY);
 8001280:	480d      	ldr	r0, [pc, #52]	@ (80012b8 <main+0x10c>)
 8001282:	f7ff f805 	bl	8000290 <strlen>
 8001286:	4603      	mov	r3, r0
 8001288:	b29a      	uxth	r2, r3
 800128a:	f04f 33ff 	mov.w	r3, #4294967295
 800128e:	490a      	ldr	r1, [pc, #40]	@ (80012b8 <main+0x10c>)
 8001290:	480a      	ldr	r0, [pc, #40]	@ (80012bc <main+0x110>)
 8001292:	f002 f89f 	bl	80033d4 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001296:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800129a:	f000 fc83 	bl	8001ba4 <HAL_Delay>
  {
 800129e:	e794      	b.n	80011ca <main+0x1e>
 80012a0:	20000298 	.word	0x20000298
 80012a4:	20000294 	.word	0x20000294
 80012a8:	44fa0000 	.word	0x44fa0000
 80012ac:	08007bd4 	.word	0x08007bd4
 80012b0:	08007be0 	.word	0x08007be0
 80012b4:	08007bf0 	.word	0x08007bf0
 80012b8:	2000029c 	.word	0x2000029c
 80012bc:	2000024c 	.word	0x2000024c

080012c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b094      	sub	sp, #80	@ 0x50
 80012c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c6:	f107 0320 	add.w	r3, r7, #32
 80012ca:	2230      	movs	r2, #48	@ 0x30
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f003 f9b9 	bl	8004646 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	4b2c      	ldr	r3, [pc, #176]	@ (800139c <SystemClock_Config+0xdc>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ec:	4a2b      	ldr	r2, [pc, #172]	@ (800139c <SystemClock_Config+0xdc>)
 80012ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f4:	4b29      	ldr	r3, [pc, #164]	@ (800139c <SystemClock_Config+0xdc>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001300:	2300      	movs	r3, #0
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	4b26      	ldr	r3, [pc, #152]	@ (80013a0 <SystemClock_Config+0xe0>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a25      	ldr	r2, [pc, #148]	@ (80013a0 <SystemClock_Config+0xe0>)
 800130a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b23      	ldr	r3, [pc, #140]	@ (80013a0 <SystemClock_Config+0xe0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800131c:	2301      	movs	r3, #1
 800131e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001320:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001326:	2302      	movs	r3, #2
 8001328:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800132a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800132e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001330:	2308      	movs	r3, #8
 8001332:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001334:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8001338:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800133a:	2302      	movs	r3, #2
 800133c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800133e:	2304      	movs	r3, #4
 8001340:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001342:	f107 0320 	add.w	r3, r7, #32
 8001346:	4618      	mov	r0, r3
 8001348:	f001 fb5c 	bl	8002a04 <HAL_RCC_OscConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001352:	f000 f9c9 	bl	80016e8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001356:	f001 fb05 	bl	8002964 <HAL_PWREx_EnableOverDrive>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001360:	f000 f9c2 	bl	80016e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001364:	230f      	movs	r3, #15
 8001366:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001368:	2302      	movs	r3, #2
 800136a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001370:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001374:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001376:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800137a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	2105      	movs	r1, #5
 8001382:	4618      	mov	r0, r3
 8001384:	f001 fdb6 	bl	8002ef4 <HAL_RCC_ClockConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800138e:	f000 f9ab 	bl	80016e8 <Error_Handler>
  }
}
 8001392:	bf00      	nop
 8001394:	3750      	adds	r7, #80	@ 0x50
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	40007000 	.word	0x40007000

080013a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013aa:	463b      	mov	r3, r7
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013b6:	4b21      	ldr	r3, [pc, #132]	@ (800143c <MX_ADC1_Init+0x98>)
 80013b8:	4a21      	ldr	r2, [pc, #132]	@ (8001440 <MX_ADC1_Init+0x9c>)
 80013ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013bc:	4b1f      	ldr	r3, [pc, #124]	@ (800143c <MX_ADC1_Init+0x98>)
 80013be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013c4:	4b1d      	ldr	r3, [pc, #116]	@ (800143c <MX_ADC1_Init+0x98>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013ca:	4b1c      	ldr	r3, [pc, #112]	@ (800143c <MX_ADC1_Init+0x98>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	@ (800143c <MX_ADC1_Init+0x98>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013d6:	4b19      	ldr	r3, [pc, #100]	@ (800143c <MX_ADC1_Init+0x98>)
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013de:	4b17      	ldr	r3, [pc, #92]	@ (800143c <MX_ADC1_Init+0x98>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013e4:	4b15      	ldr	r3, [pc, #84]	@ (800143c <MX_ADC1_Init+0x98>)
 80013e6:	4a17      	ldr	r2, [pc, #92]	@ (8001444 <MX_ADC1_Init+0xa0>)
 80013e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ea:	4b14      	ldr	r3, [pc, #80]	@ (800143c <MX_ADC1_Init+0x98>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013f0:	4b12      	ldr	r3, [pc, #72]	@ (800143c <MX_ADC1_Init+0x98>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <MX_ADC1_Init+0x98>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013fe:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <MX_ADC1_Init+0x98>)
 8001400:	2201      	movs	r2, #1
 8001402:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001404:	480d      	ldr	r0, [pc, #52]	@ (800143c <MX_ADC1_Init+0x98>)
 8001406:	f000 fbf1 	bl	8001bec <HAL_ADC_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001410:	f000 f96a 	bl	80016e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001414:	2300      	movs	r3, #0
 8001416:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001418:	2301      	movs	r3, #1
 800141a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001420:	463b      	mov	r3, r7
 8001422:	4619      	mov	r1, r3
 8001424:	4805      	ldr	r0, [pc, #20]	@ (800143c <MX_ADC1_Init+0x98>)
 8001426:	f000 fdc3 	bl	8001fb0 <HAL_ADC_ConfigChannel>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001430:	f000 f95a 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000204 	.word	0x20000204
 8001440:	40012000 	.word	0x40012000
 8001444:	0f000001 	.word	0x0f000001

08001448 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800144c:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 800144e:	4a12      	ldr	r2, [pc, #72]	@ (8001498 <MX_USART1_UART_Init+0x50>)
 8001450:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001452:	4b10      	ldr	r3, [pc, #64]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 8001454:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001458:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001460:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800146c:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 800146e:	220c      	movs	r2, #12
 8001470:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001472:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	@ (8001494 <MX_USART1_UART_Init+0x4c>)
 8001480:	f001 ff58 	bl	8003334 <HAL_UART_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800148a:	f000 f92d 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2000024c 	.word	0x2000024c
 8001498:	40011000 	.word	0x40011000

0800149c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	4b26      	ldr	r3, [pc, #152]	@ (8001550 <MX_GPIO_Init+0xb4>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	4a25      	ldr	r2, [pc, #148]	@ (8001550 <MX_GPIO_Init+0xb4>)
 80014bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c2:	4b23      	ldr	r3, [pc, #140]	@ (8001550 <MX_GPIO_Init+0xb4>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001550 <MX_GPIO_Init+0xb4>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001550 <MX_GPIO_Init+0xb4>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014de:	4b1c      	ldr	r3, [pc, #112]	@ (8001550 <MX_GPIO_Init+0xb4>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	603b      	str	r3, [r7, #0]
 80014ee:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <MX_GPIO_Init+0xb4>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	4a17      	ldr	r2, [pc, #92]	@ (8001550 <MX_GPIO_Init+0xb4>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fa:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <MX_GPIO_Init+0xb4>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin
 8001506:	2200      	movs	r2, #0
 8001508:	217f      	movs	r1, #127	@ 0x7f
 800150a:	4812      	ldr	r0, [pc, #72]	@ (8001554 <MX_GPIO_Init+0xb8>)
 800150c:	f001 fa10 	bl	8002930 <HAL_GPIO_WritePin>
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001510:	2301      	movs	r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	2301      	movs	r3, #1
 8001516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800151c:	2301      	movs	r3, #1
 800151e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	4619      	mov	r1, r3
 8001526:	480b      	ldr	r0, [pc, #44]	@ (8001554 <MX_GPIO_Init+0xb8>)
 8001528:	f001 f856 	bl	80025d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_EN_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 800152c:	237e      	movs	r3, #126	@ 0x7e
 800152e:	60fb      	str	r3, [r7, #12]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001530:	2301      	movs	r3, #1
 8001532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001538:	2302      	movs	r3, #2
 800153a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	4619      	mov	r1, r3
 8001542:	4804      	ldr	r0, [pc, #16]	@ (8001554 <MX_GPIO_Init+0xb8>)
 8001544:	f001 f848 	bl	80025d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001548:	bf00      	nop
 800154a:	3720      	adds	r7, #32
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40023800 	.word	0x40023800
 8001554:	40020400 	.word	0x40020400

08001558 <Buzzer_Alert>:

/* USER CODE BEGIN 4 */

void Buzzer_Alert()
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	//Mac kieu Source Dong, Khi tin hieu 1 tu PB0 thi coi se hu`
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800155c:	2201      	movs	r2, #1
 800155e:	2101      	movs	r1, #1
 8001560:	4806      	ldr	r0, [pc, #24]	@ (800157c <Buzzer_Alert+0x24>)
 8001562:	f001 f9e5 	bl	8002930 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001566:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800156a:	f000 fb1b 	bl	8001ba4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	2101      	movs	r1, #1
 8001572:	4802      	ldr	r0, [pc, #8]	@ (800157c <Buzzer_Alert+0x24>)
 8001574:	f001 f9dc 	bl	8002930 <HAL_GPIO_WritePin>
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40020400 	.word	0x40020400

08001580 <Read_ADC_Value>:

uint32_t Read_ADC_Value(void) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8001586:	480a      	ldr	r0, [pc, #40]	@ (80015b0 <Read_ADC_Value+0x30>)
 8001588:	f000 fb74 	bl	8001c74 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800158c:	f04f 31ff 	mov.w	r1, #4294967295
 8001590:	4807      	ldr	r0, [pc, #28]	@ (80015b0 <Read_ADC_Value+0x30>)
 8001592:	f000 fc74 	bl	8001e7e <HAL_ADC_PollForConversion>
    uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 8001596:	4806      	ldr	r0, [pc, #24]	@ (80015b0 <Read_ADC_Value+0x30>)
 8001598:	f000 fcfc 	bl	8001f94 <HAL_ADC_GetValue>
 800159c:	6078      	str	r0, [r7, #4]
    HAL_ADC_Stop(&hadc1);
 800159e:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <Read_ADC_Value+0x30>)
 80015a0:	f000 fc3a 	bl	8001e18 <HAL_ADC_Stop>
    return adc_value;
 80015a4:	687b      	ldr	r3, [r7, #4]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000204 	.word	0x20000204
 80015b4:	00000000 	.word	0x00000000

080015b8 <Calculate_RS>:

float Calculate_RS(uint32_t adc_value) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
    float voltage = (adc_value / ADC_RESOLUTION) * V_REF;  // Chuyển ADC sang điện áp
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7fe ffaf 	bl	8000524 <__aeabi_ui2d>
 80015c6:	a319      	add	r3, pc, #100	@ (adr r3, 800162c <Calculate_RS+0x74>)
 80015c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015cc:	f7ff f94e 	bl	800086c <__aeabi_ddiv>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4610      	mov	r0, r2
 80015d6:	4619      	mov	r1, r3
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <Calculate_RS+0x70>)
 80015de:	f7ff f81b 	bl	8000618 <__aeabi_dmul>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	f7ff faed 	bl	8000bc8 <__aeabi_d2f>
 80015ee:	4603      	mov	r3, r0
 80015f0:	60fb      	str	r3, [r7, #12]
    float rs = ((V_REF - voltage) / voltage) * RL_VALUE;   // Tính điện trở RS
 80015f2:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80015f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80015fa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001606:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800160a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800160e:	edc7 7a02 	vstr	s15, [r7, #8]
    return rs;
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	ee07 3a90 	vmov	s15, r3
}
 8001618:	eeb0 0a67 	vmov.f32	s0, s15
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	f3af 8000 	nop.w
 8001628:	40140000 	.word	0x40140000
 800162c:	00000000 	.word	0x00000000
 8001630:	40affe00 	.word	0x40affe00
 8001634:	00000000 	.word	0x00000000

08001638 <RS_to_PPM>:

// Hàm chuyển đổi từ R_S sang ppm dựa trên đường cong MQ-2 (nội suy log-log)
float RS_to_PPM(float rs) {
 8001638:	b5b0      	push	{r4, r5, r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	ed87 0a01 	vstr	s0, [r7, #4]
    float ratio = rs / R0_VALUE;  // Tính tỷ lệ R_S / R0
 8001642:	ed97 7a01 	vldr	s14, [r7, #4]
 8001646:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800164a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800164e:	edc7 7a05 	vstr	s15, [r7, #20]

    // Nội suy dựa trên đường cong của MQ-2 từ datasheet (ví dụ với khí LPG)
    // Công thức tham khảo log-log: ppm = 10^((log10(ratio) - B) / M)
    float M = -0.47;  // Hệ số dốc (slope) cho khí LPG (ví dụ)
 8001652:	4b23      	ldr	r3, [pc, #140]	@ (80016e0 <RS_to_PPM+0xa8>)
 8001654:	613b      	str	r3, [r7, #16]
    float B = 1.23;   // Hệ số giao (intercept) từ datasheet
 8001656:	4b23      	ldr	r3, [pc, #140]	@ (80016e4 <RS_to_PPM+0xac>)
 8001658:	60fb      	str	r3, [r7, #12]

    float ppm = pow(10, ((log10(ratio) - B) / M));
 800165a:	6978      	ldr	r0, [r7, #20]
 800165c:	f7fe ff84 	bl	8000568 <__aeabi_f2d>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	ec43 2b10 	vmov	d0, r2, r3
 8001668:	f005 f8b6 	bl	80067d8 <log10>
 800166c:	ec55 4b10 	vmov	r4, r5, d0
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f7fe ff79 	bl	8000568 <__aeabi_f2d>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4620      	mov	r0, r4
 800167c:	4629      	mov	r1, r5
 800167e:	f7fe fe13 	bl	80002a8 <__aeabi_dsub>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4614      	mov	r4, r2
 8001688:	461d      	mov	r5, r3
 800168a:	6938      	ldr	r0, [r7, #16]
 800168c:	f7fe ff6c 	bl	8000568 <__aeabi_f2d>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4620      	mov	r0, r4
 8001696:	4629      	mov	r1, r5
 8001698:	f7ff f8e8 	bl	800086c <__aeabi_ddiv>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	ec43 2b17 	vmov	d7, r2, r3
 80016a4:	eeb0 1a47 	vmov.f32	s2, s14
 80016a8:	eef0 1a67 	vmov.f32	s3, s15
 80016ac:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 80016d8 <RS_to_PPM+0xa0>
 80016b0:	f005 f8d0 	bl	8006854 <pow>
 80016b4:	ec53 2b10 	vmov	r2, r3, d0
 80016b8:	4610      	mov	r0, r2
 80016ba:	4619      	mov	r1, r3
 80016bc:	f7ff fa84 	bl	8000bc8 <__aeabi_d2f>
 80016c0:	4603      	mov	r3, r0
 80016c2:	60bb      	str	r3, [r7, #8]
    return ppm;
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	ee07 3a90 	vmov	s15, r3
}
 80016ca:	eeb0 0a67 	vmov.f32	s0, s15
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bdb0      	pop	{r4, r5, r7, pc}
 80016d4:	f3af 8000 	nop.w
 80016d8:	00000000 	.word	0x00000000
 80016dc:	40240000 	.word	0x40240000
 80016e0:	bef0a3d7 	.word	0xbef0a3d7
 80016e4:	3f9d70a4 	.word	0x3f9d70a4

080016e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
}
 80016ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <Error_Handler+0x8>

080016f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	4b10      	ldr	r3, [pc, #64]	@ (8001740 <HAL_MspInit+0x4c>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001702:	4a0f      	ldr	r2, [pc, #60]	@ (8001740 <HAL_MspInit+0x4c>)
 8001704:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001708:	6453      	str	r3, [r2, #68]	@ 0x44
 800170a:	4b0d      	ldr	r3, [pc, #52]	@ (8001740 <HAL_MspInit+0x4c>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <HAL_MspInit+0x4c>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171e:	4a08      	ldr	r2, [pc, #32]	@ (8001740 <HAL_MspInit+0x4c>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001724:	6413      	str	r3, [r2, #64]	@ 0x40
 8001726:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <HAL_MspInit+0x4c>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800

08001744 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08a      	sub	sp, #40	@ 0x28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a17      	ldr	r2, [pc, #92]	@ (80017c0 <HAL_ADC_MspInit+0x7c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d127      	bne.n	80017b6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	4b16      	ldr	r3, [pc, #88]	@ (80017c4 <HAL_ADC_MspInit+0x80>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176e:	4a15      	ldr	r2, [pc, #84]	@ (80017c4 <HAL_ADC_MspInit+0x80>)
 8001770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001774:	6453      	str	r3, [r2, #68]	@ 0x44
 8001776:	4b13      	ldr	r3, [pc, #76]	@ (80017c4 <HAL_ADC_MspInit+0x80>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	4b0f      	ldr	r3, [pc, #60]	@ (80017c4 <HAL_ADC_MspInit+0x80>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	4a0e      	ldr	r2, [pc, #56]	@ (80017c4 <HAL_ADC_MspInit+0x80>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6313      	str	r3, [r2, #48]	@ 0x30
 8001792:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <HAL_ADC_MspInit+0x80>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800179e:	2301      	movs	r3, #1
 80017a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a2:	2303      	movs	r3, #3
 80017a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	4619      	mov	r1, r3
 80017b0:	4805      	ldr	r0, [pc, #20]	@ (80017c8 <HAL_ADC_MspInit+0x84>)
 80017b2:	f000 ff11 	bl	80025d8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80017b6:	bf00      	nop
 80017b8:	3728      	adds	r7, #40	@ 0x28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40012000 	.word	0x40012000
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020000 	.word	0x40020000

080017cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	@ 0x28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a19      	ldr	r2, [pc, #100]	@ (8001850 <HAL_UART_MspInit+0x84>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d12c      	bne.n	8001848 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	4b18      	ldr	r3, [pc, #96]	@ (8001854 <HAL_UART_MspInit+0x88>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f6:	4a17      	ldr	r2, [pc, #92]	@ (8001854 <HAL_UART_MspInit+0x88>)
 80017f8:	f043 0310 	orr.w	r3, r3, #16
 80017fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017fe:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <HAL_UART_MspInit+0x88>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b11      	ldr	r3, [pc, #68]	@ (8001854 <HAL_UART_MspInit+0x88>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	4a10      	ldr	r2, [pc, #64]	@ (8001854 <HAL_UART_MspInit+0x88>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6313      	str	r3, [r2, #48]	@ 0x30
 800181a:	4b0e      	ldr	r3, [pc, #56]	@ (8001854 <HAL_UART_MspInit+0x88>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001826:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800182a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001834:	2303      	movs	r3, #3
 8001836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001838:	2307      	movs	r3, #7
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	4805      	ldr	r0, [pc, #20]	@ (8001858 <HAL_UART_MspInit+0x8c>)
 8001844:	f000 fec8 	bl	80025d8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001848:	bf00      	nop
 800184a:	3728      	adds	r7, #40	@ 0x28
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40011000 	.word	0x40011000
 8001854:	40023800 	.word	0x40023800
 8001858:	40020000 	.word	0x40020000

0800185c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <NMI_Handler+0x4>

08001864 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <HardFault_Handler+0x4>

0800186c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <MemManage_Handler+0x4>

08001874 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <BusFault_Handler+0x4>

0800187c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <UsageFault_Handler+0x4>

08001884 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b2:	f000 f957 	bl	8001b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}

080018ba <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  return 1;
 80018be:	2301      	movs	r3, #1
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <_kill>:

int _kill(int pid, int sig)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018d4:	f002 ff0a 	bl	80046ec <__errno>
 80018d8:	4603      	mov	r3, r0
 80018da:	2216      	movs	r2, #22
 80018dc:	601a      	str	r2, [r3, #0]
  return -1;
 80018de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <_exit>:

void _exit (int status)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018f2:	f04f 31ff 	mov.w	r1, #4294967295
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffe7 	bl	80018ca <_kill>
  while (1) {}    /* Make sure we hang here */
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <_exit+0x12>

08001900 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	e00a      	b.n	8001928 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001912:	f3af 8000 	nop.w
 8001916:	4601      	mov	r1, r0
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	60ba      	str	r2, [r7, #8]
 800191e:	b2ca      	uxtb	r2, r1
 8001920:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3301      	adds	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	429a      	cmp	r2, r3
 800192e:	dbf0      	blt.n	8001912 <_read+0x12>
  }

  return len;
 8001930:	687b      	ldr	r3, [r7, #4]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	60f8      	str	r0, [r7, #12]
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	e009      	b.n	8001960 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	60ba      	str	r2, [r7, #8]
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3301      	adds	r3, #1
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	429a      	cmp	r2, r3
 8001966:	dbf1      	blt.n	800194c <_write+0x12>
  }
  return len;
 8001968:	687b      	ldr	r3, [r7, #4]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <_close>:

int _close(int file)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800199a:	605a      	str	r2, [r3, #4]
  return 0;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <_isatty>:

int _isatty(int file)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019b2:	2301      	movs	r3, #1
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e4:	4a14      	ldr	r2, [pc, #80]	@ (8001a38 <_sbrk+0x5c>)
 80019e6:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <_sbrk+0x60>)
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f0:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f8:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <_sbrk+0x64>)
 80019fa:	4a12      	ldr	r2, [pc, #72]	@ (8001a44 <_sbrk+0x68>)
 80019fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fe:	4b10      	ldr	r3, [pc, #64]	@ (8001a40 <_sbrk+0x64>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d207      	bcs.n	8001a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a0c:	f002 fe6e 	bl	80046ec <__errno>
 8001a10:	4603      	mov	r3, r0
 8001a12:	220c      	movs	r2, #12
 8001a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1a:	e009      	b.n	8001a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a1c:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a22:	4b07      	ldr	r3, [pc, #28]	@ (8001a40 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	4a05      	ldr	r2, [pc, #20]	@ (8001a40 <_sbrk+0x64>)
 8001a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20030000 	.word	0x20030000
 8001a3c:	00000400 	.word	0x00000400
 8001a40:	20000300 	.word	0x20000300
 8001a44:	20000458 	.word	0x20000458

08001a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <SystemInit+0x20>)
 8001a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a52:	4a05      	ldr	r2, [pc, #20]	@ (8001a68 <SystemInit+0x20>)
 8001a54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001a6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001aa4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a70:	f7ff ffea 	bl	8001a48 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a74:	480c      	ldr	r0, [pc, #48]	@ (8001aa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a76:	490d      	ldr	r1, [pc, #52]	@ (8001aac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a78:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a7c:	e002      	b.n	8001a84 <LoopCopyDataInit>

08001a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a82:	3304      	adds	r3, #4

08001a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a88:	d3f9      	bcc.n	8001a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a8c:	4c0a      	ldr	r4, [pc, #40]	@ (8001ab8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a90:	e001      	b.n	8001a96 <LoopFillZerobss>

08001a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a94:	3204      	adds	r2, #4

08001a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a98:	d3fb      	bcc.n	8001a92 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a9a:	f002 fe2d 	bl	80046f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a9e:	f7ff fb85 	bl	80011ac <main>
  bx  lr    
 8001aa2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001aa4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aac:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001ab0:	08007fc8 	.word	0x08007fc8
  ldr r2, =_sbss
 8001ab4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001ab8:	20000454 	.word	0x20000454

08001abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC_IRQHandler>
	...

08001ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b00 <HAL_Init+0x40>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b00 <HAL_Init+0x40>)
 8001aca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ace:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b00 <HAL_Init+0x40>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8001b00 <HAL_Init+0x40>)
 8001ad6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ada:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001adc:	4b08      	ldr	r3, [pc, #32]	@ (8001b00 <HAL_Init+0x40>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a07      	ldr	r2, [pc, #28]	@ (8001b00 <HAL_Init+0x40>)
 8001ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ae6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae8:	2003      	movs	r0, #3
 8001aea:	f000 fd41 	bl	8002570 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aee:	200f      	movs	r0, #15
 8001af0:	f000 f808 	bl	8001b04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af4:	f7ff fdfe 	bl	80016f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023c00 	.word	0x40023c00

08001b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b0c:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <HAL_InitTick+0x54>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b12      	ldr	r3, [pc, #72]	@ (8001b5c <HAL_InitTick+0x58>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 fd4b 	bl	80025be <HAL_SYSTICK_Config>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00e      	b.n	8001b50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b0f      	cmp	r3, #15
 8001b36:	d80a      	bhi.n	8001b4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b40:	f000 fd21 	bl	8002586 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b44:	4a06      	ldr	r2, [pc, #24]	@ (8001b60 <HAL_InitTick+0x5c>)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	e000      	b.n	8001b50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	20000008 	.word	0x20000008
 8001b60:	20000004 	.word	0x20000004

08001b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b68:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <HAL_IncTick+0x20>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b06      	ldr	r3, [pc, #24]	@ (8001b88 <HAL_IncTick+0x24>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	4a04      	ldr	r2, [pc, #16]	@ (8001b88 <HAL_IncTick+0x24>)
 8001b76:	6013      	str	r3, [r2, #0]
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000008 	.word	0x20000008
 8001b88:	20000304 	.word	0x20000304

08001b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b90:	4b03      	ldr	r3, [pc, #12]	@ (8001ba0 <HAL_GetTick+0x14>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000304 	.word	0x20000304

08001ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bac:	f7ff ffee 	bl	8001b8c <HAL_GetTick>
 8001bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bbc:	d005      	beq.n	8001bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001be8 <HAL_Delay+0x44>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bca:	bf00      	nop
 8001bcc:	f7ff ffde 	bl	8001b8c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d8f7      	bhi.n	8001bcc <HAL_Delay+0x28>
  {
  }
}
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000008 	.word	0x20000008

08001bec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e033      	b.n	8001c6a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d109      	bne.n	8001c1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff fd9a 	bl	8001744 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d118      	bne.n	8001c5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c32:	f023 0302 	bic.w	r3, r3, #2
 8001c36:	f043 0202 	orr.w	r2, r3, #2
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 fae8 	bl	8002214 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	f023 0303 	bic.w	r3, r3, #3
 8001c52:	f043 0201 	orr.w	r2, r3, #1
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c5a:	e001      	b.n	8001c60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d101      	bne.n	8001c8e <HAL_ADC_Start+0x1a>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e0b2      	b.n	8001df4 <HAL_ADC_Start+0x180>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d018      	beq.n	8001cd6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0201 	orr.w	r2, r2, #1
 8001cb2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cb4:	4b52      	ldr	r3, [pc, #328]	@ (8001e00 <HAL_ADC_Start+0x18c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a52      	ldr	r2, [pc, #328]	@ (8001e04 <HAL_ADC_Start+0x190>)
 8001cba:	fba2 2303 	umull	r2, r3, r2, r3
 8001cbe:	0c9a      	lsrs	r2, r3, #18
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001cc8:	e002      	b.n	8001cd0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f9      	bne.n	8001cca <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d17a      	bne.n	8001dda <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001cec:	f023 0301 	bic.w	r3, r3, #1
 8001cf0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d007      	beq.n	8001d16 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d0e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d22:	d106      	bne.n	8001d32 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d28:	f023 0206 	bic.w	r2, r3, #6
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d30:	e002      	b.n	8001d38 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d40:	4b31      	ldr	r3, [pc, #196]	@ (8001e08 <HAL_ADC_Start+0x194>)
 8001d42:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001d4c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 031f 	and.w	r3, r3, #31
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d12a      	bne.n	8001db0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a2b      	ldr	r2, [pc, #172]	@ (8001e0c <HAL_ADC_Start+0x198>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d015      	beq.n	8001d90 <HAL_ADC_Start+0x11c>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a29      	ldr	r2, [pc, #164]	@ (8001e10 <HAL_ADC_Start+0x19c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d105      	bne.n	8001d7a <HAL_ADC_Start+0x106>
 8001d6e:	4b26      	ldr	r3, [pc, #152]	@ (8001e08 <HAL_ADC_Start+0x194>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 031f 	and.w	r3, r3, #31
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00a      	beq.n	8001d90 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a25      	ldr	r2, [pc, #148]	@ (8001e14 <HAL_ADC_Start+0x1a0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d136      	bne.n	8001df2 <HAL_ADC_Start+0x17e>
 8001d84:	4b20      	ldr	r3, [pc, #128]	@ (8001e08 <HAL_ADC_Start+0x194>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d130      	bne.n	8001df2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d129      	bne.n	8001df2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	e020      	b.n	8001df2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a15      	ldr	r2, [pc, #84]	@ (8001e0c <HAL_ADC_Start+0x198>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d11b      	bne.n	8001df2 <HAL_ADC_Start+0x17e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d114      	bne.n	8001df2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	e00b      	b.n	8001df2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	f043 0210 	orr.w	r2, r3, #16
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dea:	f043 0201 	orr.w	r2, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	20000000 	.word	0x20000000
 8001e04:	431bde83 	.word	0x431bde83
 8001e08:	40012300 	.word	0x40012300
 8001e0c:	40012000 	.word	0x40012000
 8001e10:	40012100 	.word	0x40012100
 8001e14:	40012200 	.word	0x40012200

08001e18 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d101      	bne.n	8001e2e <HAL_ADC_Stop+0x16>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e021      	b.n	8001e72 <HAL_ADC_Stop+0x5a>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0201 	bic.w	r2, r2, #1
 8001e44:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d109      	bne.n	8001e68 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e58:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e5c:	f023 0301 	bic.w	r3, r3, #1
 8001e60:	f043 0201 	orr.w	r2, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e9a:	d113      	bne.n	8001ec4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ea6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001eaa:	d10b      	bne.n	8001ec4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb0:	f043 0220 	orr.w	r2, r3, #32
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e063      	b.n	8001f8c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ec4:	f7ff fe62 	bl	8001b8c <HAL_GetTick>
 8001ec8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001eca:	e021      	b.n	8001f10 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed2:	d01d      	beq.n	8001f10 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d007      	beq.n	8001eea <HAL_ADC_PollForConversion+0x6c>
 8001eda:	f7ff fe57 	bl	8001b8c <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d212      	bcs.n	8001f10 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d00b      	beq.n	8001f10 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efc:	f043 0204 	orr.w	r2, r3, #4
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e03d      	b.n	8001f8c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d1d6      	bne.n	8001ecc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f06f 0212 	mvn.w	r2, #18
 8001f26:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d123      	bne.n	8001f8a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d11f      	bne.n	8001f8a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f50:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d006      	beq.n	8001f66 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d111      	bne.n	8001f8a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d105      	bne.n	8001f8a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	f043 0201 	orr.w	r2, r3, #1
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x1c>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e113      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x244>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b09      	cmp	r3, #9
 8001fda:	d925      	bls.n	8002028 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68d9      	ldr	r1, [r3, #12]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4613      	mov	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	3b1e      	subs	r3, #30
 8001ff2:	2207      	movs	r2, #7
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43da      	mvns	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	400a      	ands	r2, r1
 8002000:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68d9      	ldr	r1, [r3, #12]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	b29b      	uxth	r3, r3
 8002012:	4618      	mov	r0, r3
 8002014:	4603      	mov	r3, r0
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4403      	add	r3, r0
 800201a:	3b1e      	subs	r3, #30
 800201c:	409a      	lsls	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	e022      	b.n	800206e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6919      	ldr	r1, [r3, #16]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	b29b      	uxth	r3, r3
 8002034:	461a      	mov	r2, r3
 8002036:	4613      	mov	r3, r2
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4413      	add	r3, r2
 800203c:	2207      	movs	r2, #7
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43da      	mvns	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	400a      	ands	r2, r1
 800204a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6919      	ldr	r1, [r3, #16]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	b29b      	uxth	r3, r3
 800205c:	4618      	mov	r0, r3
 800205e:	4603      	mov	r3, r0
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4403      	add	r3, r0
 8002064:	409a      	lsls	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b06      	cmp	r3, #6
 8002074:	d824      	bhi.n	80020c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	3b05      	subs	r3, #5
 8002088:	221f      	movs	r2, #31
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43da      	mvns	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	400a      	ands	r2, r1
 8002096:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	4618      	mov	r0, r3
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	3b05      	subs	r3, #5
 80020b2:	fa00 f203 	lsl.w	r2, r0, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80020be:	e04c      	b.n	800215a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b0c      	cmp	r3, #12
 80020c6:	d824      	bhi.n	8002112 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	3b23      	subs	r3, #35	@ 0x23
 80020da:	221f      	movs	r2, #31
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43da      	mvns	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	400a      	ands	r2, r1
 80020e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	4618      	mov	r0, r3
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	3b23      	subs	r3, #35	@ 0x23
 8002104:	fa00 f203 	lsl.w	r2, r0, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002110:	e023      	b.n	800215a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	3b41      	subs	r3, #65	@ 0x41
 8002124:	221f      	movs	r2, #31
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43da      	mvns	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	400a      	ands	r2, r1
 8002132:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	b29b      	uxth	r3, r3
 8002140:	4618      	mov	r0, r3
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	3b41      	subs	r3, #65	@ 0x41
 800214e:	fa00 f203 	lsl.w	r2, r0, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800215a:	4b29      	ldr	r3, [pc, #164]	@ (8002200 <HAL_ADC_ConfigChannel+0x250>)
 800215c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a28      	ldr	r2, [pc, #160]	@ (8002204 <HAL_ADC_ConfigChannel+0x254>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d10f      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x1d8>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b12      	cmp	r3, #18
 800216e:	d10b      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a1d      	ldr	r2, [pc, #116]	@ (8002204 <HAL_ADC_ConfigChannel+0x254>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d12b      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x23a>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a1c      	ldr	r2, [pc, #112]	@ (8002208 <HAL_ADC_ConfigChannel+0x258>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d003      	beq.n	80021a4 <HAL_ADC_ConfigChannel+0x1f4>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b11      	cmp	r3, #17
 80021a2:	d122      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a11      	ldr	r2, [pc, #68]	@ (8002208 <HAL_ADC_ConfigChannel+0x258>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d111      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021c6:	4b11      	ldr	r3, [pc, #68]	@ (800220c <HAL_ADC_ConfigChannel+0x25c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a11      	ldr	r2, [pc, #68]	@ (8002210 <HAL_ADC_ConfigChannel+0x260>)
 80021cc:	fba2 2303 	umull	r2, r3, r2, r3
 80021d0:	0c9a      	lsrs	r2, r3, #18
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80021dc:	e002      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	3b01      	subs	r3, #1
 80021e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f9      	bne.n	80021de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	40012300 	.word	0x40012300
 8002204:	40012000 	.word	0x40012000
 8002208:	10000012 	.word	0x10000012
 800220c:	20000000 	.word	0x20000000
 8002210:	431bde83 	.word	0x431bde83

08002214 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800221c:	4b79      	ldr	r3, [pc, #484]	@ (8002404 <ADC_Init+0x1f0>)
 800221e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	431a      	orrs	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002248:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6859      	ldr	r1, [r3, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	021a      	lsls	r2, r3, #8
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800226c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6859      	ldr	r1, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800228e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6899      	ldr	r1, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a6:	4a58      	ldr	r2, [pc, #352]	@ (8002408 <ADC_Init+0x1f4>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d022      	beq.n	80022f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6899      	ldr	r1, [r3, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80022dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6899      	ldr	r1, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	e00f      	b.n	8002312 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002300:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002310:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0202 	bic.w	r2, r2, #2
 8002320:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6899      	ldr	r1, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	7e1b      	ldrb	r3, [r3, #24]
 800232c:	005a      	lsls	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3020 	ldrb.w	r3, [r3, #32]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d01b      	beq.n	8002378 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800234e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800235e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6859      	ldr	r1, [r3, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236a:	3b01      	subs	r3, #1
 800236c:	035a      	lsls	r2, r3, #13
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	e007      	b.n	8002388 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002386:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002396:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	051a      	lsls	r2, r3, #20
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80023bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6899      	ldr	r1, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023ca:	025a      	lsls	r2, r3, #9
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6899      	ldr	r1, [r3, #8]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	029a      	lsls	r2, r3, #10
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	609a      	str	r2, [r3, #8]
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	40012300 	.word	0x40012300
 8002408:	0f000001 	.word	0x0f000001

0800240c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800241c:	4b0c      	ldr	r3, [pc, #48]	@ (8002450 <__NVIC_SetPriorityGrouping+0x44>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002428:	4013      	ands	r3, r2
 800242a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002434:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002438:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800243c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800243e:	4a04      	ldr	r2, [pc, #16]	@ (8002450 <__NVIC_SetPriorityGrouping+0x44>)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	60d3      	str	r3, [r2, #12]
}
 8002444:	bf00      	nop
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002458:	4b04      	ldr	r3, [pc, #16]	@ (800246c <__NVIC_GetPriorityGrouping+0x18>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	0a1b      	lsrs	r3, r3, #8
 800245e:	f003 0307 	and.w	r3, r3, #7
}
 8002462:	4618      	mov	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	6039      	str	r1, [r7, #0]
 800247a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800247c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002480:	2b00      	cmp	r3, #0
 8002482:	db0a      	blt.n	800249a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	b2da      	uxtb	r2, r3
 8002488:	490c      	ldr	r1, [pc, #48]	@ (80024bc <__NVIC_SetPriority+0x4c>)
 800248a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248e:	0112      	lsls	r2, r2, #4
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	440b      	add	r3, r1
 8002494:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002498:	e00a      	b.n	80024b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	b2da      	uxtb	r2, r3
 800249e:	4908      	ldr	r1, [pc, #32]	@ (80024c0 <__NVIC_SetPriority+0x50>)
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	3b04      	subs	r3, #4
 80024a8:	0112      	lsls	r2, r2, #4
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	440b      	add	r3, r1
 80024ae:	761a      	strb	r2, [r3, #24]
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	e000e100 	.word	0xe000e100
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b089      	sub	sp, #36	@ 0x24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f1c3 0307 	rsb	r3, r3, #7
 80024de:	2b04      	cmp	r3, #4
 80024e0:	bf28      	it	cs
 80024e2:	2304      	movcs	r3, #4
 80024e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3304      	adds	r3, #4
 80024ea:	2b06      	cmp	r3, #6
 80024ec:	d902      	bls.n	80024f4 <NVIC_EncodePriority+0x30>
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3b03      	subs	r3, #3
 80024f2:	e000      	b.n	80024f6 <NVIC_EncodePriority+0x32>
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f8:	f04f 32ff 	mov.w	r2, #4294967295
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43da      	mvns	r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	401a      	ands	r2, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800250c:	f04f 31ff 	mov.w	r1, #4294967295
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	fa01 f303 	lsl.w	r3, r1, r3
 8002516:	43d9      	mvns	r1, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800251c:	4313      	orrs	r3, r2
         );
}
 800251e:	4618      	mov	r0, r3
 8002520:	3724      	adds	r7, #36	@ 0x24
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
	...

0800252c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3b01      	subs	r3, #1
 8002538:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800253c:	d301      	bcc.n	8002542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800253e:	2301      	movs	r3, #1
 8002540:	e00f      	b.n	8002562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002542:	4a0a      	ldr	r2, [pc, #40]	@ (800256c <SysTick_Config+0x40>)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3b01      	subs	r3, #1
 8002548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800254a:	210f      	movs	r1, #15
 800254c:	f04f 30ff 	mov.w	r0, #4294967295
 8002550:	f7ff ff8e 	bl	8002470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002554:	4b05      	ldr	r3, [pc, #20]	@ (800256c <SysTick_Config+0x40>)
 8002556:	2200      	movs	r2, #0
 8002558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800255a:	4b04      	ldr	r3, [pc, #16]	@ (800256c <SysTick_Config+0x40>)
 800255c:	2207      	movs	r2, #7
 800255e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	e000e010 	.word	0xe000e010

08002570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff ff47 	bl	800240c <__NVIC_SetPriorityGrouping>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002586:	b580      	push	{r7, lr}
 8002588:	b086      	sub	sp, #24
 800258a:	af00      	add	r7, sp, #0
 800258c:	4603      	mov	r3, r0
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
 8002592:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002598:	f7ff ff5c 	bl	8002454 <__NVIC_GetPriorityGrouping>
 800259c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	6978      	ldr	r0, [r7, #20]
 80025a4:	f7ff ff8e 	bl	80024c4 <NVIC_EncodePriority>
 80025a8:	4602      	mov	r2, r0
 80025aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ff5d 	bl	8002470 <__NVIC_SetPriority>
}
 80025b6:	bf00      	nop
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff ffb0 	bl	800252c <SysTick_Config>
 80025cc:	4603      	mov	r3, r0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d8:	b480      	push	{r7}
 80025da:	b089      	sub	sp, #36	@ 0x24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
 80025f2:	e177      	b.n	80028e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025f4:	2201      	movs	r2, #1
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	4013      	ands	r3, r2
 8002606:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	429a      	cmp	r2, r3
 800260e:	f040 8166 	bne.w	80028de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	2b01      	cmp	r3, #1
 800261c:	d005      	beq.n	800262a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002626:	2b02      	cmp	r3, #2
 8002628:	d130      	bne.n	800268c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	2203      	movs	r2, #3
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002660:	2201      	movs	r2, #1
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	f003 0201 	and.w	r2, r3, #1
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	2b03      	cmp	r3, #3
 8002696:	d017      	beq.n	80026c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	2203      	movs	r2, #3
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d123      	bne.n	800271c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	08da      	lsrs	r2, r3, #3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3208      	adds	r2, #8
 80026dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	220f      	movs	r2, #15
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	08da      	lsrs	r2, r3, #3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3208      	adds	r2, #8
 8002716:	69b9      	ldr	r1, [r7, #24]
 8002718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	2203      	movs	r2, #3
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 0203 	and.w	r2, r3, #3
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 80c0 	beq.w	80028de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	4b66      	ldr	r3, [pc, #408]	@ (80028fc <HAL_GPIO_Init+0x324>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002766:	4a65      	ldr	r2, [pc, #404]	@ (80028fc <HAL_GPIO_Init+0x324>)
 8002768:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800276c:	6453      	str	r3, [r2, #68]	@ 0x44
 800276e:	4b63      	ldr	r3, [pc, #396]	@ (80028fc <HAL_GPIO_Init+0x324>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800277a:	4a61      	ldr	r2, [pc, #388]	@ (8002900 <HAL_GPIO_Init+0x328>)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	089b      	lsrs	r3, r3, #2
 8002780:	3302      	adds	r3, #2
 8002782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	220f      	movs	r2, #15
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a58      	ldr	r2, [pc, #352]	@ (8002904 <HAL_GPIO_Init+0x32c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d037      	beq.n	8002816 <HAL_GPIO_Init+0x23e>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a57      	ldr	r2, [pc, #348]	@ (8002908 <HAL_GPIO_Init+0x330>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d031      	beq.n	8002812 <HAL_GPIO_Init+0x23a>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a56      	ldr	r2, [pc, #344]	@ (800290c <HAL_GPIO_Init+0x334>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d02b      	beq.n	800280e <HAL_GPIO_Init+0x236>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a55      	ldr	r2, [pc, #340]	@ (8002910 <HAL_GPIO_Init+0x338>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d025      	beq.n	800280a <HAL_GPIO_Init+0x232>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a54      	ldr	r2, [pc, #336]	@ (8002914 <HAL_GPIO_Init+0x33c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d01f      	beq.n	8002806 <HAL_GPIO_Init+0x22e>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a53      	ldr	r2, [pc, #332]	@ (8002918 <HAL_GPIO_Init+0x340>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d019      	beq.n	8002802 <HAL_GPIO_Init+0x22a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a52      	ldr	r2, [pc, #328]	@ (800291c <HAL_GPIO_Init+0x344>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d013      	beq.n	80027fe <HAL_GPIO_Init+0x226>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a51      	ldr	r2, [pc, #324]	@ (8002920 <HAL_GPIO_Init+0x348>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00d      	beq.n	80027fa <HAL_GPIO_Init+0x222>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a50      	ldr	r2, [pc, #320]	@ (8002924 <HAL_GPIO_Init+0x34c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d007      	beq.n	80027f6 <HAL_GPIO_Init+0x21e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a4f      	ldr	r2, [pc, #316]	@ (8002928 <HAL_GPIO_Init+0x350>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d101      	bne.n	80027f2 <HAL_GPIO_Init+0x21a>
 80027ee:	2309      	movs	r3, #9
 80027f0:	e012      	b.n	8002818 <HAL_GPIO_Init+0x240>
 80027f2:	230a      	movs	r3, #10
 80027f4:	e010      	b.n	8002818 <HAL_GPIO_Init+0x240>
 80027f6:	2308      	movs	r3, #8
 80027f8:	e00e      	b.n	8002818 <HAL_GPIO_Init+0x240>
 80027fa:	2307      	movs	r3, #7
 80027fc:	e00c      	b.n	8002818 <HAL_GPIO_Init+0x240>
 80027fe:	2306      	movs	r3, #6
 8002800:	e00a      	b.n	8002818 <HAL_GPIO_Init+0x240>
 8002802:	2305      	movs	r3, #5
 8002804:	e008      	b.n	8002818 <HAL_GPIO_Init+0x240>
 8002806:	2304      	movs	r3, #4
 8002808:	e006      	b.n	8002818 <HAL_GPIO_Init+0x240>
 800280a:	2303      	movs	r3, #3
 800280c:	e004      	b.n	8002818 <HAL_GPIO_Init+0x240>
 800280e:	2302      	movs	r3, #2
 8002810:	e002      	b.n	8002818 <HAL_GPIO_Init+0x240>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <HAL_GPIO_Init+0x240>
 8002816:	2300      	movs	r3, #0
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	f002 0203 	and.w	r2, r2, #3
 800281e:	0092      	lsls	r2, r2, #2
 8002820:	4093      	lsls	r3, r2
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002828:	4935      	ldr	r1, [pc, #212]	@ (8002900 <HAL_GPIO_Init+0x328>)
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	089b      	lsrs	r3, r3, #2
 800282e:	3302      	adds	r3, #2
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002836:	4b3d      	ldr	r3, [pc, #244]	@ (800292c <HAL_GPIO_Init+0x354>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	43db      	mvns	r3, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4013      	ands	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800285a:	4a34      	ldr	r2, [pc, #208]	@ (800292c <HAL_GPIO_Init+0x354>)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002860:	4b32      	ldr	r3, [pc, #200]	@ (800292c <HAL_GPIO_Init+0x354>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002884:	4a29      	ldr	r2, [pc, #164]	@ (800292c <HAL_GPIO_Init+0x354>)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800288a:	4b28      	ldr	r3, [pc, #160]	@ (800292c <HAL_GPIO_Init+0x354>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	43db      	mvns	r3, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4013      	ands	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028ae:	4a1f      	ldr	r2, [pc, #124]	@ (800292c <HAL_GPIO_Init+0x354>)
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028b4:	4b1d      	ldr	r3, [pc, #116]	@ (800292c <HAL_GPIO_Init+0x354>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028d8:	4a14      	ldr	r2, [pc, #80]	@ (800292c <HAL_GPIO_Init+0x354>)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3301      	adds	r3, #1
 80028e2:	61fb      	str	r3, [r7, #28]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2b0f      	cmp	r3, #15
 80028e8:	f67f ae84 	bls.w	80025f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028ec:	bf00      	nop
 80028ee:	bf00      	nop
 80028f0:	3724      	adds	r7, #36	@ 0x24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40023800 	.word	0x40023800
 8002900:	40013800 	.word	0x40013800
 8002904:	40020000 	.word	0x40020000
 8002908:	40020400 	.word	0x40020400
 800290c:	40020800 	.word	0x40020800
 8002910:	40020c00 	.word	0x40020c00
 8002914:	40021000 	.word	0x40021000
 8002918:	40021400 	.word	0x40021400
 800291c:	40021800 	.word	0x40021800
 8002920:	40021c00 	.word	0x40021c00
 8002924:	40022000 	.word	0x40022000
 8002928:	40022400 	.word	0x40022400
 800292c:	40013c00 	.word	0x40013c00

08002930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	807b      	strh	r3, [r7, #2]
 800293c:	4613      	mov	r3, r2
 800293e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002940:	787b      	ldrb	r3, [r7, #1]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002946:	887a      	ldrh	r2, [r7, #2]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800294c:	e003      	b.n	8002956 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800294e:	887b      	ldrh	r3, [r7, #2]
 8002950:	041a      	lsls	r2, r3, #16
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	619a      	str	r2, [r3, #24]
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	4b20      	ldr	r3, [pc, #128]	@ (80029f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002976:	4a1f      	ldr	r2, [pc, #124]	@ (80029f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800297c:	6413      	str	r3, [r2, #64]	@ 0x40
 800297e:	4b1d      	ldr	r3, [pc, #116]	@ (80029f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800298a:	4b1b      	ldr	r3, [pc, #108]	@ (80029f8 <HAL_PWREx_EnableOverDrive+0x94>)
 800298c:	2201      	movs	r2, #1
 800298e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002990:	f7ff f8fc 	bl	8001b8c <HAL_GetTick>
 8002994:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002996:	e009      	b.n	80029ac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002998:	f7ff f8f8 	bl	8001b8c <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029a6:	d901      	bls.n	80029ac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e01f      	b.n	80029ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029ac:	4b13      	ldr	r3, [pc, #76]	@ (80029fc <HAL_PWREx_EnableOverDrive+0x98>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029b8:	d1ee      	bne.n	8002998 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80029ba:	4b11      	ldr	r3, [pc, #68]	@ (8002a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029bc:	2201      	movs	r2, #1
 80029be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029c0:	f7ff f8e4 	bl	8001b8c <HAL_GetTick>
 80029c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029c6:	e009      	b.n	80029dc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029c8:	f7ff f8e0 	bl	8001b8c <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029d6:	d901      	bls.n	80029dc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e007      	b.n	80029ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029dc:	4b07      	ldr	r3, [pc, #28]	@ (80029fc <HAL_PWREx_EnableOverDrive+0x98>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029e8:	d1ee      	bne.n	80029c8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40023800 	.word	0x40023800
 80029f8:	420e0040 	.word	0x420e0040
 80029fc:	40007000 	.word	0x40007000
 8002a00:	420e0044 	.word	0x420e0044

08002a04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e267      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d075      	beq.n	8002b0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a22:	4b88      	ldr	r3, [pc, #544]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 030c 	and.w	r3, r3, #12
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d00c      	beq.n	8002a48 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a2e:	4b85      	ldr	r3, [pc, #532]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d112      	bne.n	8002a60 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a3a:	4b82      	ldr	r3, [pc, #520]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a46:	d10b      	bne.n	8002a60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a48:	4b7e      	ldr	r3, [pc, #504]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d05b      	beq.n	8002b0c <HAL_RCC_OscConfig+0x108>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d157      	bne.n	8002b0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e242      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a68:	d106      	bne.n	8002a78 <HAL_RCC_OscConfig+0x74>
 8002a6a:	4b76      	ldr	r3, [pc, #472]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a75      	ldr	r2, [pc, #468]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	e01d      	b.n	8002ab4 <HAL_RCC_OscConfig+0xb0>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a80:	d10c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x98>
 8002a82:	4b70      	ldr	r3, [pc, #448]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a6f      	ldr	r2, [pc, #444]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	4b6d      	ldr	r3, [pc, #436]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a6c      	ldr	r2, [pc, #432]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e00b      	b.n	8002ab4 <HAL_RCC_OscConfig+0xb0>
 8002a9c:	4b69      	ldr	r3, [pc, #420]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a68      	ldr	r2, [pc, #416]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002aa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	4b66      	ldr	r3, [pc, #408]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a65      	ldr	r2, [pc, #404]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002aae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d013      	beq.n	8002ae4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7ff f866 	bl	8001b8c <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac4:	f7ff f862 	bl	8001b8c <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b64      	cmp	r3, #100	@ 0x64
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e207      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad6:	4b5b      	ldr	r3, [pc, #364]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0xc0>
 8002ae2:	e014      	b.n	8002b0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7ff f852 	bl	8001b8c <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aec:	f7ff f84e 	bl	8001b8c <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	@ 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e1f3      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afe:	4b51      	ldr	r3, [pc, #324]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0xe8>
 8002b0a:	e000      	b.n	8002b0e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d063      	beq.n	8002be2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b1a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00b      	beq.n	8002b3e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b26:	4b47      	ldr	r3, [pc, #284]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d11c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b32:	4b44      	ldr	r3, [pc, #272]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d116      	bne.n	8002b6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3e:	4b41      	ldr	r3, [pc, #260]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d005      	beq.n	8002b56 <HAL_RCC_OscConfig+0x152>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e1c7      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b56:	4b3b      	ldr	r3, [pc, #236]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4937      	ldr	r1, [pc, #220]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6a:	e03a      	b.n	8002be2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d020      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b74:	4b34      	ldr	r3, [pc, #208]	@ (8002c48 <HAL_RCC_OscConfig+0x244>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7a:	f7ff f807 	bl	8001b8c <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b82:	f7ff f803 	bl	8001b8c <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e1a8      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b94:	4b2b      	ldr	r3, [pc, #172]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba0:	4b28      	ldr	r3, [pc, #160]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4925      	ldr	r1, [pc, #148]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	600b      	str	r3, [r1, #0]
 8002bb4:	e015      	b.n	8002be2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bb6:	4b24      	ldr	r3, [pc, #144]	@ (8002c48 <HAL_RCC_OscConfig+0x244>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbc:	f7fe ffe6 	bl	8001b8c <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc4:	f7fe ffe2 	bl	8001b8c <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e187      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d036      	beq.n	8002c5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d016      	beq.n	8002c24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bf6:	4b15      	ldr	r3, [pc, #84]	@ (8002c4c <HAL_RCC_OscConfig+0x248>)
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfc:	f7fe ffc6 	bl	8001b8c <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c04:	f7fe ffc2 	bl	8001b8c <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e167      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c16:	4b0b      	ldr	r3, [pc, #44]	@ (8002c44 <HAL_RCC_OscConfig+0x240>)
 8002c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCC_OscConfig+0x200>
 8002c22:	e01b      	b.n	8002c5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c24:	4b09      	ldr	r3, [pc, #36]	@ (8002c4c <HAL_RCC_OscConfig+0x248>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2a:	f7fe ffaf 	bl	8001b8c <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c30:	e00e      	b.n	8002c50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c32:	f7fe ffab 	bl	8001b8c <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d907      	bls.n	8002c50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e150      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
 8002c44:	40023800 	.word	0x40023800
 8002c48:	42470000 	.word	0x42470000
 8002c4c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c50:	4b88      	ldr	r3, [pc, #544]	@ (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002c52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1ea      	bne.n	8002c32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 8097 	beq.w	8002d98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c6e:	4b81      	ldr	r3, [pc, #516]	@ (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10f      	bne.n	8002c9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	4b7d      	ldr	r3, [pc, #500]	@ (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	4a7c      	ldr	r2, [pc, #496]	@ (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c8a:	4b7a      	ldr	r3, [pc, #488]	@ (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c96:	2301      	movs	r3, #1
 8002c98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9a:	4b77      	ldr	r3, [pc, #476]	@ (8002e78 <HAL_RCC_OscConfig+0x474>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d118      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ca6:	4b74      	ldr	r3, [pc, #464]	@ (8002e78 <HAL_RCC_OscConfig+0x474>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a73      	ldr	r2, [pc, #460]	@ (8002e78 <HAL_RCC_OscConfig+0x474>)
 8002cac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb2:	f7fe ff6b 	bl	8001b8c <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cba:	f7fe ff67 	bl	8001b8c <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e10c      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ccc:	4b6a      	ldr	r3, [pc, #424]	@ (8002e78 <HAL_RCC_OscConfig+0x474>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0f0      	beq.n	8002cba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d106      	bne.n	8002cee <HAL_RCC_OscConfig+0x2ea>
 8002ce0:	4b64      	ldr	r3, [pc, #400]	@ (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce4:	4a63      	ldr	r2, [pc, #396]	@ (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cec:	e01c      	b.n	8002d28 <HAL_RCC_OscConfig+0x324>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	2b05      	cmp	r3, #5
 8002cf4:	d10c      	bne.n	8002d10 <HAL_RCC_OscConfig+0x30c>
 8002cf6:	4b5f      	ldr	r3, [pc, #380]	@ (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cfa:	4a5e      	ldr	r2, [pc, #376]	@ (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002cfc:	f043 0304 	orr.w	r3, r3, #4
 8002d00:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d02:	4b5c      	ldr	r3, [pc, #368]	@ (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d06:	4a5b      	ldr	r2, [pc, #364]	@ (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d0e:	e00b      	b.n	8002d28 <HAL_RCC_OscConfig+0x324>
 8002d10:	4b58      	ldr	r3, [pc, #352]	@ (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d14:	4a57      	ldr	r2, [pc, #348]	@ (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d16:	f023 0301 	bic.w	r3, r3, #1
 8002d1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d1c:	4b55      	ldr	r3, [pc, #340]	@ (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d20:	4a54      	ldr	r2, [pc, #336]	@ (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d22:	f023 0304 	bic.w	r3, r3, #4
 8002d26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d015      	beq.n	8002d5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d30:	f7fe ff2c 	bl	8001b8c <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d36:	e00a      	b.n	8002d4e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d38:	f7fe ff28 	bl	8001b8c <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e0cb      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4e:	4b49      	ldr	r3, [pc, #292]	@ (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0ee      	beq.n	8002d38 <HAL_RCC_OscConfig+0x334>
 8002d5a:	e014      	b.n	8002d86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5c:	f7fe ff16 	bl	8001b8c <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d62:	e00a      	b.n	8002d7a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d64:	f7fe ff12 	bl	8001b8c <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e0b5      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d7a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1ee      	bne.n	8002d64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d86:	7dfb      	ldrb	r3, [r7, #23]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d105      	bne.n	8002d98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d8c:	4b39      	ldr	r3, [pc, #228]	@ (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d90:	4a38      	ldr	r2, [pc, #224]	@ (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002d92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 80a1 	beq.w	8002ee4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002da2:	4b34      	ldr	r3, [pc, #208]	@ (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d05c      	beq.n	8002e68 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d141      	bne.n	8002e3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db6:	4b31      	ldr	r3, [pc, #196]	@ (8002e7c <HAL_RCC_OscConfig+0x478>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7fe fee6 	bl	8001b8c <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7fe fee2 	bl	8001b8c <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e087      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd6:	4b27      	ldr	r3, [pc, #156]	@ (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69da      	ldr	r2, [r3, #28]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df0:	019b      	lsls	r3, r3, #6
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df8:	085b      	lsrs	r3, r3, #1
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	041b      	lsls	r3, r3, #16
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e04:	061b      	lsls	r3, r3, #24
 8002e06:	491b      	ldr	r1, [pc, #108]	@ (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e7c <HAL_RCC_OscConfig+0x478>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e12:	f7fe febb 	bl	8001b8c <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1a:	f7fe feb7 	bl	8001b8c <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e05c      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2c:	4b11      	ldr	r3, [pc, #68]	@ (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x416>
 8002e38:	e054      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3a:	4b10      	ldr	r3, [pc, #64]	@ (8002e7c <HAL_RCC_OscConfig+0x478>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e40:	f7fe fea4 	bl	8001b8c <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fe fea0 	bl	8001b8c <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e045      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5a:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x444>
 8002e66:	e03d      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e038      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
 8002e74:	40023800 	.word	0x40023800
 8002e78:	40007000 	.word	0x40007000
 8002e7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e80:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ec>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d028      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d121      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d11a      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002eb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d111      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec6:	085b      	lsrs	r3, r3, #1
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d107      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d001      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40023800 	.word	0x40023800

08002ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0cc      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f08:	4b68      	ldr	r3, [pc, #416]	@ (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 030f 	and.w	r3, r3, #15
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d90c      	bls.n	8002f30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b65      	ldr	r3, [pc, #404]	@ (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1e:	4b63      	ldr	r3, [pc, #396]	@ (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0b8      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d020      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f48:	4b59      	ldr	r3, [pc, #356]	@ (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	4a58      	ldr	r2, [pc, #352]	@ (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f60:	4b53      	ldr	r3, [pc, #332]	@ (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	4a52      	ldr	r2, [pc, #328]	@ (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f6c:	4b50      	ldr	r3, [pc, #320]	@ (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	494d      	ldr	r1, [pc, #308]	@ (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d044      	beq.n	8003014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d107      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f92:	4b47      	ldr	r3, [pc, #284]	@ (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d119      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e07f      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d003      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d107      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb2:	4b3f      	ldr	r3, [pc, #252]	@ (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e06f      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e067      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd2:	4b37      	ldr	r3, [pc, #220]	@ (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f023 0203 	bic.w	r2, r3, #3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	4934      	ldr	r1, [pc, #208]	@ (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe4:	f7fe fdd2 	bl	8001b8c <HAL_GetTick>
 8002fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fec:	f7fe fdce 	bl	8001b8c <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e04f      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	4b2b      	ldr	r3, [pc, #172]	@ (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 020c 	and.w	r2, r3, #12
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	429a      	cmp	r2, r3
 8003012:	d1eb      	bne.n	8002fec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003014:	4b25      	ldr	r3, [pc, #148]	@ (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d20c      	bcs.n	800303c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b22      	ldr	r3, [pc, #136]	@ (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800302a:	4b20      	ldr	r3, [pc, #128]	@ (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e032      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003048:	4b19      	ldr	r3, [pc, #100]	@ (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4916      	ldr	r1, [pc, #88]	@ (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	4313      	orrs	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d009      	beq.n	800307a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003066:	4b12      	ldr	r3, [pc, #72]	@ (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	490e      	ldr	r1, [pc, #56]	@ (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	4313      	orrs	r3, r2
 8003078:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800307a:	f000 f821 	bl	80030c0 <HAL_RCC_GetSysClockFreq>
 800307e:	4602      	mov	r2, r0
 8003080:	4b0b      	ldr	r3, [pc, #44]	@ (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	091b      	lsrs	r3, r3, #4
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	490a      	ldr	r1, [pc, #40]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 800308c:	5ccb      	ldrb	r3, [r1, r3]
 800308e:	fa22 f303 	lsr.w	r3, r2, r3
 8003092:	4a09      	ldr	r2, [pc, #36]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003096:	4b09      	ldr	r3, [pc, #36]	@ (80030bc <HAL_RCC_ClockConfig+0x1c8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f7fe fd32 	bl	8001b04 <HAL_InitTick>

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40023c00 	.word	0x40023c00
 80030b0:	40023800 	.word	0x40023800
 80030b4:	08007bfc 	.word	0x08007bfc
 80030b8:	20000000 	.word	0x20000000
 80030bc:	20000004 	.word	0x20000004

080030c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030c4:	b094      	sub	sp, #80	@ 0x50
 80030c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030d8:	4b79      	ldr	r3, [pc, #484]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 030c 	and.w	r3, r3, #12
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d00d      	beq.n	8003100 <HAL_RCC_GetSysClockFreq+0x40>
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	f200 80e1 	bhi.w	80032ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0x34>
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d003      	beq.n	80030fa <HAL_RCC_GetSysClockFreq+0x3a>
 80030f2:	e0db      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030f4:	4b73      	ldr	r3, [pc, #460]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80030f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030f8:	e0db      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030fa:	4b73      	ldr	r3, [pc, #460]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80030fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030fe:	e0d8      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003100:	4b6f      	ldr	r3, [pc, #444]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003108:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800310a:	4b6d      	ldr	r3, [pc, #436]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d063      	beq.n	80031de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003116:	4b6a      	ldr	r3, [pc, #424]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	099b      	lsrs	r3, r3, #6
 800311c:	2200      	movs	r2, #0
 800311e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003120:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003128:	633b      	str	r3, [r7, #48]	@ 0x30
 800312a:	2300      	movs	r3, #0
 800312c:	637b      	str	r3, [r7, #52]	@ 0x34
 800312e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003132:	4622      	mov	r2, r4
 8003134:	462b      	mov	r3, r5
 8003136:	f04f 0000 	mov.w	r0, #0
 800313a:	f04f 0100 	mov.w	r1, #0
 800313e:	0159      	lsls	r1, r3, #5
 8003140:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003144:	0150      	lsls	r0, r2, #5
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4621      	mov	r1, r4
 800314c:	1a51      	subs	r1, r2, r1
 800314e:	6139      	str	r1, [r7, #16]
 8003150:	4629      	mov	r1, r5
 8003152:	eb63 0301 	sbc.w	r3, r3, r1
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003164:	4659      	mov	r1, fp
 8003166:	018b      	lsls	r3, r1, #6
 8003168:	4651      	mov	r1, sl
 800316a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800316e:	4651      	mov	r1, sl
 8003170:	018a      	lsls	r2, r1, #6
 8003172:	4651      	mov	r1, sl
 8003174:	ebb2 0801 	subs.w	r8, r2, r1
 8003178:	4659      	mov	r1, fp
 800317a:	eb63 0901 	sbc.w	r9, r3, r1
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	f04f 0300 	mov.w	r3, #0
 8003186:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800318a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800318e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003192:	4690      	mov	r8, r2
 8003194:	4699      	mov	r9, r3
 8003196:	4623      	mov	r3, r4
 8003198:	eb18 0303 	adds.w	r3, r8, r3
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	462b      	mov	r3, r5
 80031a0:	eb49 0303 	adc.w	r3, r9, r3
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031b2:	4629      	mov	r1, r5
 80031b4:	024b      	lsls	r3, r1, #9
 80031b6:	4621      	mov	r1, r4
 80031b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031bc:	4621      	mov	r1, r4
 80031be:	024a      	lsls	r2, r1, #9
 80031c0:	4610      	mov	r0, r2
 80031c2:	4619      	mov	r1, r3
 80031c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031c6:	2200      	movs	r2, #0
 80031c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031d0:	f7fd fd4a 	bl	8000c68 <__aeabi_uldivmod>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4613      	mov	r3, r2
 80031da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031dc:	e058      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031de:	4b38      	ldr	r3, [pc, #224]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	099b      	lsrs	r3, r3, #6
 80031e4:	2200      	movs	r2, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	4611      	mov	r1, r2
 80031ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031ee:	623b      	str	r3, [r7, #32]
 80031f0:	2300      	movs	r3, #0
 80031f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80031f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031f8:	4642      	mov	r2, r8
 80031fa:	464b      	mov	r3, r9
 80031fc:	f04f 0000 	mov.w	r0, #0
 8003200:	f04f 0100 	mov.w	r1, #0
 8003204:	0159      	lsls	r1, r3, #5
 8003206:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800320a:	0150      	lsls	r0, r2, #5
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4641      	mov	r1, r8
 8003212:	ebb2 0a01 	subs.w	sl, r2, r1
 8003216:	4649      	mov	r1, r9
 8003218:	eb63 0b01 	sbc.w	fp, r3, r1
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003228:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800322c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003230:	ebb2 040a 	subs.w	r4, r2, sl
 8003234:	eb63 050b 	sbc.w	r5, r3, fp
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	00eb      	lsls	r3, r5, #3
 8003242:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003246:	00e2      	lsls	r2, r4, #3
 8003248:	4614      	mov	r4, r2
 800324a:	461d      	mov	r5, r3
 800324c:	4643      	mov	r3, r8
 800324e:	18e3      	adds	r3, r4, r3
 8003250:	603b      	str	r3, [r7, #0]
 8003252:	464b      	mov	r3, r9
 8003254:	eb45 0303 	adc.w	r3, r5, r3
 8003258:	607b      	str	r3, [r7, #4]
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003266:	4629      	mov	r1, r5
 8003268:	028b      	lsls	r3, r1, #10
 800326a:	4621      	mov	r1, r4
 800326c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003270:	4621      	mov	r1, r4
 8003272:	028a      	lsls	r2, r1, #10
 8003274:	4610      	mov	r0, r2
 8003276:	4619      	mov	r1, r3
 8003278:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800327a:	2200      	movs	r2, #0
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	61fa      	str	r2, [r7, #28]
 8003280:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003284:	f7fd fcf0 	bl	8000c68 <__aeabi_uldivmod>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4613      	mov	r3, r2
 800328e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003290:	4b0b      	ldr	r3, [pc, #44]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	0c1b      	lsrs	r3, r3, #16
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	3301      	adds	r3, #1
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80032a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032aa:	e002      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032ac:	4b05      	ldr	r3, [pc, #20]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80032ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3750      	adds	r7, #80	@ 0x50
 80032b8:	46bd      	mov	sp, r7
 80032ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032be:	bf00      	nop
 80032c0:	40023800 	.word	0x40023800
 80032c4:	00f42400 	.word	0x00f42400
 80032c8:	007a1200 	.word	0x007a1200

080032cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d0:	4b03      	ldr	r3, [pc, #12]	@ (80032e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032d2:	681b      	ldr	r3, [r3, #0]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	20000000 	.word	0x20000000

080032e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032e8:	f7ff fff0 	bl	80032cc <HAL_RCC_GetHCLKFreq>
 80032ec:	4602      	mov	r2, r0
 80032ee:	4b05      	ldr	r3, [pc, #20]	@ (8003304 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	0a9b      	lsrs	r3, r3, #10
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	4903      	ldr	r1, [pc, #12]	@ (8003308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032fa:	5ccb      	ldrb	r3, [r1, r3]
 80032fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003300:	4618      	mov	r0, r3
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40023800 	.word	0x40023800
 8003308:	08007c0c 	.word	0x08007c0c

0800330c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003310:	f7ff ffdc 	bl	80032cc <HAL_RCC_GetHCLKFreq>
 8003314:	4602      	mov	r2, r0
 8003316:	4b05      	ldr	r3, [pc, #20]	@ (800332c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	0b5b      	lsrs	r3, r3, #13
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	4903      	ldr	r1, [pc, #12]	@ (8003330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003322:	5ccb      	ldrb	r3, [r1, r3]
 8003324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003328:	4618      	mov	r0, r3
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40023800 	.word	0x40023800
 8003330:	08007c0c 	.word	0x08007c0c

08003334 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e042      	b.n	80033cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d106      	bne.n	8003360 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7fe fa36 	bl	80017cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2224      	movs	r2, #36	@ 0x24
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003376:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f973 	bl	8003664 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800338c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	695a      	ldr	r2, [r3, #20]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800339c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	@ 0x28
 80033d8:	af02      	add	r7, sp, #8
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	4613      	mov	r3, r2
 80033e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d175      	bne.n	80034e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <HAL_UART_Transmit+0x2c>
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e06e      	b.n	80034e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2221      	movs	r2, #33	@ 0x21
 800340e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003412:	f7fe fbbb 	bl	8001b8c <HAL_GetTick>
 8003416:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	88fa      	ldrh	r2, [r7, #6]
 800341c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	88fa      	ldrh	r2, [r7, #6]
 8003422:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800342c:	d108      	bne.n	8003440 <HAL_UART_Transmit+0x6c>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d104      	bne.n	8003440 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	61bb      	str	r3, [r7, #24]
 800343e:	e003      	b.n	8003448 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003444:	2300      	movs	r3, #0
 8003446:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003448:	e02e      	b.n	80034a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2200      	movs	r2, #0
 8003452:	2180      	movs	r1, #128	@ 0x80
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f848 	bl	80034ea <UART_WaitOnFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d005      	beq.n	800346c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e03a      	b.n	80034e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10b      	bne.n	800348a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	461a      	mov	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003480:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	3302      	adds	r3, #2
 8003486:	61bb      	str	r3, [r7, #24]
 8003488:	e007      	b.n	800349a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	781a      	ldrb	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	3301      	adds	r3, #1
 8003498:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1cb      	bne.n	800344a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2200      	movs	r2, #0
 80034ba:	2140      	movs	r1, #64	@ 0x40
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 f814 	bl	80034ea <UART_WaitOnFlagUntilTimeout>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e006      	b.n	80034e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80034dc:	2300      	movs	r3, #0
 80034de:	e000      	b.n	80034e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80034e0:	2302      	movs	r3, #2
  }
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3720      	adds	r7, #32
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b086      	sub	sp, #24
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	603b      	str	r3, [r7, #0]
 80034f6:	4613      	mov	r3, r2
 80034f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034fa:	e03b      	b.n	8003574 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003502:	d037      	beq.n	8003574 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003504:	f7fe fb42 	bl	8001b8c <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	6a3a      	ldr	r2, [r7, #32]
 8003510:	429a      	cmp	r2, r3
 8003512:	d302      	bcc.n	800351a <UART_WaitOnFlagUntilTimeout+0x30>
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e03a      	b.n	8003594 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d023      	beq.n	8003574 <UART_WaitOnFlagUntilTimeout+0x8a>
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2b80      	cmp	r3, #128	@ 0x80
 8003530:	d020      	beq.n	8003574 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b40      	cmp	r3, #64	@ 0x40
 8003536:	d01d      	beq.n	8003574 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b08      	cmp	r3, #8
 8003544:	d116      	bne.n	8003574 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 f81d 	bl	800359c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2208      	movs	r2, #8
 8003566:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e00f      	b.n	8003594 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	4013      	ands	r3, r2
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	429a      	cmp	r2, r3
 8003582:	bf0c      	ite	eq
 8003584:	2301      	moveq	r3, #1
 8003586:	2300      	movne	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	461a      	mov	r2, r3
 800358c:	79fb      	ldrb	r3, [r7, #7]
 800358e:	429a      	cmp	r2, r3
 8003590:	d0b4      	beq.n	80034fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800359c:	b480      	push	{r7}
 800359e:	b095      	sub	sp, #84	@ 0x54
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	330c      	adds	r3, #12
 80035aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ae:	e853 3f00 	ldrex	r3, [r3]
 80035b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	330c      	adds	r3, #12
 80035c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035c4:	643a      	str	r2, [r7, #64]	@ 0x40
 80035c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035cc:	e841 2300 	strex	r3, r2, [r1]
 80035d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1e5      	bne.n	80035a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3314      	adds	r3, #20
 80035de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	e853 3f00 	ldrex	r3, [r3]
 80035e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f023 0301 	bic.w	r3, r3, #1
 80035ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3314      	adds	r3, #20
 80035f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003600:	e841 2300 	strex	r3, r2, [r1]
 8003604:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1e5      	bne.n	80035d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003610:	2b01      	cmp	r3, #1
 8003612:	d119      	bne.n	8003648 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	330c      	adds	r3, #12
 800361a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	e853 3f00 	ldrex	r3, [r3]
 8003622:	60bb      	str	r3, [r7, #8]
   return(result);
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f023 0310 	bic.w	r3, r3, #16
 800362a:	647b      	str	r3, [r7, #68]	@ 0x44
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	330c      	adds	r3, #12
 8003632:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003634:	61ba      	str	r2, [r7, #24]
 8003636:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003638:	6979      	ldr	r1, [r7, #20]
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	e841 2300 	strex	r3, r2, [r1]
 8003640:	613b      	str	r3, [r7, #16]
   return(result);
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1e5      	bne.n	8003614 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003656:	bf00      	nop
 8003658:	3754      	adds	r7, #84	@ 0x54
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
	...

08003664 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003668:	b0c0      	sub	sp, #256	@ 0x100
 800366a:	af00      	add	r7, sp, #0
 800366c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800367c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003680:	68d9      	ldr	r1, [r3, #12]
 8003682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	ea40 0301 	orr.w	r3, r0, r1
 800368c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800368e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	431a      	orrs	r2, r3
 800369c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	431a      	orrs	r2, r3
 80036a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80036bc:	f021 010c 	bic.w	r1, r1, #12
 80036c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80036ca:	430b      	orrs	r3, r1
 80036cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80036da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036de:	6999      	ldr	r1, [r3, #24]
 80036e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	ea40 0301 	orr.w	r3, r0, r1
 80036ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	4b8f      	ldr	r3, [pc, #572]	@ (8003930 <UART_SetConfig+0x2cc>)
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d005      	beq.n	8003704 <UART_SetConfig+0xa0>
 80036f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4b8d      	ldr	r3, [pc, #564]	@ (8003934 <UART_SetConfig+0x2d0>)
 8003700:	429a      	cmp	r2, r3
 8003702:	d104      	bne.n	800370e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003704:	f7ff fe02 	bl	800330c <HAL_RCC_GetPCLK2Freq>
 8003708:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800370c:	e003      	b.n	8003716 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800370e:	f7ff fde9 	bl	80032e4 <HAL_RCC_GetPCLK1Freq>
 8003712:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003720:	f040 810c 	bne.w	800393c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003728:	2200      	movs	r2, #0
 800372a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800372e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003732:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003736:	4622      	mov	r2, r4
 8003738:	462b      	mov	r3, r5
 800373a:	1891      	adds	r1, r2, r2
 800373c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800373e:	415b      	adcs	r3, r3
 8003740:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003742:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003746:	4621      	mov	r1, r4
 8003748:	eb12 0801 	adds.w	r8, r2, r1
 800374c:	4629      	mov	r1, r5
 800374e:	eb43 0901 	adc.w	r9, r3, r1
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	f04f 0300 	mov.w	r3, #0
 800375a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800375e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003762:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003766:	4690      	mov	r8, r2
 8003768:	4699      	mov	r9, r3
 800376a:	4623      	mov	r3, r4
 800376c:	eb18 0303 	adds.w	r3, r8, r3
 8003770:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003774:	462b      	mov	r3, r5
 8003776:	eb49 0303 	adc.w	r3, r9, r3
 800377a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800377e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800378a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800378e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003792:	460b      	mov	r3, r1
 8003794:	18db      	adds	r3, r3, r3
 8003796:	653b      	str	r3, [r7, #80]	@ 0x50
 8003798:	4613      	mov	r3, r2
 800379a:	eb42 0303 	adc.w	r3, r2, r3
 800379e:	657b      	str	r3, [r7, #84]	@ 0x54
 80037a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80037a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80037a8:	f7fd fa5e 	bl	8000c68 <__aeabi_uldivmod>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4b61      	ldr	r3, [pc, #388]	@ (8003938 <UART_SetConfig+0x2d4>)
 80037b2:	fba3 2302 	umull	r2, r3, r3, r2
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	011c      	lsls	r4, r3, #4
 80037ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037be:	2200      	movs	r2, #0
 80037c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80037c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80037cc:	4642      	mov	r2, r8
 80037ce:	464b      	mov	r3, r9
 80037d0:	1891      	adds	r1, r2, r2
 80037d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80037d4:	415b      	adcs	r3, r3
 80037d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80037dc:	4641      	mov	r1, r8
 80037de:	eb12 0a01 	adds.w	sl, r2, r1
 80037e2:	4649      	mov	r1, r9
 80037e4:	eb43 0b01 	adc.w	fp, r3, r1
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037fc:	4692      	mov	sl, r2
 80037fe:	469b      	mov	fp, r3
 8003800:	4643      	mov	r3, r8
 8003802:	eb1a 0303 	adds.w	r3, sl, r3
 8003806:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800380a:	464b      	mov	r3, r9
 800380c:	eb4b 0303 	adc.w	r3, fp, r3
 8003810:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003820:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003824:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003828:	460b      	mov	r3, r1
 800382a:	18db      	adds	r3, r3, r3
 800382c:	643b      	str	r3, [r7, #64]	@ 0x40
 800382e:	4613      	mov	r3, r2
 8003830:	eb42 0303 	adc.w	r3, r2, r3
 8003834:	647b      	str	r3, [r7, #68]	@ 0x44
 8003836:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800383a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800383e:	f7fd fa13 	bl	8000c68 <__aeabi_uldivmod>
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	4611      	mov	r1, r2
 8003848:	4b3b      	ldr	r3, [pc, #236]	@ (8003938 <UART_SetConfig+0x2d4>)
 800384a:	fba3 2301 	umull	r2, r3, r3, r1
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	2264      	movs	r2, #100	@ 0x64
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	1acb      	subs	r3, r1, r3
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800385e:	4b36      	ldr	r3, [pc, #216]	@ (8003938 <UART_SetConfig+0x2d4>)
 8003860:	fba3 2302 	umull	r2, r3, r3, r2
 8003864:	095b      	lsrs	r3, r3, #5
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800386c:	441c      	add	r4, r3
 800386e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003872:	2200      	movs	r2, #0
 8003874:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003878:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800387c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003880:	4642      	mov	r2, r8
 8003882:	464b      	mov	r3, r9
 8003884:	1891      	adds	r1, r2, r2
 8003886:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003888:	415b      	adcs	r3, r3
 800388a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800388c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003890:	4641      	mov	r1, r8
 8003892:	1851      	adds	r1, r2, r1
 8003894:	6339      	str	r1, [r7, #48]	@ 0x30
 8003896:	4649      	mov	r1, r9
 8003898:	414b      	adcs	r3, r1
 800389a:	637b      	str	r3, [r7, #52]	@ 0x34
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80038a8:	4659      	mov	r1, fp
 80038aa:	00cb      	lsls	r3, r1, #3
 80038ac:	4651      	mov	r1, sl
 80038ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038b2:	4651      	mov	r1, sl
 80038b4:	00ca      	lsls	r2, r1, #3
 80038b6:	4610      	mov	r0, r2
 80038b8:	4619      	mov	r1, r3
 80038ba:	4603      	mov	r3, r0
 80038bc:	4642      	mov	r2, r8
 80038be:	189b      	adds	r3, r3, r2
 80038c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038c4:	464b      	mov	r3, r9
 80038c6:	460a      	mov	r2, r1
 80038c8:	eb42 0303 	adc.w	r3, r2, r3
 80038cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80038e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80038e4:	460b      	mov	r3, r1
 80038e6:	18db      	adds	r3, r3, r3
 80038e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038ea:	4613      	mov	r3, r2
 80038ec:	eb42 0303 	adc.w	r3, r2, r3
 80038f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80038fa:	f7fd f9b5 	bl	8000c68 <__aeabi_uldivmod>
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	4b0d      	ldr	r3, [pc, #52]	@ (8003938 <UART_SetConfig+0x2d4>)
 8003904:	fba3 1302 	umull	r1, r3, r3, r2
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	2164      	movs	r1, #100	@ 0x64
 800390c:	fb01 f303 	mul.w	r3, r1, r3
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	3332      	adds	r3, #50	@ 0x32
 8003916:	4a08      	ldr	r2, [pc, #32]	@ (8003938 <UART_SetConfig+0x2d4>)
 8003918:	fba2 2303 	umull	r2, r3, r2, r3
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	f003 0207 	and.w	r2, r3, #7
 8003922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4422      	add	r2, r4
 800392a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800392c:	e106      	b.n	8003b3c <UART_SetConfig+0x4d8>
 800392e:	bf00      	nop
 8003930:	40011000 	.word	0x40011000
 8003934:	40011400 	.word	0x40011400
 8003938:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800393c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003940:	2200      	movs	r2, #0
 8003942:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003946:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800394a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800394e:	4642      	mov	r2, r8
 8003950:	464b      	mov	r3, r9
 8003952:	1891      	adds	r1, r2, r2
 8003954:	6239      	str	r1, [r7, #32]
 8003956:	415b      	adcs	r3, r3
 8003958:	627b      	str	r3, [r7, #36]	@ 0x24
 800395a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800395e:	4641      	mov	r1, r8
 8003960:	1854      	adds	r4, r2, r1
 8003962:	4649      	mov	r1, r9
 8003964:	eb43 0501 	adc.w	r5, r3, r1
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	00eb      	lsls	r3, r5, #3
 8003972:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003976:	00e2      	lsls	r2, r4, #3
 8003978:	4614      	mov	r4, r2
 800397a:	461d      	mov	r5, r3
 800397c:	4643      	mov	r3, r8
 800397e:	18e3      	adds	r3, r4, r3
 8003980:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003984:	464b      	mov	r3, r9
 8003986:	eb45 0303 	adc.w	r3, r5, r3
 800398a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800398e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800399a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80039aa:	4629      	mov	r1, r5
 80039ac:	008b      	lsls	r3, r1, #2
 80039ae:	4621      	mov	r1, r4
 80039b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039b4:	4621      	mov	r1, r4
 80039b6:	008a      	lsls	r2, r1, #2
 80039b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80039bc:	f7fd f954 	bl	8000c68 <__aeabi_uldivmod>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4b60      	ldr	r3, [pc, #384]	@ (8003b48 <UART_SetConfig+0x4e4>)
 80039c6:	fba3 2302 	umull	r2, r3, r3, r2
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	011c      	lsls	r4, r3, #4
 80039ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039d2:	2200      	movs	r2, #0
 80039d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80039dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80039e0:	4642      	mov	r2, r8
 80039e2:	464b      	mov	r3, r9
 80039e4:	1891      	adds	r1, r2, r2
 80039e6:	61b9      	str	r1, [r7, #24]
 80039e8:	415b      	adcs	r3, r3
 80039ea:	61fb      	str	r3, [r7, #28]
 80039ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039f0:	4641      	mov	r1, r8
 80039f2:	1851      	adds	r1, r2, r1
 80039f4:	6139      	str	r1, [r7, #16]
 80039f6:	4649      	mov	r1, r9
 80039f8:	414b      	adcs	r3, r1
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a08:	4659      	mov	r1, fp
 8003a0a:	00cb      	lsls	r3, r1, #3
 8003a0c:	4651      	mov	r1, sl
 8003a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a12:	4651      	mov	r1, sl
 8003a14:	00ca      	lsls	r2, r1, #3
 8003a16:	4610      	mov	r0, r2
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	4642      	mov	r2, r8
 8003a1e:	189b      	adds	r3, r3, r2
 8003a20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a24:	464b      	mov	r3, r9
 8003a26:	460a      	mov	r2, r1
 8003a28:	eb42 0303 	adc.w	r3, r2, r3
 8003a2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a48:	4649      	mov	r1, r9
 8003a4a:	008b      	lsls	r3, r1, #2
 8003a4c:	4641      	mov	r1, r8
 8003a4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a52:	4641      	mov	r1, r8
 8003a54:	008a      	lsls	r2, r1, #2
 8003a56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003a5a:	f7fd f905 	bl	8000c68 <__aeabi_uldivmod>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4611      	mov	r1, r2
 8003a64:	4b38      	ldr	r3, [pc, #224]	@ (8003b48 <UART_SetConfig+0x4e4>)
 8003a66:	fba3 2301 	umull	r2, r3, r3, r1
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	2264      	movs	r2, #100	@ 0x64
 8003a6e:	fb02 f303 	mul.w	r3, r2, r3
 8003a72:	1acb      	subs	r3, r1, r3
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	3332      	adds	r3, #50	@ 0x32
 8003a78:	4a33      	ldr	r2, [pc, #204]	@ (8003b48 <UART_SetConfig+0x4e4>)
 8003a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a84:	441c      	add	r4, r3
 8003a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003a94:	4642      	mov	r2, r8
 8003a96:	464b      	mov	r3, r9
 8003a98:	1891      	adds	r1, r2, r2
 8003a9a:	60b9      	str	r1, [r7, #8]
 8003a9c:	415b      	adcs	r3, r3
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003aa4:	4641      	mov	r1, r8
 8003aa6:	1851      	adds	r1, r2, r1
 8003aa8:	6039      	str	r1, [r7, #0]
 8003aaa:	4649      	mov	r1, r9
 8003aac:	414b      	adcs	r3, r1
 8003aae:	607b      	str	r3, [r7, #4]
 8003ab0:	f04f 0200 	mov.w	r2, #0
 8003ab4:	f04f 0300 	mov.w	r3, #0
 8003ab8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003abc:	4659      	mov	r1, fp
 8003abe:	00cb      	lsls	r3, r1, #3
 8003ac0:	4651      	mov	r1, sl
 8003ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ac6:	4651      	mov	r1, sl
 8003ac8:	00ca      	lsls	r2, r1, #3
 8003aca:	4610      	mov	r0, r2
 8003acc:	4619      	mov	r1, r3
 8003ace:	4603      	mov	r3, r0
 8003ad0:	4642      	mov	r2, r8
 8003ad2:	189b      	adds	r3, r3, r2
 8003ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ad6:	464b      	mov	r3, r9
 8003ad8:	460a      	mov	r2, r1
 8003ada:	eb42 0303 	adc.w	r3, r2, r3
 8003ade:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003aea:	667a      	str	r2, [r7, #100]	@ 0x64
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003af8:	4649      	mov	r1, r9
 8003afa:	008b      	lsls	r3, r1, #2
 8003afc:	4641      	mov	r1, r8
 8003afe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b02:	4641      	mov	r1, r8
 8003b04:	008a      	lsls	r2, r1, #2
 8003b06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003b0a:	f7fd f8ad 	bl	8000c68 <__aeabi_uldivmod>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	4b0d      	ldr	r3, [pc, #52]	@ (8003b48 <UART_SetConfig+0x4e4>)
 8003b14:	fba3 1302 	umull	r1, r3, r3, r2
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	2164      	movs	r1, #100	@ 0x64
 8003b1c:	fb01 f303 	mul.w	r3, r1, r3
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	3332      	adds	r3, #50	@ 0x32
 8003b26:	4a08      	ldr	r2, [pc, #32]	@ (8003b48 <UART_SetConfig+0x4e4>)
 8003b28:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2c:	095b      	lsrs	r3, r3, #5
 8003b2e:	f003 020f 	and.w	r2, r3, #15
 8003b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4422      	add	r2, r4
 8003b3a:	609a      	str	r2, [r3, #8]
}
 8003b3c:	bf00      	nop
 8003b3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b42:	46bd      	mov	sp, r7
 8003b44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b48:	51eb851f 	.word	0x51eb851f

08003b4c <__cvt>:
 8003b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b50:	ec57 6b10 	vmov	r6, r7, d0
 8003b54:	2f00      	cmp	r7, #0
 8003b56:	460c      	mov	r4, r1
 8003b58:	4619      	mov	r1, r3
 8003b5a:	463b      	mov	r3, r7
 8003b5c:	bfbb      	ittet	lt
 8003b5e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003b62:	461f      	movlt	r7, r3
 8003b64:	2300      	movge	r3, #0
 8003b66:	232d      	movlt	r3, #45	@ 0x2d
 8003b68:	700b      	strb	r3, [r1, #0]
 8003b6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b6c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003b70:	4691      	mov	r9, r2
 8003b72:	f023 0820 	bic.w	r8, r3, #32
 8003b76:	bfbc      	itt	lt
 8003b78:	4632      	movlt	r2, r6
 8003b7a:	4616      	movlt	r6, r2
 8003b7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003b80:	d005      	beq.n	8003b8e <__cvt+0x42>
 8003b82:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003b86:	d100      	bne.n	8003b8a <__cvt+0x3e>
 8003b88:	3401      	adds	r4, #1
 8003b8a:	2102      	movs	r1, #2
 8003b8c:	e000      	b.n	8003b90 <__cvt+0x44>
 8003b8e:	2103      	movs	r1, #3
 8003b90:	ab03      	add	r3, sp, #12
 8003b92:	9301      	str	r3, [sp, #4]
 8003b94:	ab02      	add	r3, sp, #8
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	ec47 6b10 	vmov	d0, r6, r7
 8003b9c:	4653      	mov	r3, sl
 8003b9e:	4622      	mov	r2, r4
 8003ba0:	f000 fe5a 	bl	8004858 <_dtoa_r>
 8003ba4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003ba8:	4605      	mov	r5, r0
 8003baa:	d119      	bne.n	8003be0 <__cvt+0x94>
 8003bac:	f019 0f01 	tst.w	r9, #1
 8003bb0:	d00e      	beq.n	8003bd0 <__cvt+0x84>
 8003bb2:	eb00 0904 	add.w	r9, r0, r4
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2300      	movs	r3, #0
 8003bba:	4630      	mov	r0, r6
 8003bbc:	4639      	mov	r1, r7
 8003bbe:	f7fc ff93 	bl	8000ae8 <__aeabi_dcmpeq>
 8003bc2:	b108      	cbz	r0, 8003bc8 <__cvt+0x7c>
 8003bc4:	f8cd 900c 	str.w	r9, [sp, #12]
 8003bc8:	2230      	movs	r2, #48	@ 0x30
 8003bca:	9b03      	ldr	r3, [sp, #12]
 8003bcc:	454b      	cmp	r3, r9
 8003bce:	d31e      	bcc.n	8003c0e <__cvt+0xc2>
 8003bd0:	9b03      	ldr	r3, [sp, #12]
 8003bd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003bd4:	1b5b      	subs	r3, r3, r5
 8003bd6:	4628      	mov	r0, r5
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	b004      	add	sp, #16
 8003bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003be0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003be4:	eb00 0904 	add.w	r9, r0, r4
 8003be8:	d1e5      	bne.n	8003bb6 <__cvt+0x6a>
 8003bea:	7803      	ldrb	r3, [r0, #0]
 8003bec:	2b30      	cmp	r3, #48	@ 0x30
 8003bee:	d10a      	bne.n	8003c06 <__cvt+0xba>
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	4630      	mov	r0, r6
 8003bf6:	4639      	mov	r1, r7
 8003bf8:	f7fc ff76 	bl	8000ae8 <__aeabi_dcmpeq>
 8003bfc:	b918      	cbnz	r0, 8003c06 <__cvt+0xba>
 8003bfe:	f1c4 0401 	rsb	r4, r4, #1
 8003c02:	f8ca 4000 	str.w	r4, [sl]
 8003c06:	f8da 3000 	ldr.w	r3, [sl]
 8003c0a:	4499      	add	r9, r3
 8003c0c:	e7d3      	b.n	8003bb6 <__cvt+0x6a>
 8003c0e:	1c59      	adds	r1, r3, #1
 8003c10:	9103      	str	r1, [sp, #12]
 8003c12:	701a      	strb	r2, [r3, #0]
 8003c14:	e7d9      	b.n	8003bca <__cvt+0x7e>

08003c16 <__exponent>:
 8003c16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c18:	2900      	cmp	r1, #0
 8003c1a:	bfba      	itte	lt
 8003c1c:	4249      	neglt	r1, r1
 8003c1e:	232d      	movlt	r3, #45	@ 0x2d
 8003c20:	232b      	movge	r3, #43	@ 0x2b
 8003c22:	2909      	cmp	r1, #9
 8003c24:	7002      	strb	r2, [r0, #0]
 8003c26:	7043      	strb	r3, [r0, #1]
 8003c28:	dd29      	ble.n	8003c7e <__exponent+0x68>
 8003c2a:	f10d 0307 	add.w	r3, sp, #7
 8003c2e:	461d      	mov	r5, r3
 8003c30:	270a      	movs	r7, #10
 8003c32:	461a      	mov	r2, r3
 8003c34:	fbb1 f6f7 	udiv	r6, r1, r7
 8003c38:	fb07 1416 	mls	r4, r7, r6, r1
 8003c3c:	3430      	adds	r4, #48	@ 0x30
 8003c3e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003c42:	460c      	mov	r4, r1
 8003c44:	2c63      	cmp	r4, #99	@ 0x63
 8003c46:	f103 33ff 	add.w	r3, r3, #4294967295
 8003c4a:	4631      	mov	r1, r6
 8003c4c:	dcf1      	bgt.n	8003c32 <__exponent+0x1c>
 8003c4e:	3130      	adds	r1, #48	@ 0x30
 8003c50:	1e94      	subs	r4, r2, #2
 8003c52:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003c56:	1c41      	adds	r1, r0, #1
 8003c58:	4623      	mov	r3, r4
 8003c5a:	42ab      	cmp	r3, r5
 8003c5c:	d30a      	bcc.n	8003c74 <__exponent+0x5e>
 8003c5e:	f10d 0309 	add.w	r3, sp, #9
 8003c62:	1a9b      	subs	r3, r3, r2
 8003c64:	42ac      	cmp	r4, r5
 8003c66:	bf88      	it	hi
 8003c68:	2300      	movhi	r3, #0
 8003c6a:	3302      	adds	r3, #2
 8003c6c:	4403      	add	r3, r0
 8003c6e:	1a18      	subs	r0, r3, r0
 8003c70:	b003      	add	sp, #12
 8003c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c74:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003c78:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003c7c:	e7ed      	b.n	8003c5a <__exponent+0x44>
 8003c7e:	2330      	movs	r3, #48	@ 0x30
 8003c80:	3130      	adds	r1, #48	@ 0x30
 8003c82:	7083      	strb	r3, [r0, #2]
 8003c84:	70c1      	strb	r1, [r0, #3]
 8003c86:	1d03      	adds	r3, r0, #4
 8003c88:	e7f1      	b.n	8003c6e <__exponent+0x58>
	...

08003c8c <_printf_float>:
 8003c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c90:	b08d      	sub	sp, #52	@ 0x34
 8003c92:	460c      	mov	r4, r1
 8003c94:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003c98:	4616      	mov	r6, r2
 8003c9a:	461f      	mov	r7, r3
 8003c9c:	4605      	mov	r5, r0
 8003c9e:	f000 fcdb 	bl	8004658 <_localeconv_r>
 8003ca2:	6803      	ldr	r3, [r0, #0]
 8003ca4:	9304      	str	r3, [sp, #16]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fc faf2 	bl	8000290 <strlen>
 8003cac:	2300      	movs	r3, #0
 8003cae:	930a      	str	r3, [sp, #40]	@ 0x28
 8003cb0:	f8d8 3000 	ldr.w	r3, [r8]
 8003cb4:	9005      	str	r0, [sp, #20]
 8003cb6:	3307      	adds	r3, #7
 8003cb8:	f023 0307 	bic.w	r3, r3, #7
 8003cbc:	f103 0208 	add.w	r2, r3, #8
 8003cc0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003cc4:	f8d4 b000 	ldr.w	fp, [r4]
 8003cc8:	f8c8 2000 	str.w	r2, [r8]
 8003ccc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003cd0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003cd4:	9307      	str	r3, [sp, #28]
 8003cd6:	f8cd 8018 	str.w	r8, [sp, #24]
 8003cda:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003cde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ce2:	4b9c      	ldr	r3, [pc, #624]	@ (8003f54 <_printf_float+0x2c8>)
 8003ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce8:	f7fc ff30 	bl	8000b4c <__aeabi_dcmpun>
 8003cec:	bb70      	cbnz	r0, 8003d4c <_printf_float+0xc0>
 8003cee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003cf2:	4b98      	ldr	r3, [pc, #608]	@ (8003f54 <_printf_float+0x2c8>)
 8003cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf8:	f7fc ff0a 	bl	8000b10 <__aeabi_dcmple>
 8003cfc:	bb30      	cbnz	r0, 8003d4c <_printf_float+0xc0>
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2300      	movs	r3, #0
 8003d02:	4640      	mov	r0, r8
 8003d04:	4649      	mov	r1, r9
 8003d06:	f7fc fef9 	bl	8000afc <__aeabi_dcmplt>
 8003d0a:	b110      	cbz	r0, 8003d12 <_printf_float+0x86>
 8003d0c:	232d      	movs	r3, #45	@ 0x2d
 8003d0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d12:	4a91      	ldr	r2, [pc, #580]	@ (8003f58 <_printf_float+0x2cc>)
 8003d14:	4b91      	ldr	r3, [pc, #580]	@ (8003f5c <_printf_float+0x2d0>)
 8003d16:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003d1a:	bf94      	ite	ls
 8003d1c:	4690      	movls	r8, r2
 8003d1e:	4698      	movhi	r8, r3
 8003d20:	2303      	movs	r3, #3
 8003d22:	6123      	str	r3, [r4, #16]
 8003d24:	f02b 0304 	bic.w	r3, fp, #4
 8003d28:	6023      	str	r3, [r4, #0]
 8003d2a:	f04f 0900 	mov.w	r9, #0
 8003d2e:	9700      	str	r7, [sp, #0]
 8003d30:	4633      	mov	r3, r6
 8003d32:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003d34:	4621      	mov	r1, r4
 8003d36:	4628      	mov	r0, r5
 8003d38:	f000 f9d2 	bl	80040e0 <_printf_common>
 8003d3c:	3001      	adds	r0, #1
 8003d3e:	f040 808d 	bne.w	8003e5c <_printf_float+0x1d0>
 8003d42:	f04f 30ff 	mov.w	r0, #4294967295
 8003d46:	b00d      	add	sp, #52	@ 0x34
 8003d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d4c:	4642      	mov	r2, r8
 8003d4e:	464b      	mov	r3, r9
 8003d50:	4640      	mov	r0, r8
 8003d52:	4649      	mov	r1, r9
 8003d54:	f7fc fefa 	bl	8000b4c <__aeabi_dcmpun>
 8003d58:	b140      	cbz	r0, 8003d6c <_printf_float+0xe0>
 8003d5a:	464b      	mov	r3, r9
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	bfbc      	itt	lt
 8003d60:	232d      	movlt	r3, #45	@ 0x2d
 8003d62:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003d66:	4a7e      	ldr	r2, [pc, #504]	@ (8003f60 <_printf_float+0x2d4>)
 8003d68:	4b7e      	ldr	r3, [pc, #504]	@ (8003f64 <_printf_float+0x2d8>)
 8003d6a:	e7d4      	b.n	8003d16 <_printf_float+0x8a>
 8003d6c:	6863      	ldr	r3, [r4, #4]
 8003d6e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003d72:	9206      	str	r2, [sp, #24]
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	d13b      	bne.n	8003df0 <_printf_float+0x164>
 8003d78:	2306      	movs	r3, #6
 8003d7a:	6063      	str	r3, [r4, #4]
 8003d7c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003d80:	2300      	movs	r3, #0
 8003d82:	6022      	str	r2, [r4, #0]
 8003d84:	9303      	str	r3, [sp, #12]
 8003d86:	ab0a      	add	r3, sp, #40	@ 0x28
 8003d88:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003d8c:	ab09      	add	r3, sp, #36	@ 0x24
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	6861      	ldr	r1, [r4, #4]
 8003d92:	ec49 8b10 	vmov	d0, r8, r9
 8003d96:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003d9a:	4628      	mov	r0, r5
 8003d9c:	f7ff fed6 	bl	8003b4c <__cvt>
 8003da0:	9b06      	ldr	r3, [sp, #24]
 8003da2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003da4:	2b47      	cmp	r3, #71	@ 0x47
 8003da6:	4680      	mov	r8, r0
 8003da8:	d129      	bne.n	8003dfe <_printf_float+0x172>
 8003daa:	1cc8      	adds	r0, r1, #3
 8003dac:	db02      	blt.n	8003db4 <_printf_float+0x128>
 8003dae:	6863      	ldr	r3, [r4, #4]
 8003db0:	4299      	cmp	r1, r3
 8003db2:	dd41      	ble.n	8003e38 <_printf_float+0x1ac>
 8003db4:	f1aa 0a02 	sub.w	sl, sl, #2
 8003db8:	fa5f fa8a 	uxtb.w	sl, sl
 8003dbc:	3901      	subs	r1, #1
 8003dbe:	4652      	mov	r2, sl
 8003dc0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003dc4:	9109      	str	r1, [sp, #36]	@ 0x24
 8003dc6:	f7ff ff26 	bl	8003c16 <__exponent>
 8003dca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003dcc:	1813      	adds	r3, r2, r0
 8003dce:	2a01      	cmp	r2, #1
 8003dd0:	4681      	mov	r9, r0
 8003dd2:	6123      	str	r3, [r4, #16]
 8003dd4:	dc02      	bgt.n	8003ddc <_printf_float+0x150>
 8003dd6:	6822      	ldr	r2, [r4, #0]
 8003dd8:	07d2      	lsls	r2, r2, #31
 8003dda:	d501      	bpl.n	8003de0 <_printf_float+0x154>
 8003ddc:	3301      	adds	r3, #1
 8003dde:	6123      	str	r3, [r4, #16]
 8003de0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0a2      	beq.n	8003d2e <_printf_float+0xa2>
 8003de8:	232d      	movs	r3, #45	@ 0x2d
 8003dea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dee:	e79e      	b.n	8003d2e <_printf_float+0xa2>
 8003df0:	9a06      	ldr	r2, [sp, #24]
 8003df2:	2a47      	cmp	r2, #71	@ 0x47
 8003df4:	d1c2      	bne.n	8003d7c <_printf_float+0xf0>
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1c0      	bne.n	8003d7c <_printf_float+0xf0>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e7bd      	b.n	8003d7a <_printf_float+0xee>
 8003dfe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003e02:	d9db      	bls.n	8003dbc <_printf_float+0x130>
 8003e04:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003e08:	d118      	bne.n	8003e3c <_printf_float+0x1b0>
 8003e0a:	2900      	cmp	r1, #0
 8003e0c:	6863      	ldr	r3, [r4, #4]
 8003e0e:	dd0b      	ble.n	8003e28 <_printf_float+0x19c>
 8003e10:	6121      	str	r1, [r4, #16]
 8003e12:	b913      	cbnz	r3, 8003e1a <_printf_float+0x18e>
 8003e14:	6822      	ldr	r2, [r4, #0]
 8003e16:	07d0      	lsls	r0, r2, #31
 8003e18:	d502      	bpl.n	8003e20 <_printf_float+0x194>
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	440b      	add	r3, r1
 8003e1e:	6123      	str	r3, [r4, #16]
 8003e20:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003e22:	f04f 0900 	mov.w	r9, #0
 8003e26:	e7db      	b.n	8003de0 <_printf_float+0x154>
 8003e28:	b913      	cbnz	r3, 8003e30 <_printf_float+0x1a4>
 8003e2a:	6822      	ldr	r2, [r4, #0]
 8003e2c:	07d2      	lsls	r2, r2, #31
 8003e2e:	d501      	bpl.n	8003e34 <_printf_float+0x1a8>
 8003e30:	3302      	adds	r3, #2
 8003e32:	e7f4      	b.n	8003e1e <_printf_float+0x192>
 8003e34:	2301      	movs	r3, #1
 8003e36:	e7f2      	b.n	8003e1e <_printf_float+0x192>
 8003e38:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003e3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003e3e:	4299      	cmp	r1, r3
 8003e40:	db05      	blt.n	8003e4e <_printf_float+0x1c2>
 8003e42:	6823      	ldr	r3, [r4, #0]
 8003e44:	6121      	str	r1, [r4, #16]
 8003e46:	07d8      	lsls	r0, r3, #31
 8003e48:	d5ea      	bpl.n	8003e20 <_printf_float+0x194>
 8003e4a:	1c4b      	adds	r3, r1, #1
 8003e4c:	e7e7      	b.n	8003e1e <_printf_float+0x192>
 8003e4e:	2900      	cmp	r1, #0
 8003e50:	bfd4      	ite	le
 8003e52:	f1c1 0202 	rsble	r2, r1, #2
 8003e56:	2201      	movgt	r2, #1
 8003e58:	4413      	add	r3, r2
 8003e5a:	e7e0      	b.n	8003e1e <_printf_float+0x192>
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	055a      	lsls	r2, r3, #21
 8003e60:	d407      	bmi.n	8003e72 <_printf_float+0x1e6>
 8003e62:	6923      	ldr	r3, [r4, #16]
 8003e64:	4642      	mov	r2, r8
 8003e66:	4631      	mov	r1, r6
 8003e68:	4628      	mov	r0, r5
 8003e6a:	47b8      	blx	r7
 8003e6c:	3001      	adds	r0, #1
 8003e6e:	d12b      	bne.n	8003ec8 <_printf_float+0x23c>
 8003e70:	e767      	b.n	8003d42 <_printf_float+0xb6>
 8003e72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003e76:	f240 80dd 	bls.w	8004034 <_printf_float+0x3a8>
 8003e7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2300      	movs	r3, #0
 8003e82:	f7fc fe31 	bl	8000ae8 <__aeabi_dcmpeq>
 8003e86:	2800      	cmp	r0, #0
 8003e88:	d033      	beq.n	8003ef2 <_printf_float+0x266>
 8003e8a:	4a37      	ldr	r2, [pc, #220]	@ (8003f68 <_printf_float+0x2dc>)
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	4631      	mov	r1, r6
 8003e90:	4628      	mov	r0, r5
 8003e92:	47b8      	blx	r7
 8003e94:	3001      	adds	r0, #1
 8003e96:	f43f af54 	beq.w	8003d42 <_printf_float+0xb6>
 8003e9a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003e9e:	4543      	cmp	r3, r8
 8003ea0:	db02      	blt.n	8003ea8 <_printf_float+0x21c>
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	07d8      	lsls	r0, r3, #31
 8003ea6:	d50f      	bpl.n	8003ec8 <_printf_float+0x23c>
 8003ea8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003eac:	4631      	mov	r1, r6
 8003eae:	4628      	mov	r0, r5
 8003eb0:	47b8      	blx	r7
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	f43f af45 	beq.w	8003d42 <_printf_float+0xb6>
 8003eb8:	f04f 0900 	mov.w	r9, #0
 8003ebc:	f108 38ff 	add.w	r8, r8, #4294967295
 8003ec0:	f104 0a1a 	add.w	sl, r4, #26
 8003ec4:	45c8      	cmp	r8, r9
 8003ec6:	dc09      	bgt.n	8003edc <_printf_float+0x250>
 8003ec8:	6823      	ldr	r3, [r4, #0]
 8003eca:	079b      	lsls	r3, r3, #30
 8003ecc:	f100 8103 	bmi.w	80040d6 <_printf_float+0x44a>
 8003ed0:	68e0      	ldr	r0, [r4, #12]
 8003ed2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003ed4:	4298      	cmp	r0, r3
 8003ed6:	bfb8      	it	lt
 8003ed8:	4618      	movlt	r0, r3
 8003eda:	e734      	b.n	8003d46 <_printf_float+0xba>
 8003edc:	2301      	movs	r3, #1
 8003ede:	4652      	mov	r2, sl
 8003ee0:	4631      	mov	r1, r6
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	47b8      	blx	r7
 8003ee6:	3001      	adds	r0, #1
 8003ee8:	f43f af2b 	beq.w	8003d42 <_printf_float+0xb6>
 8003eec:	f109 0901 	add.w	r9, r9, #1
 8003ef0:	e7e8      	b.n	8003ec4 <_printf_float+0x238>
 8003ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	dc39      	bgt.n	8003f6c <_printf_float+0x2e0>
 8003ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8003f68 <_printf_float+0x2dc>)
 8003efa:	2301      	movs	r3, #1
 8003efc:	4631      	mov	r1, r6
 8003efe:	4628      	mov	r0, r5
 8003f00:	47b8      	blx	r7
 8003f02:	3001      	adds	r0, #1
 8003f04:	f43f af1d 	beq.w	8003d42 <_printf_float+0xb6>
 8003f08:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003f0c:	ea59 0303 	orrs.w	r3, r9, r3
 8003f10:	d102      	bne.n	8003f18 <_printf_float+0x28c>
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	07d9      	lsls	r1, r3, #31
 8003f16:	d5d7      	bpl.n	8003ec8 <_printf_float+0x23c>
 8003f18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f1c:	4631      	mov	r1, r6
 8003f1e:	4628      	mov	r0, r5
 8003f20:	47b8      	blx	r7
 8003f22:	3001      	adds	r0, #1
 8003f24:	f43f af0d 	beq.w	8003d42 <_printf_float+0xb6>
 8003f28:	f04f 0a00 	mov.w	sl, #0
 8003f2c:	f104 0b1a 	add.w	fp, r4, #26
 8003f30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f32:	425b      	negs	r3, r3
 8003f34:	4553      	cmp	r3, sl
 8003f36:	dc01      	bgt.n	8003f3c <_printf_float+0x2b0>
 8003f38:	464b      	mov	r3, r9
 8003f3a:	e793      	b.n	8003e64 <_printf_float+0x1d8>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	465a      	mov	r2, fp
 8003f40:	4631      	mov	r1, r6
 8003f42:	4628      	mov	r0, r5
 8003f44:	47b8      	blx	r7
 8003f46:	3001      	adds	r0, #1
 8003f48:	f43f aefb 	beq.w	8003d42 <_printf_float+0xb6>
 8003f4c:	f10a 0a01 	add.w	sl, sl, #1
 8003f50:	e7ee      	b.n	8003f30 <_printf_float+0x2a4>
 8003f52:	bf00      	nop
 8003f54:	7fefffff 	.word	0x7fefffff
 8003f58:	08007c14 	.word	0x08007c14
 8003f5c:	08007c18 	.word	0x08007c18
 8003f60:	08007c1c 	.word	0x08007c1c
 8003f64:	08007c20 	.word	0x08007c20
 8003f68:	08007c24 	.word	0x08007c24
 8003f6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f6e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003f72:	4553      	cmp	r3, sl
 8003f74:	bfa8      	it	ge
 8003f76:	4653      	movge	r3, sl
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	4699      	mov	r9, r3
 8003f7c:	dc36      	bgt.n	8003fec <_printf_float+0x360>
 8003f7e:	f04f 0b00 	mov.w	fp, #0
 8003f82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f86:	f104 021a 	add.w	r2, r4, #26
 8003f8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f8c:	9306      	str	r3, [sp, #24]
 8003f8e:	eba3 0309 	sub.w	r3, r3, r9
 8003f92:	455b      	cmp	r3, fp
 8003f94:	dc31      	bgt.n	8003ffa <_printf_float+0x36e>
 8003f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f98:	459a      	cmp	sl, r3
 8003f9a:	dc3a      	bgt.n	8004012 <_printf_float+0x386>
 8003f9c:	6823      	ldr	r3, [r4, #0]
 8003f9e:	07da      	lsls	r2, r3, #31
 8003fa0:	d437      	bmi.n	8004012 <_printf_float+0x386>
 8003fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fa4:	ebaa 0903 	sub.w	r9, sl, r3
 8003fa8:	9b06      	ldr	r3, [sp, #24]
 8003faa:	ebaa 0303 	sub.w	r3, sl, r3
 8003fae:	4599      	cmp	r9, r3
 8003fb0:	bfa8      	it	ge
 8003fb2:	4699      	movge	r9, r3
 8003fb4:	f1b9 0f00 	cmp.w	r9, #0
 8003fb8:	dc33      	bgt.n	8004022 <_printf_float+0x396>
 8003fba:	f04f 0800 	mov.w	r8, #0
 8003fbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fc2:	f104 0b1a 	add.w	fp, r4, #26
 8003fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fc8:	ebaa 0303 	sub.w	r3, sl, r3
 8003fcc:	eba3 0309 	sub.w	r3, r3, r9
 8003fd0:	4543      	cmp	r3, r8
 8003fd2:	f77f af79 	ble.w	8003ec8 <_printf_float+0x23c>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	465a      	mov	r2, fp
 8003fda:	4631      	mov	r1, r6
 8003fdc:	4628      	mov	r0, r5
 8003fde:	47b8      	blx	r7
 8003fe0:	3001      	adds	r0, #1
 8003fe2:	f43f aeae 	beq.w	8003d42 <_printf_float+0xb6>
 8003fe6:	f108 0801 	add.w	r8, r8, #1
 8003fea:	e7ec      	b.n	8003fc6 <_printf_float+0x33a>
 8003fec:	4642      	mov	r2, r8
 8003fee:	4631      	mov	r1, r6
 8003ff0:	4628      	mov	r0, r5
 8003ff2:	47b8      	blx	r7
 8003ff4:	3001      	adds	r0, #1
 8003ff6:	d1c2      	bne.n	8003f7e <_printf_float+0x2f2>
 8003ff8:	e6a3      	b.n	8003d42 <_printf_float+0xb6>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	4631      	mov	r1, r6
 8003ffe:	4628      	mov	r0, r5
 8004000:	9206      	str	r2, [sp, #24]
 8004002:	47b8      	blx	r7
 8004004:	3001      	adds	r0, #1
 8004006:	f43f ae9c 	beq.w	8003d42 <_printf_float+0xb6>
 800400a:	9a06      	ldr	r2, [sp, #24]
 800400c:	f10b 0b01 	add.w	fp, fp, #1
 8004010:	e7bb      	b.n	8003f8a <_printf_float+0x2fe>
 8004012:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004016:	4631      	mov	r1, r6
 8004018:	4628      	mov	r0, r5
 800401a:	47b8      	blx	r7
 800401c:	3001      	adds	r0, #1
 800401e:	d1c0      	bne.n	8003fa2 <_printf_float+0x316>
 8004020:	e68f      	b.n	8003d42 <_printf_float+0xb6>
 8004022:	9a06      	ldr	r2, [sp, #24]
 8004024:	464b      	mov	r3, r9
 8004026:	4442      	add	r2, r8
 8004028:	4631      	mov	r1, r6
 800402a:	4628      	mov	r0, r5
 800402c:	47b8      	blx	r7
 800402e:	3001      	adds	r0, #1
 8004030:	d1c3      	bne.n	8003fba <_printf_float+0x32e>
 8004032:	e686      	b.n	8003d42 <_printf_float+0xb6>
 8004034:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004038:	f1ba 0f01 	cmp.w	sl, #1
 800403c:	dc01      	bgt.n	8004042 <_printf_float+0x3b6>
 800403e:	07db      	lsls	r3, r3, #31
 8004040:	d536      	bpl.n	80040b0 <_printf_float+0x424>
 8004042:	2301      	movs	r3, #1
 8004044:	4642      	mov	r2, r8
 8004046:	4631      	mov	r1, r6
 8004048:	4628      	mov	r0, r5
 800404a:	47b8      	blx	r7
 800404c:	3001      	adds	r0, #1
 800404e:	f43f ae78 	beq.w	8003d42 <_printf_float+0xb6>
 8004052:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004056:	4631      	mov	r1, r6
 8004058:	4628      	mov	r0, r5
 800405a:	47b8      	blx	r7
 800405c:	3001      	adds	r0, #1
 800405e:	f43f ae70 	beq.w	8003d42 <_printf_float+0xb6>
 8004062:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004066:	2200      	movs	r2, #0
 8004068:	2300      	movs	r3, #0
 800406a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800406e:	f7fc fd3b 	bl	8000ae8 <__aeabi_dcmpeq>
 8004072:	b9c0      	cbnz	r0, 80040a6 <_printf_float+0x41a>
 8004074:	4653      	mov	r3, sl
 8004076:	f108 0201 	add.w	r2, r8, #1
 800407a:	4631      	mov	r1, r6
 800407c:	4628      	mov	r0, r5
 800407e:	47b8      	blx	r7
 8004080:	3001      	adds	r0, #1
 8004082:	d10c      	bne.n	800409e <_printf_float+0x412>
 8004084:	e65d      	b.n	8003d42 <_printf_float+0xb6>
 8004086:	2301      	movs	r3, #1
 8004088:	465a      	mov	r2, fp
 800408a:	4631      	mov	r1, r6
 800408c:	4628      	mov	r0, r5
 800408e:	47b8      	blx	r7
 8004090:	3001      	adds	r0, #1
 8004092:	f43f ae56 	beq.w	8003d42 <_printf_float+0xb6>
 8004096:	f108 0801 	add.w	r8, r8, #1
 800409a:	45d0      	cmp	r8, sl
 800409c:	dbf3      	blt.n	8004086 <_printf_float+0x3fa>
 800409e:	464b      	mov	r3, r9
 80040a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80040a4:	e6df      	b.n	8003e66 <_printf_float+0x1da>
 80040a6:	f04f 0800 	mov.w	r8, #0
 80040aa:	f104 0b1a 	add.w	fp, r4, #26
 80040ae:	e7f4      	b.n	800409a <_printf_float+0x40e>
 80040b0:	2301      	movs	r3, #1
 80040b2:	4642      	mov	r2, r8
 80040b4:	e7e1      	b.n	800407a <_printf_float+0x3ee>
 80040b6:	2301      	movs	r3, #1
 80040b8:	464a      	mov	r2, r9
 80040ba:	4631      	mov	r1, r6
 80040bc:	4628      	mov	r0, r5
 80040be:	47b8      	blx	r7
 80040c0:	3001      	adds	r0, #1
 80040c2:	f43f ae3e 	beq.w	8003d42 <_printf_float+0xb6>
 80040c6:	f108 0801 	add.w	r8, r8, #1
 80040ca:	68e3      	ldr	r3, [r4, #12]
 80040cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80040ce:	1a5b      	subs	r3, r3, r1
 80040d0:	4543      	cmp	r3, r8
 80040d2:	dcf0      	bgt.n	80040b6 <_printf_float+0x42a>
 80040d4:	e6fc      	b.n	8003ed0 <_printf_float+0x244>
 80040d6:	f04f 0800 	mov.w	r8, #0
 80040da:	f104 0919 	add.w	r9, r4, #25
 80040de:	e7f4      	b.n	80040ca <_printf_float+0x43e>

080040e0 <_printf_common>:
 80040e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040e4:	4616      	mov	r6, r2
 80040e6:	4698      	mov	r8, r3
 80040e8:	688a      	ldr	r2, [r1, #8]
 80040ea:	690b      	ldr	r3, [r1, #16]
 80040ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80040f0:	4293      	cmp	r3, r2
 80040f2:	bfb8      	it	lt
 80040f4:	4613      	movlt	r3, r2
 80040f6:	6033      	str	r3, [r6, #0]
 80040f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80040fc:	4607      	mov	r7, r0
 80040fe:	460c      	mov	r4, r1
 8004100:	b10a      	cbz	r2, 8004106 <_printf_common+0x26>
 8004102:	3301      	adds	r3, #1
 8004104:	6033      	str	r3, [r6, #0]
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	0699      	lsls	r1, r3, #26
 800410a:	bf42      	ittt	mi
 800410c:	6833      	ldrmi	r3, [r6, #0]
 800410e:	3302      	addmi	r3, #2
 8004110:	6033      	strmi	r3, [r6, #0]
 8004112:	6825      	ldr	r5, [r4, #0]
 8004114:	f015 0506 	ands.w	r5, r5, #6
 8004118:	d106      	bne.n	8004128 <_printf_common+0x48>
 800411a:	f104 0a19 	add.w	sl, r4, #25
 800411e:	68e3      	ldr	r3, [r4, #12]
 8004120:	6832      	ldr	r2, [r6, #0]
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	42ab      	cmp	r3, r5
 8004126:	dc26      	bgt.n	8004176 <_printf_common+0x96>
 8004128:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800412c:	6822      	ldr	r2, [r4, #0]
 800412e:	3b00      	subs	r3, #0
 8004130:	bf18      	it	ne
 8004132:	2301      	movne	r3, #1
 8004134:	0692      	lsls	r2, r2, #26
 8004136:	d42b      	bmi.n	8004190 <_printf_common+0xb0>
 8004138:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800413c:	4641      	mov	r1, r8
 800413e:	4638      	mov	r0, r7
 8004140:	47c8      	blx	r9
 8004142:	3001      	adds	r0, #1
 8004144:	d01e      	beq.n	8004184 <_printf_common+0xa4>
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	6922      	ldr	r2, [r4, #16]
 800414a:	f003 0306 	and.w	r3, r3, #6
 800414e:	2b04      	cmp	r3, #4
 8004150:	bf02      	ittt	eq
 8004152:	68e5      	ldreq	r5, [r4, #12]
 8004154:	6833      	ldreq	r3, [r6, #0]
 8004156:	1aed      	subeq	r5, r5, r3
 8004158:	68a3      	ldr	r3, [r4, #8]
 800415a:	bf0c      	ite	eq
 800415c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004160:	2500      	movne	r5, #0
 8004162:	4293      	cmp	r3, r2
 8004164:	bfc4      	itt	gt
 8004166:	1a9b      	subgt	r3, r3, r2
 8004168:	18ed      	addgt	r5, r5, r3
 800416a:	2600      	movs	r6, #0
 800416c:	341a      	adds	r4, #26
 800416e:	42b5      	cmp	r5, r6
 8004170:	d11a      	bne.n	80041a8 <_printf_common+0xc8>
 8004172:	2000      	movs	r0, #0
 8004174:	e008      	b.n	8004188 <_printf_common+0xa8>
 8004176:	2301      	movs	r3, #1
 8004178:	4652      	mov	r2, sl
 800417a:	4641      	mov	r1, r8
 800417c:	4638      	mov	r0, r7
 800417e:	47c8      	blx	r9
 8004180:	3001      	adds	r0, #1
 8004182:	d103      	bne.n	800418c <_printf_common+0xac>
 8004184:	f04f 30ff 	mov.w	r0, #4294967295
 8004188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800418c:	3501      	adds	r5, #1
 800418e:	e7c6      	b.n	800411e <_printf_common+0x3e>
 8004190:	18e1      	adds	r1, r4, r3
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	2030      	movs	r0, #48	@ 0x30
 8004196:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800419a:	4422      	add	r2, r4
 800419c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041a4:	3302      	adds	r3, #2
 80041a6:	e7c7      	b.n	8004138 <_printf_common+0x58>
 80041a8:	2301      	movs	r3, #1
 80041aa:	4622      	mov	r2, r4
 80041ac:	4641      	mov	r1, r8
 80041ae:	4638      	mov	r0, r7
 80041b0:	47c8      	blx	r9
 80041b2:	3001      	adds	r0, #1
 80041b4:	d0e6      	beq.n	8004184 <_printf_common+0xa4>
 80041b6:	3601      	adds	r6, #1
 80041b8:	e7d9      	b.n	800416e <_printf_common+0x8e>
	...

080041bc <_printf_i>:
 80041bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041c0:	7e0f      	ldrb	r7, [r1, #24]
 80041c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041c4:	2f78      	cmp	r7, #120	@ 0x78
 80041c6:	4691      	mov	r9, r2
 80041c8:	4680      	mov	r8, r0
 80041ca:	460c      	mov	r4, r1
 80041cc:	469a      	mov	sl, r3
 80041ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041d2:	d807      	bhi.n	80041e4 <_printf_i+0x28>
 80041d4:	2f62      	cmp	r7, #98	@ 0x62
 80041d6:	d80a      	bhi.n	80041ee <_printf_i+0x32>
 80041d8:	2f00      	cmp	r7, #0
 80041da:	f000 80d2 	beq.w	8004382 <_printf_i+0x1c6>
 80041de:	2f58      	cmp	r7, #88	@ 0x58
 80041e0:	f000 80b9 	beq.w	8004356 <_printf_i+0x19a>
 80041e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80041ec:	e03a      	b.n	8004264 <_printf_i+0xa8>
 80041ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80041f2:	2b15      	cmp	r3, #21
 80041f4:	d8f6      	bhi.n	80041e4 <_printf_i+0x28>
 80041f6:	a101      	add	r1, pc, #4	@ (adr r1, 80041fc <_printf_i+0x40>)
 80041f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041fc:	08004255 	.word	0x08004255
 8004200:	08004269 	.word	0x08004269
 8004204:	080041e5 	.word	0x080041e5
 8004208:	080041e5 	.word	0x080041e5
 800420c:	080041e5 	.word	0x080041e5
 8004210:	080041e5 	.word	0x080041e5
 8004214:	08004269 	.word	0x08004269
 8004218:	080041e5 	.word	0x080041e5
 800421c:	080041e5 	.word	0x080041e5
 8004220:	080041e5 	.word	0x080041e5
 8004224:	080041e5 	.word	0x080041e5
 8004228:	08004369 	.word	0x08004369
 800422c:	08004293 	.word	0x08004293
 8004230:	08004323 	.word	0x08004323
 8004234:	080041e5 	.word	0x080041e5
 8004238:	080041e5 	.word	0x080041e5
 800423c:	0800438b 	.word	0x0800438b
 8004240:	080041e5 	.word	0x080041e5
 8004244:	08004293 	.word	0x08004293
 8004248:	080041e5 	.word	0x080041e5
 800424c:	080041e5 	.word	0x080041e5
 8004250:	0800432b 	.word	0x0800432b
 8004254:	6833      	ldr	r3, [r6, #0]
 8004256:	1d1a      	adds	r2, r3, #4
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6032      	str	r2, [r6, #0]
 800425c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004260:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004264:	2301      	movs	r3, #1
 8004266:	e09d      	b.n	80043a4 <_printf_i+0x1e8>
 8004268:	6833      	ldr	r3, [r6, #0]
 800426a:	6820      	ldr	r0, [r4, #0]
 800426c:	1d19      	adds	r1, r3, #4
 800426e:	6031      	str	r1, [r6, #0]
 8004270:	0606      	lsls	r6, r0, #24
 8004272:	d501      	bpl.n	8004278 <_printf_i+0xbc>
 8004274:	681d      	ldr	r5, [r3, #0]
 8004276:	e003      	b.n	8004280 <_printf_i+0xc4>
 8004278:	0645      	lsls	r5, r0, #25
 800427a:	d5fb      	bpl.n	8004274 <_printf_i+0xb8>
 800427c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004280:	2d00      	cmp	r5, #0
 8004282:	da03      	bge.n	800428c <_printf_i+0xd0>
 8004284:	232d      	movs	r3, #45	@ 0x2d
 8004286:	426d      	negs	r5, r5
 8004288:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800428c:	4859      	ldr	r0, [pc, #356]	@ (80043f4 <_printf_i+0x238>)
 800428e:	230a      	movs	r3, #10
 8004290:	e011      	b.n	80042b6 <_printf_i+0xfa>
 8004292:	6821      	ldr	r1, [r4, #0]
 8004294:	6833      	ldr	r3, [r6, #0]
 8004296:	0608      	lsls	r0, r1, #24
 8004298:	f853 5b04 	ldr.w	r5, [r3], #4
 800429c:	d402      	bmi.n	80042a4 <_printf_i+0xe8>
 800429e:	0649      	lsls	r1, r1, #25
 80042a0:	bf48      	it	mi
 80042a2:	b2ad      	uxthmi	r5, r5
 80042a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80042a6:	4853      	ldr	r0, [pc, #332]	@ (80043f4 <_printf_i+0x238>)
 80042a8:	6033      	str	r3, [r6, #0]
 80042aa:	bf14      	ite	ne
 80042ac:	230a      	movne	r3, #10
 80042ae:	2308      	moveq	r3, #8
 80042b0:	2100      	movs	r1, #0
 80042b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80042b6:	6866      	ldr	r6, [r4, #4]
 80042b8:	60a6      	str	r6, [r4, #8]
 80042ba:	2e00      	cmp	r6, #0
 80042bc:	bfa2      	ittt	ge
 80042be:	6821      	ldrge	r1, [r4, #0]
 80042c0:	f021 0104 	bicge.w	r1, r1, #4
 80042c4:	6021      	strge	r1, [r4, #0]
 80042c6:	b90d      	cbnz	r5, 80042cc <_printf_i+0x110>
 80042c8:	2e00      	cmp	r6, #0
 80042ca:	d04b      	beq.n	8004364 <_printf_i+0x1a8>
 80042cc:	4616      	mov	r6, r2
 80042ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80042d2:	fb03 5711 	mls	r7, r3, r1, r5
 80042d6:	5dc7      	ldrb	r7, [r0, r7]
 80042d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042dc:	462f      	mov	r7, r5
 80042de:	42bb      	cmp	r3, r7
 80042e0:	460d      	mov	r5, r1
 80042e2:	d9f4      	bls.n	80042ce <_printf_i+0x112>
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d10b      	bne.n	8004300 <_printf_i+0x144>
 80042e8:	6823      	ldr	r3, [r4, #0]
 80042ea:	07df      	lsls	r7, r3, #31
 80042ec:	d508      	bpl.n	8004300 <_printf_i+0x144>
 80042ee:	6923      	ldr	r3, [r4, #16]
 80042f0:	6861      	ldr	r1, [r4, #4]
 80042f2:	4299      	cmp	r1, r3
 80042f4:	bfde      	ittt	le
 80042f6:	2330      	movle	r3, #48	@ 0x30
 80042f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004300:	1b92      	subs	r2, r2, r6
 8004302:	6122      	str	r2, [r4, #16]
 8004304:	f8cd a000 	str.w	sl, [sp]
 8004308:	464b      	mov	r3, r9
 800430a:	aa03      	add	r2, sp, #12
 800430c:	4621      	mov	r1, r4
 800430e:	4640      	mov	r0, r8
 8004310:	f7ff fee6 	bl	80040e0 <_printf_common>
 8004314:	3001      	adds	r0, #1
 8004316:	d14a      	bne.n	80043ae <_printf_i+0x1f2>
 8004318:	f04f 30ff 	mov.w	r0, #4294967295
 800431c:	b004      	add	sp, #16
 800431e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	f043 0320 	orr.w	r3, r3, #32
 8004328:	6023      	str	r3, [r4, #0]
 800432a:	4833      	ldr	r0, [pc, #204]	@ (80043f8 <_printf_i+0x23c>)
 800432c:	2778      	movs	r7, #120	@ 0x78
 800432e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	6831      	ldr	r1, [r6, #0]
 8004336:	061f      	lsls	r7, r3, #24
 8004338:	f851 5b04 	ldr.w	r5, [r1], #4
 800433c:	d402      	bmi.n	8004344 <_printf_i+0x188>
 800433e:	065f      	lsls	r7, r3, #25
 8004340:	bf48      	it	mi
 8004342:	b2ad      	uxthmi	r5, r5
 8004344:	6031      	str	r1, [r6, #0]
 8004346:	07d9      	lsls	r1, r3, #31
 8004348:	bf44      	itt	mi
 800434a:	f043 0320 	orrmi.w	r3, r3, #32
 800434e:	6023      	strmi	r3, [r4, #0]
 8004350:	b11d      	cbz	r5, 800435a <_printf_i+0x19e>
 8004352:	2310      	movs	r3, #16
 8004354:	e7ac      	b.n	80042b0 <_printf_i+0xf4>
 8004356:	4827      	ldr	r0, [pc, #156]	@ (80043f4 <_printf_i+0x238>)
 8004358:	e7e9      	b.n	800432e <_printf_i+0x172>
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	f023 0320 	bic.w	r3, r3, #32
 8004360:	6023      	str	r3, [r4, #0]
 8004362:	e7f6      	b.n	8004352 <_printf_i+0x196>
 8004364:	4616      	mov	r6, r2
 8004366:	e7bd      	b.n	80042e4 <_printf_i+0x128>
 8004368:	6833      	ldr	r3, [r6, #0]
 800436a:	6825      	ldr	r5, [r4, #0]
 800436c:	6961      	ldr	r1, [r4, #20]
 800436e:	1d18      	adds	r0, r3, #4
 8004370:	6030      	str	r0, [r6, #0]
 8004372:	062e      	lsls	r6, r5, #24
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	d501      	bpl.n	800437c <_printf_i+0x1c0>
 8004378:	6019      	str	r1, [r3, #0]
 800437a:	e002      	b.n	8004382 <_printf_i+0x1c6>
 800437c:	0668      	lsls	r0, r5, #25
 800437e:	d5fb      	bpl.n	8004378 <_printf_i+0x1bc>
 8004380:	8019      	strh	r1, [r3, #0]
 8004382:	2300      	movs	r3, #0
 8004384:	6123      	str	r3, [r4, #16]
 8004386:	4616      	mov	r6, r2
 8004388:	e7bc      	b.n	8004304 <_printf_i+0x148>
 800438a:	6833      	ldr	r3, [r6, #0]
 800438c:	1d1a      	adds	r2, r3, #4
 800438e:	6032      	str	r2, [r6, #0]
 8004390:	681e      	ldr	r6, [r3, #0]
 8004392:	6862      	ldr	r2, [r4, #4]
 8004394:	2100      	movs	r1, #0
 8004396:	4630      	mov	r0, r6
 8004398:	f7fb ff2a 	bl	80001f0 <memchr>
 800439c:	b108      	cbz	r0, 80043a2 <_printf_i+0x1e6>
 800439e:	1b80      	subs	r0, r0, r6
 80043a0:	6060      	str	r0, [r4, #4]
 80043a2:	6863      	ldr	r3, [r4, #4]
 80043a4:	6123      	str	r3, [r4, #16]
 80043a6:	2300      	movs	r3, #0
 80043a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043ac:	e7aa      	b.n	8004304 <_printf_i+0x148>
 80043ae:	6923      	ldr	r3, [r4, #16]
 80043b0:	4632      	mov	r2, r6
 80043b2:	4649      	mov	r1, r9
 80043b4:	4640      	mov	r0, r8
 80043b6:	47d0      	blx	sl
 80043b8:	3001      	adds	r0, #1
 80043ba:	d0ad      	beq.n	8004318 <_printf_i+0x15c>
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	079b      	lsls	r3, r3, #30
 80043c0:	d413      	bmi.n	80043ea <_printf_i+0x22e>
 80043c2:	68e0      	ldr	r0, [r4, #12]
 80043c4:	9b03      	ldr	r3, [sp, #12]
 80043c6:	4298      	cmp	r0, r3
 80043c8:	bfb8      	it	lt
 80043ca:	4618      	movlt	r0, r3
 80043cc:	e7a6      	b.n	800431c <_printf_i+0x160>
 80043ce:	2301      	movs	r3, #1
 80043d0:	4632      	mov	r2, r6
 80043d2:	4649      	mov	r1, r9
 80043d4:	4640      	mov	r0, r8
 80043d6:	47d0      	blx	sl
 80043d8:	3001      	adds	r0, #1
 80043da:	d09d      	beq.n	8004318 <_printf_i+0x15c>
 80043dc:	3501      	adds	r5, #1
 80043de:	68e3      	ldr	r3, [r4, #12]
 80043e0:	9903      	ldr	r1, [sp, #12]
 80043e2:	1a5b      	subs	r3, r3, r1
 80043e4:	42ab      	cmp	r3, r5
 80043e6:	dcf2      	bgt.n	80043ce <_printf_i+0x212>
 80043e8:	e7eb      	b.n	80043c2 <_printf_i+0x206>
 80043ea:	2500      	movs	r5, #0
 80043ec:	f104 0619 	add.w	r6, r4, #25
 80043f0:	e7f5      	b.n	80043de <_printf_i+0x222>
 80043f2:	bf00      	nop
 80043f4:	08007c26 	.word	0x08007c26
 80043f8:	08007c37 	.word	0x08007c37

080043fc <std>:
 80043fc:	2300      	movs	r3, #0
 80043fe:	b510      	push	{r4, lr}
 8004400:	4604      	mov	r4, r0
 8004402:	e9c0 3300 	strd	r3, r3, [r0]
 8004406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800440a:	6083      	str	r3, [r0, #8]
 800440c:	8181      	strh	r1, [r0, #12]
 800440e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004410:	81c2      	strh	r2, [r0, #14]
 8004412:	6183      	str	r3, [r0, #24]
 8004414:	4619      	mov	r1, r3
 8004416:	2208      	movs	r2, #8
 8004418:	305c      	adds	r0, #92	@ 0x5c
 800441a:	f000 f914 	bl	8004646 <memset>
 800441e:	4b0d      	ldr	r3, [pc, #52]	@ (8004454 <std+0x58>)
 8004420:	6263      	str	r3, [r4, #36]	@ 0x24
 8004422:	4b0d      	ldr	r3, [pc, #52]	@ (8004458 <std+0x5c>)
 8004424:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004426:	4b0d      	ldr	r3, [pc, #52]	@ (800445c <std+0x60>)
 8004428:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800442a:	4b0d      	ldr	r3, [pc, #52]	@ (8004460 <std+0x64>)
 800442c:	6323      	str	r3, [r4, #48]	@ 0x30
 800442e:	4b0d      	ldr	r3, [pc, #52]	@ (8004464 <std+0x68>)
 8004430:	6224      	str	r4, [r4, #32]
 8004432:	429c      	cmp	r4, r3
 8004434:	d006      	beq.n	8004444 <std+0x48>
 8004436:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800443a:	4294      	cmp	r4, r2
 800443c:	d002      	beq.n	8004444 <std+0x48>
 800443e:	33d0      	adds	r3, #208	@ 0xd0
 8004440:	429c      	cmp	r4, r3
 8004442:	d105      	bne.n	8004450 <std+0x54>
 8004444:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800444c:	f000 b978 	b.w	8004740 <__retarget_lock_init_recursive>
 8004450:	bd10      	pop	{r4, pc}
 8004452:	bf00      	nop
 8004454:	080045c1 	.word	0x080045c1
 8004458:	080045e3 	.word	0x080045e3
 800445c:	0800461b 	.word	0x0800461b
 8004460:	0800463f 	.word	0x0800463f
 8004464:	20000308 	.word	0x20000308

08004468 <stdio_exit_handler>:
 8004468:	4a02      	ldr	r2, [pc, #8]	@ (8004474 <stdio_exit_handler+0xc>)
 800446a:	4903      	ldr	r1, [pc, #12]	@ (8004478 <stdio_exit_handler+0x10>)
 800446c:	4803      	ldr	r0, [pc, #12]	@ (800447c <stdio_exit_handler+0x14>)
 800446e:	f000 b869 	b.w	8004544 <_fwalk_sglue>
 8004472:	bf00      	nop
 8004474:	2000000c 	.word	0x2000000c
 8004478:	0800609d 	.word	0x0800609d
 800447c:	2000001c 	.word	0x2000001c

08004480 <cleanup_stdio>:
 8004480:	6841      	ldr	r1, [r0, #4]
 8004482:	4b0c      	ldr	r3, [pc, #48]	@ (80044b4 <cleanup_stdio+0x34>)
 8004484:	4299      	cmp	r1, r3
 8004486:	b510      	push	{r4, lr}
 8004488:	4604      	mov	r4, r0
 800448a:	d001      	beq.n	8004490 <cleanup_stdio+0x10>
 800448c:	f001 fe06 	bl	800609c <_fflush_r>
 8004490:	68a1      	ldr	r1, [r4, #8]
 8004492:	4b09      	ldr	r3, [pc, #36]	@ (80044b8 <cleanup_stdio+0x38>)
 8004494:	4299      	cmp	r1, r3
 8004496:	d002      	beq.n	800449e <cleanup_stdio+0x1e>
 8004498:	4620      	mov	r0, r4
 800449a:	f001 fdff 	bl	800609c <_fflush_r>
 800449e:	68e1      	ldr	r1, [r4, #12]
 80044a0:	4b06      	ldr	r3, [pc, #24]	@ (80044bc <cleanup_stdio+0x3c>)
 80044a2:	4299      	cmp	r1, r3
 80044a4:	d004      	beq.n	80044b0 <cleanup_stdio+0x30>
 80044a6:	4620      	mov	r0, r4
 80044a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044ac:	f001 bdf6 	b.w	800609c <_fflush_r>
 80044b0:	bd10      	pop	{r4, pc}
 80044b2:	bf00      	nop
 80044b4:	20000308 	.word	0x20000308
 80044b8:	20000370 	.word	0x20000370
 80044bc:	200003d8 	.word	0x200003d8

080044c0 <global_stdio_init.part.0>:
 80044c0:	b510      	push	{r4, lr}
 80044c2:	4b0b      	ldr	r3, [pc, #44]	@ (80044f0 <global_stdio_init.part.0+0x30>)
 80044c4:	4c0b      	ldr	r4, [pc, #44]	@ (80044f4 <global_stdio_init.part.0+0x34>)
 80044c6:	4a0c      	ldr	r2, [pc, #48]	@ (80044f8 <global_stdio_init.part.0+0x38>)
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	4620      	mov	r0, r4
 80044cc:	2200      	movs	r2, #0
 80044ce:	2104      	movs	r1, #4
 80044d0:	f7ff ff94 	bl	80043fc <std>
 80044d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80044d8:	2201      	movs	r2, #1
 80044da:	2109      	movs	r1, #9
 80044dc:	f7ff ff8e 	bl	80043fc <std>
 80044e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80044e4:	2202      	movs	r2, #2
 80044e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044ea:	2112      	movs	r1, #18
 80044ec:	f7ff bf86 	b.w	80043fc <std>
 80044f0:	20000440 	.word	0x20000440
 80044f4:	20000308 	.word	0x20000308
 80044f8:	08004469 	.word	0x08004469

080044fc <__sfp_lock_acquire>:
 80044fc:	4801      	ldr	r0, [pc, #4]	@ (8004504 <__sfp_lock_acquire+0x8>)
 80044fe:	f000 b920 	b.w	8004742 <__retarget_lock_acquire_recursive>
 8004502:	bf00      	nop
 8004504:	20000449 	.word	0x20000449

08004508 <__sfp_lock_release>:
 8004508:	4801      	ldr	r0, [pc, #4]	@ (8004510 <__sfp_lock_release+0x8>)
 800450a:	f000 b91b 	b.w	8004744 <__retarget_lock_release_recursive>
 800450e:	bf00      	nop
 8004510:	20000449 	.word	0x20000449

08004514 <__sinit>:
 8004514:	b510      	push	{r4, lr}
 8004516:	4604      	mov	r4, r0
 8004518:	f7ff fff0 	bl	80044fc <__sfp_lock_acquire>
 800451c:	6a23      	ldr	r3, [r4, #32]
 800451e:	b11b      	cbz	r3, 8004528 <__sinit+0x14>
 8004520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004524:	f7ff bff0 	b.w	8004508 <__sfp_lock_release>
 8004528:	4b04      	ldr	r3, [pc, #16]	@ (800453c <__sinit+0x28>)
 800452a:	6223      	str	r3, [r4, #32]
 800452c:	4b04      	ldr	r3, [pc, #16]	@ (8004540 <__sinit+0x2c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1f5      	bne.n	8004520 <__sinit+0xc>
 8004534:	f7ff ffc4 	bl	80044c0 <global_stdio_init.part.0>
 8004538:	e7f2      	b.n	8004520 <__sinit+0xc>
 800453a:	bf00      	nop
 800453c:	08004481 	.word	0x08004481
 8004540:	20000440 	.word	0x20000440

08004544 <_fwalk_sglue>:
 8004544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004548:	4607      	mov	r7, r0
 800454a:	4688      	mov	r8, r1
 800454c:	4614      	mov	r4, r2
 800454e:	2600      	movs	r6, #0
 8004550:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004554:	f1b9 0901 	subs.w	r9, r9, #1
 8004558:	d505      	bpl.n	8004566 <_fwalk_sglue+0x22>
 800455a:	6824      	ldr	r4, [r4, #0]
 800455c:	2c00      	cmp	r4, #0
 800455e:	d1f7      	bne.n	8004550 <_fwalk_sglue+0xc>
 8004560:	4630      	mov	r0, r6
 8004562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004566:	89ab      	ldrh	r3, [r5, #12]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d907      	bls.n	800457c <_fwalk_sglue+0x38>
 800456c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004570:	3301      	adds	r3, #1
 8004572:	d003      	beq.n	800457c <_fwalk_sglue+0x38>
 8004574:	4629      	mov	r1, r5
 8004576:	4638      	mov	r0, r7
 8004578:	47c0      	blx	r8
 800457a:	4306      	orrs	r6, r0
 800457c:	3568      	adds	r5, #104	@ 0x68
 800457e:	e7e9      	b.n	8004554 <_fwalk_sglue+0x10>

08004580 <siprintf>:
 8004580:	b40e      	push	{r1, r2, r3}
 8004582:	b500      	push	{lr}
 8004584:	b09c      	sub	sp, #112	@ 0x70
 8004586:	ab1d      	add	r3, sp, #116	@ 0x74
 8004588:	9002      	str	r0, [sp, #8]
 800458a:	9006      	str	r0, [sp, #24]
 800458c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004590:	4809      	ldr	r0, [pc, #36]	@ (80045b8 <siprintf+0x38>)
 8004592:	9107      	str	r1, [sp, #28]
 8004594:	9104      	str	r1, [sp, #16]
 8004596:	4909      	ldr	r1, [pc, #36]	@ (80045bc <siprintf+0x3c>)
 8004598:	f853 2b04 	ldr.w	r2, [r3], #4
 800459c:	9105      	str	r1, [sp, #20]
 800459e:	6800      	ldr	r0, [r0, #0]
 80045a0:	9301      	str	r3, [sp, #4]
 80045a2:	a902      	add	r1, sp, #8
 80045a4:	f001 fbfa 	bl	8005d9c <_svfiprintf_r>
 80045a8:	9b02      	ldr	r3, [sp, #8]
 80045aa:	2200      	movs	r2, #0
 80045ac:	701a      	strb	r2, [r3, #0]
 80045ae:	b01c      	add	sp, #112	@ 0x70
 80045b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80045b4:	b003      	add	sp, #12
 80045b6:	4770      	bx	lr
 80045b8:	20000018 	.word	0x20000018
 80045bc:	ffff0208 	.word	0xffff0208

080045c0 <__sread>:
 80045c0:	b510      	push	{r4, lr}
 80045c2:	460c      	mov	r4, r1
 80045c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045c8:	f000 f86c 	bl	80046a4 <_read_r>
 80045cc:	2800      	cmp	r0, #0
 80045ce:	bfab      	itete	ge
 80045d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80045d2:	89a3      	ldrhlt	r3, [r4, #12]
 80045d4:	181b      	addge	r3, r3, r0
 80045d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80045da:	bfac      	ite	ge
 80045dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80045de:	81a3      	strhlt	r3, [r4, #12]
 80045e0:	bd10      	pop	{r4, pc}

080045e2 <__swrite>:
 80045e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045e6:	461f      	mov	r7, r3
 80045e8:	898b      	ldrh	r3, [r1, #12]
 80045ea:	05db      	lsls	r3, r3, #23
 80045ec:	4605      	mov	r5, r0
 80045ee:	460c      	mov	r4, r1
 80045f0:	4616      	mov	r6, r2
 80045f2:	d505      	bpl.n	8004600 <__swrite+0x1e>
 80045f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045f8:	2302      	movs	r3, #2
 80045fa:	2200      	movs	r2, #0
 80045fc:	f000 f840 	bl	8004680 <_lseek_r>
 8004600:	89a3      	ldrh	r3, [r4, #12]
 8004602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004606:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800460a:	81a3      	strh	r3, [r4, #12]
 800460c:	4632      	mov	r2, r6
 800460e:	463b      	mov	r3, r7
 8004610:	4628      	mov	r0, r5
 8004612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004616:	f000 b857 	b.w	80046c8 <_write_r>

0800461a <__sseek>:
 800461a:	b510      	push	{r4, lr}
 800461c:	460c      	mov	r4, r1
 800461e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004622:	f000 f82d 	bl	8004680 <_lseek_r>
 8004626:	1c43      	adds	r3, r0, #1
 8004628:	89a3      	ldrh	r3, [r4, #12]
 800462a:	bf15      	itete	ne
 800462c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800462e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004632:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004636:	81a3      	strheq	r3, [r4, #12]
 8004638:	bf18      	it	ne
 800463a:	81a3      	strhne	r3, [r4, #12]
 800463c:	bd10      	pop	{r4, pc}

0800463e <__sclose>:
 800463e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004642:	f000 b80d 	b.w	8004660 <_close_r>

08004646 <memset>:
 8004646:	4402      	add	r2, r0
 8004648:	4603      	mov	r3, r0
 800464a:	4293      	cmp	r3, r2
 800464c:	d100      	bne.n	8004650 <memset+0xa>
 800464e:	4770      	bx	lr
 8004650:	f803 1b01 	strb.w	r1, [r3], #1
 8004654:	e7f9      	b.n	800464a <memset+0x4>
	...

08004658 <_localeconv_r>:
 8004658:	4800      	ldr	r0, [pc, #0]	@ (800465c <_localeconv_r+0x4>)
 800465a:	4770      	bx	lr
 800465c:	20000158 	.word	0x20000158

08004660 <_close_r>:
 8004660:	b538      	push	{r3, r4, r5, lr}
 8004662:	4d06      	ldr	r5, [pc, #24]	@ (800467c <_close_r+0x1c>)
 8004664:	2300      	movs	r3, #0
 8004666:	4604      	mov	r4, r0
 8004668:	4608      	mov	r0, r1
 800466a:	602b      	str	r3, [r5, #0]
 800466c:	f7fd f981 	bl	8001972 <_close>
 8004670:	1c43      	adds	r3, r0, #1
 8004672:	d102      	bne.n	800467a <_close_r+0x1a>
 8004674:	682b      	ldr	r3, [r5, #0]
 8004676:	b103      	cbz	r3, 800467a <_close_r+0x1a>
 8004678:	6023      	str	r3, [r4, #0]
 800467a:	bd38      	pop	{r3, r4, r5, pc}
 800467c:	20000444 	.word	0x20000444

08004680 <_lseek_r>:
 8004680:	b538      	push	{r3, r4, r5, lr}
 8004682:	4d07      	ldr	r5, [pc, #28]	@ (80046a0 <_lseek_r+0x20>)
 8004684:	4604      	mov	r4, r0
 8004686:	4608      	mov	r0, r1
 8004688:	4611      	mov	r1, r2
 800468a:	2200      	movs	r2, #0
 800468c:	602a      	str	r2, [r5, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	f7fd f996 	bl	80019c0 <_lseek>
 8004694:	1c43      	adds	r3, r0, #1
 8004696:	d102      	bne.n	800469e <_lseek_r+0x1e>
 8004698:	682b      	ldr	r3, [r5, #0]
 800469a:	b103      	cbz	r3, 800469e <_lseek_r+0x1e>
 800469c:	6023      	str	r3, [r4, #0]
 800469e:	bd38      	pop	{r3, r4, r5, pc}
 80046a0:	20000444 	.word	0x20000444

080046a4 <_read_r>:
 80046a4:	b538      	push	{r3, r4, r5, lr}
 80046a6:	4d07      	ldr	r5, [pc, #28]	@ (80046c4 <_read_r+0x20>)
 80046a8:	4604      	mov	r4, r0
 80046aa:	4608      	mov	r0, r1
 80046ac:	4611      	mov	r1, r2
 80046ae:	2200      	movs	r2, #0
 80046b0:	602a      	str	r2, [r5, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	f7fd f924 	bl	8001900 <_read>
 80046b8:	1c43      	adds	r3, r0, #1
 80046ba:	d102      	bne.n	80046c2 <_read_r+0x1e>
 80046bc:	682b      	ldr	r3, [r5, #0]
 80046be:	b103      	cbz	r3, 80046c2 <_read_r+0x1e>
 80046c0:	6023      	str	r3, [r4, #0]
 80046c2:	bd38      	pop	{r3, r4, r5, pc}
 80046c4:	20000444 	.word	0x20000444

080046c8 <_write_r>:
 80046c8:	b538      	push	{r3, r4, r5, lr}
 80046ca:	4d07      	ldr	r5, [pc, #28]	@ (80046e8 <_write_r+0x20>)
 80046cc:	4604      	mov	r4, r0
 80046ce:	4608      	mov	r0, r1
 80046d0:	4611      	mov	r1, r2
 80046d2:	2200      	movs	r2, #0
 80046d4:	602a      	str	r2, [r5, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	f7fd f92f 	bl	800193a <_write>
 80046dc:	1c43      	adds	r3, r0, #1
 80046de:	d102      	bne.n	80046e6 <_write_r+0x1e>
 80046e0:	682b      	ldr	r3, [r5, #0]
 80046e2:	b103      	cbz	r3, 80046e6 <_write_r+0x1e>
 80046e4:	6023      	str	r3, [r4, #0]
 80046e6:	bd38      	pop	{r3, r4, r5, pc}
 80046e8:	20000444 	.word	0x20000444

080046ec <__errno>:
 80046ec:	4b01      	ldr	r3, [pc, #4]	@ (80046f4 <__errno+0x8>)
 80046ee:	6818      	ldr	r0, [r3, #0]
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	20000018 	.word	0x20000018

080046f8 <__libc_init_array>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	4d0d      	ldr	r5, [pc, #52]	@ (8004730 <__libc_init_array+0x38>)
 80046fc:	4c0d      	ldr	r4, [pc, #52]	@ (8004734 <__libc_init_array+0x3c>)
 80046fe:	1b64      	subs	r4, r4, r5
 8004700:	10a4      	asrs	r4, r4, #2
 8004702:	2600      	movs	r6, #0
 8004704:	42a6      	cmp	r6, r4
 8004706:	d109      	bne.n	800471c <__libc_init_array+0x24>
 8004708:	4d0b      	ldr	r5, [pc, #44]	@ (8004738 <__libc_init_array+0x40>)
 800470a:	4c0c      	ldr	r4, [pc, #48]	@ (800473c <__libc_init_array+0x44>)
 800470c:	f003 fa4e 	bl	8007bac <_init>
 8004710:	1b64      	subs	r4, r4, r5
 8004712:	10a4      	asrs	r4, r4, #2
 8004714:	2600      	movs	r6, #0
 8004716:	42a6      	cmp	r6, r4
 8004718:	d105      	bne.n	8004726 <__libc_init_array+0x2e>
 800471a:	bd70      	pop	{r4, r5, r6, pc}
 800471c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004720:	4798      	blx	r3
 8004722:	3601      	adds	r6, #1
 8004724:	e7ee      	b.n	8004704 <__libc_init_array+0xc>
 8004726:	f855 3b04 	ldr.w	r3, [r5], #4
 800472a:	4798      	blx	r3
 800472c:	3601      	adds	r6, #1
 800472e:	e7f2      	b.n	8004716 <__libc_init_array+0x1e>
 8004730:	08007fc0 	.word	0x08007fc0
 8004734:	08007fc0 	.word	0x08007fc0
 8004738:	08007fc0 	.word	0x08007fc0
 800473c:	08007fc4 	.word	0x08007fc4

08004740 <__retarget_lock_init_recursive>:
 8004740:	4770      	bx	lr

08004742 <__retarget_lock_acquire_recursive>:
 8004742:	4770      	bx	lr

08004744 <__retarget_lock_release_recursive>:
 8004744:	4770      	bx	lr

08004746 <quorem>:
 8004746:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800474a:	6903      	ldr	r3, [r0, #16]
 800474c:	690c      	ldr	r4, [r1, #16]
 800474e:	42a3      	cmp	r3, r4
 8004750:	4607      	mov	r7, r0
 8004752:	db7e      	blt.n	8004852 <quorem+0x10c>
 8004754:	3c01      	subs	r4, #1
 8004756:	f101 0814 	add.w	r8, r1, #20
 800475a:	00a3      	lsls	r3, r4, #2
 800475c:	f100 0514 	add.w	r5, r0, #20
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004766:	9301      	str	r3, [sp, #4]
 8004768:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800476c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004770:	3301      	adds	r3, #1
 8004772:	429a      	cmp	r2, r3
 8004774:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004778:	fbb2 f6f3 	udiv	r6, r2, r3
 800477c:	d32e      	bcc.n	80047dc <quorem+0x96>
 800477e:	f04f 0a00 	mov.w	sl, #0
 8004782:	46c4      	mov	ip, r8
 8004784:	46ae      	mov	lr, r5
 8004786:	46d3      	mov	fp, sl
 8004788:	f85c 3b04 	ldr.w	r3, [ip], #4
 800478c:	b298      	uxth	r0, r3
 800478e:	fb06 a000 	mla	r0, r6, r0, sl
 8004792:	0c02      	lsrs	r2, r0, #16
 8004794:	0c1b      	lsrs	r3, r3, #16
 8004796:	fb06 2303 	mla	r3, r6, r3, r2
 800479a:	f8de 2000 	ldr.w	r2, [lr]
 800479e:	b280      	uxth	r0, r0
 80047a0:	b292      	uxth	r2, r2
 80047a2:	1a12      	subs	r2, r2, r0
 80047a4:	445a      	add	r2, fp
 80047a6:	f8de 0000 	ldr.w	r0, [lr]
 80047aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80047b4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80047b8:	b292      	uxth	r2, r2
 80047ba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80047be:	45e1      	cmp	r9, ip
 80047c0:	f84e 2b04 	str.w	r2, [lr], #4
 80047c4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80047c8:	d2de      	bcs.n	8004788 <quorem+0x42>
 80047ca:	9b00      	ldr	r3, [sp, #0]
 80047cc:	58eb      	ldr	r3, [r5, r3]
 80047ce:	b92b      	cbnz	r3, 80047dc <quorem+0x96>
 80047d0:	9b01      	ldr	r3, [sp, #4]
 80047d2:	3b04      	subs	r3, #4
 80047d4:	429d      	cmp	r5, r3
 80047d6:	461a      	mov	r2, r3
 80047d8:	d32f      	bcc.n	800483a <quorem+0xf4>
 80047da:	613c      	str	r4, [r7, #16]
 80047dc:	4638      	mov	r0, r7
 80047de:	f001 f979 	bl	8005ad4 <__mcmp>
 80047e2:	2800      	cmp	r0, #0
 80047e4:	db25      	blt.n	8004832 <quorem+0xec>
 80047e6:	4629      	mov	r1, r5
 80047e8:	2000      	movs	r0, #0
 80047ea:	f858 2b04 	ldr.w	r2, [r8], #4
 80047ee:	f8d1 c000 	ldr.w	ip, [r1]
 80047f2:	fa1f fe82 	uxth.w	lr, r2
 80047f6:	fa1f f38c 	uxth.w	r3, ip
 80047fa:	eba3 030e 	sub.w	r3, r3, lr
 80047fe:	4403      	add	r3, r0
 8004800:	0c12      	lsrs	r2, r2, #16
 8004802:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004806:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800480a:	b29b      	uxth	r3, r3
 800480c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004810:	45c1      	cmp	r9, r8
 8004812:	f841 3b04 	str.w	r3, [r1], #4
 8004816:	ea4f 4022 	mov.w	r0, r2, asr #16
 800481a:	d2e6      	bcs.n	80047ea <quorem+0xa4>
 800481c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004820:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004824:	b922      	cbnz	r2, 8004830 <quorem+0xea>
 8004826:	3b04      	subs	r3, #4
 8004828:	429d      	cmp	r5, r3
 800482a:	461a      	mov	r2, r3
 800482c:	d30b      	bcc.n	8004846 <quorem+0x100>
 800482e:	613c      	str	r4, [r7, #16]
 8004830:	3601      	adds	r6, #1
 8004832:	4630      	mov	r0, r6
 8004834:	b003      	add	sp, #12
 8004836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	3b04      	subs	r3, #4
 800483e:	2a00      	cmp	r2, #0
 8004840:	d1cb      	bne.n	80047da <quorem+0x94>
 8004842:	3c01      	subs	r4, #1
 8004844:	e7c6      	b.n	80047d4 <quorem+0x8e>
 8004846:	6812      	ldr	r2, [r2, #0]
 8004848:	3b04      	subs	r3, #4
 800484a:	2a00      	cmp	r2, #0
 800484c:	d1ef      	bne.n	800482e <quorem+0xe8>
 800484e:	3c01      	subs	r4, #1
 8004850:	e7ea      	b.n	8004828 <quorem+0xe2>
 8004852:	2000      	movs	r0, #0
 8004854:	e7ee      	b.n	8004834 <quorem+0xee>
	...

08004858 <_dtoa_r>:
 8004858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800485c:	69c7      	ldr	r7, [r0, #28]
 800485e:	b099      	sub	sp, #100	@ 0x64
 8004860:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004864:	ec55 4b10 	vmov	r4, r5, d0
 8004868:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800486a:	9109      	str	r1, [sp, #36]	@ 0x24
 800486c:	4683      	mov	fp, r0
 800486e:	920e      	str	r2, [sp, #56]	@ 0x38
 8004870:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004872:	b97f      	cbnz	r7, 8004894 <_dtoa_r+0x3c>
 8004874:	2010      	movs	r0, #16
 8004876:	f000 fdfd 	bl	8005474 <malloc>
 800487a:	4602      	mov	r2, r0
 800487c:	f8cb 001c 	str.w	r0, [fp, #28]
 8004880:	b920      	cbnz	r0, 800488c <_dtoa_r+0x34>
 8004882:	4ba7      	ldr	r3, [pc, #668]	@ (8004b20 <_dtoa_r+0x2c8>)
 8004884:	21ef      	movs	r1, #239	@ 0xef
 8004886:	48a7      	ldr	r0, [pc, #668]	@ (8004b24 <_dtoa_r+0x2cc>)
 8004888:	f001 fc68 	bl	800615c <__assert_func>
 800488c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004890:	6007      	str	r7, [r0, #0]
 8004892:	60c7      	str	r7, [r0, #12]
 8004894:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004898:	6819      	ldr	r1, [r3, #0]
 800489a:	b159      	cbz	r1, 80048b4 <_dtoa_r+0x5c>
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	604a      	str	r2, [r1, #4]
 80048a0:	2301      	movs	r3, #1
 80048a2:	4093      	lsls	r3, r2
 80048a4:	608b      	str	r3, [r1, #8]
 80048a6:	4658      	mov	r0, fp
 80048a8:	f000 feda 	bl	8005660 <_Bfree>
 80048ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	1e2b      	subs	r3, r5, #0
 80048b6:	bfb9      	ittee	lt
 80048b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80048bc:	9303      	strlt	r3, [sp, #12]
 80048be:	2300      	movge	r3, #0
 80048c0:	6033      	strge	r3, [r6, #0]
 80048c2:	9f03      	ldr	r7, [sp, #12]
 80048c4:	4b98      	ldr	r3, [pc, #608]	@ (8004b28 <_dtoa_r+0x2d0>)
 80048c6:	bfbc      	itt	lt
 80048c8:	2201      	movlt	r2, #1
 80048ca:	6032      	strlt	r2, [r6, #0]
 80048cc:	43bb      	bics	r3, r7
 80048ce:	d112      	bne.n	80048f6 <_dtoa_r+0x9e>
 80048d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80048d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80048d6:	6013      	str	r3, [r2, #0]
 80048d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80048dc:	4323      	orrs	r3, r4
 80048de:	f000 854d 	beq.w	800537c <_dtoa_r+0xb24>
 80048e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80048e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004b3c <_dtoa_r+0x2e4>
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 854f 	beq.w	800538c <_dtoa_r+0xb34>
 80048ee:	f10a 0303 	add.w	r3, sl, #3
 80048f2:	f000 bd49 	b.w	8005388 <_dtoa_r+0xb30>
 80048f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80048fa:	2200      	movs	r2, #0
 80048fc:	ec51 0b17 	vmov	r0, r1, d7
 8004900:	2300      	movs	r3, #0
 8004902:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004906:	f7fc f8ef 	bl	8000ae8 <__aeabi_dcmpeq>
 800490a:	4680      	mov	r8, r0
 800490c:	b158      	cbz	r0, 8004926 <_dtoa_r+0xce>
 800490e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004910:	2301      	movs	r3, #1
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004916:	b113      	cbz	r3, 800491e <_dtoa_r+0xc6>
 8004918:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800491a:	4b84      	ldr	r3, [pc, #528]	@ (8004b2c <_dtoa_r+0x2d4>)
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004b40 <_dtoa_r+0x2e8>
 8004922:	f000 bd33 	b.w	800538c <_dtoa_r+0xb34>
 8004926:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800492a:	aa16      	add	r2, sp, #88	@ 0x58
 800492c:	a917      	add	r1, sp, #92	@ 0x5c
 800492e:	4658      	mov	r0, fp
 8004930:	f001 f980 	bl	8005c34 <__d2b>
 8004934:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004938:	4681      	mov	r9, r0
 800493a:	2e00      	cmp	r6, #0
 800493c:	d077      	beq.n	8004a2e <_dtoa_r+0x1d6>
 800493e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004940:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004948:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800494c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004950:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004954:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004958:	4619      	mov	r1, r3
 800495a:	2200      	movs	r2, #0
 800495c:	4b74      	ldr	r3, [pc, #464]	@ (8004b30 <_dtoa_r+0x2d8>)
 800495e:	f7fb fca3 	bl	80002a8 <__aeabi_dsub>
 8004962:	a369      	add	r3, pc, #420	@ (adr r3, 8004b08 <_dtoa_r+0x2b0>)
 8004964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004968:	f7fb fe56 	bl	8000618 <__aeabi_dmul>
 800496c:	a368      	add	r3, pc, #416	@ (adr r3, 8004b10 <_dtoa_r+0x2b8>)
 800496e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004972:	f7fb fc9b 	bl	80002ac <__adddf3>
 8004976:	4604      	mov	r4, r0
 8004978:	4630      	mov	r0, r6
 800497a:	460d      	mov	r5, r1
 800497c:	f7fb fde2 	bl	8000544 <__aeabi_i2d>
 8004980:	a365      	add	r3, pc, #404	@ (adr r3, 8004b18 <_dtoa_r+0x2c0>)
 8004982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004986:	f7fb fe47 	bl	8000618 <__aeabi_dmul>
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	4620      	mov	r0, r4
 8004990:	4629      	mov	r1, r5
 8004992:	f7fb fc8b 	bl	80002ac <__adddf3>
 8004996:	4604      	mov	r4, r0
 8004998:	460d      	mov	r5, r1
 800499a:	f7fc f8ed 	bl	8000b78 <__aeabi_d2iz>
 800499e:	2200      	movs	r2, #0
 80049a0:	4607      	mov	r7, r0
 80049a2:	2300      	movs	r3, #0
 80049a4:	4620      	mov	r0, r4
 80049a6:	4629      	mov	r1, r5
 80049a8:	f7fc f8a8 	bl	8000afc <__aeabi_dcmplt>
 80049ac:	b140      	cbz	r0, 80049c0 <_dtoa_r+0x168>
 80049ae:	4638      	mov	r0, r7
 80049b0:	f7fb fdc8 	bl	8000544 <__aeabi_i2d>
 80049b4:	4622      	mov	r2, r4
 80049b6:	462b      	mov	r3, r5
 80049b8:	f7fc f896 	bl	8000ae8 <__aeabi_dcmpeq>
 80049bc:	b900      	cbnz	r0, 80049c0 <_dtoa_r+0x168>
 80049be:	3f01      	subs	r7, #1
 80049c0:	2f16      	cmp	r7, #22
 80049c2:	d851      	bhi.n	8004a68 <_dtoa_r+0x210>
 80049c4:	4b5b      	ldr	r3, [pc, #364]	@ (8004b34 <_dtoa_r+0x2dc>)
 80049c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80049ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80049d2:	f7fc f893 	bl	8000afc <__aeabi_dcmplt>
 80049d6:	2800      	cmp	r0, #0
 80049d8:	d048      	beq.n	8004a6c <_dtoa_r+0x214>
 80049da:	3f01      	subs	r7, #1
 80049dc:	2300      	movs	r3, #0
 80049de:	9312      	str	r3, [sp, #72]	@ 0x48
 80049e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80049e2:	1b9b      	subs	r3, r3, r6
 80049e4:	1e5a      	subs	r2, r3, #1
 80049e6:	bf44      	itt	mi
 80049e8:	f1c3 0801 	rsbmi	r8, r3, #1
 80049ec:	2300      	movmi	r3, #0
 80049ee:	9208      	str	r2, [sp, #32]
 80049f0:	bf54      	ite	pl
 80049f2:	f04f 0800 	movpl.w	r8, #0
 80049f6:	9308      	strmi	r3, [sp, #32]
 80049f8:	2f00      	cmp	r7, #0
 80049fa:	db39      	blt.n	8004a70 <_dtoa_r+0x218>
 80049fc:	9b08      	ldr	r3, [sp, #32]
 80049fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004a00:	443b      	add	r3, r7
 8004a02:	9308      	str	r3, [sp, #32]
 8004a04:	2300      	movs	r3, #0
 8004a06:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a0a:	2b09      	cmp	r3, #9
 8004a0c:	d864      	bhi.n	8004ad8 <_dtoa_r+0x280>
 8004a0e:	2b05      	cmp	r3, #5
 8004a10:	bfc4      	itt	gt
 8004a12:	3b04      	subgt	r3, #4
 8004a14:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a18:	f1a3 0302 	sub.w	r3, r3, #2
 8004a1c:	bfcc      	ite	gt
 8004a1e:	2400      	movgt	r4, #0
 8004a20:	2401      	movle	r4, #1
 8004a22:	2b03      	cmp	r3, #3
 8004a24:	d863      	bhi.n	8004aee <_dtoa_r+0x296>
 8004a26:	e8df f003 	tbb	[pc, r3]
 8004a2a:	372a      	.short	0x372a
 8004a2c:	5535      	.short	0x5535
 8004a2e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004a32:	441e      	add	r6, r3
 8004a34:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004a38:	2b20      	cmp	r3, #32
 8004a3a:	bfc1      	itttt	gt
 8004a3c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004a40:	409f      	lslgt	r7, r3
 8004a42:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004a46:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004a4a:	bfd6      	itet	le
 8004a4c:	f1c3 0320 	rsble	r3, r3, #32
 8004a50:	ea47 0003 	orrgt.w	r0, r7, r3
 8004a54:	fa04 f003 	lslle.w	r0, r4, r3
 8004a58:	f7fb fd64 	bl	8000524 <__aeabi_ui2d>
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004a62:	3e01      	subs	r6, #1
 8004a64:	9214      	str	r2, [sp, #80]	@ 0x50
 8004a66:	e777      	b.n	8004958 <_dtoa_r+0x100>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e7b8      	b.n	80049de <_dtoa_r+0x186>
 8004a6c:	9012      	str	r0, [sp, #72]	@ 0x48
 8004a6e:	e7b7      	b.n	80049e0 <_dtoa_r+0x188>
 8004a70:	427b      	negs	r3, r7
 8004a72:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a74:	2300      	movs	r3, #0
 8004a76:	eba8 0807 	sub.w	r8, r8, r7
 8004a7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004a7c:	e7c4      	b.n	8004a08 <_dtoa_r+0x1b0>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	dc35      	bgt.n	8004af4 <_dtoa_r+0x29c>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	9307      	str	r3, [sp, #28]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	920e      	str	r2, [sp, #56]	@ 0x38
 8004a92:	e00b      	b.n	8004aac <_dtoa_r+0x254>
 8004a94:	2301      	movs	r3, #1
 8004a96:	e7f3      	b.n	8004a80 <_dtoa_r+0x228>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a9e:	18fb      	adds	r3, r7, r3
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	9307      	str	r3, [sp, #28]
 8004aa8:	bfb8      	it	lt
 8004aaa:	2301      	movlt	r3, #1
 8004aac:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	2204      	movs	r2, #4
 8004ab4:	f102 0514 	add.w	r5, r2, #20
 8004ab8:	429d      	cmp	r5, r3
 8004aba:	d91f      	bls.n	8004afc <_dtoa_r+0x2a4>
 8004abc:	6041      	str	r1, [r0, #4]
 8004abe:	4658      	mov	r0, fp
 8004ac0:	f000 fd8e 	bl	80055e0 <_Balloc>
 8004ac4:	4682      	mov	sl, r0
 8004ac6:	2800      	cmp	r0, #0
 8004ac8:	d13c      	bne.n	8004b44 <_dtoa_r+0x2ec>
 8004aca:	4b1b      	ldr	r3, [pc, #108]	@ (8004b38 <_dtoa_r+0x2e0>)
 8004acc:	4602      	mov	r2, r0
 8004ace:	f240 11af 	movw	r1, #431	@ 0x1af
 8004ad2:	e6d8      	b.n	8004886 <_dtoa_r+0x2e>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e7e0      	b.n	8004a9a <_dtoa_r+0x242>
 8004ad8:	2401      	movs	r4, #1
 8004ada:	2300      	movs	r3, #0
 8004adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ade:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	9307      	str	r3, [sp, #28]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	2312      	movs	r3, #18
 8004aec:	e7d0      	b.n	8004a90 <_dtoa_r+0x238>
 8004aee:	2301      	movs	r3, #1
 8004af0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004af2:	e7f5      	b.n	8004ae0 <_dtoa_r+0x288>
 8004af4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	9307      	str	r3, [sp, #28]
 8004afa:	e7d7      	b.n	8004aac <_dtoa_r+0x254>
 8004afc:	3101      	adds	r1, #1
 8004afe:	0052      	lsls	r2, r2, #1
 8004b00:	e7d8      	b.n	8004ab4 <_dtoa_r+0x25c>
 8004b02:	bf00      	nop
 8004b04:	f3af 8000 	nop.w
 8004b08:	636f4361 	.word	0x636f4361
 8004b0c:	3fd287a7 	.word	0x3fd287a7
 8004b10:	8b60c8b3 	.word	0x8b60c8b3
 8004b14:	3fc68a28 	.word	0x3fc68a28
 8004b18:	509f79fb 	.word	0x509f79fb
 8004b1c:	3fd34413 	.word	0x3fd34413
 8004b20:	08007c55 	.word	0x08007c55
 8004b24:	08007c6c 	.word	0x08007c6c
 8004b28:	7ff00000 	.word	0x7ff00000
 8004b2c:	08007c25 	.word	0x08007c25
 8004b30:	3ff80000 	.word	0x3ff80000
 8004b34:	08007d68 	.word	0x08007d68
 8004b38:	08007cc4 	.word	0x08007cc4
 8004b3c:	08007c51 	.word	0x08007c51
 8004b40:	08007c24 	.word	0x08007c24
 8004b44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004b48:	6018      	str	r0, [r3, #0]
 8004b4a:	9b07      	ldr	r3, [sp, #28]
 8004b4c:	2b0e      	cmp	r3, #14
 8004b4e:	f200 80a4 	bhi.w	8004c9a <_dtoa_r+0x442>
 8004b52:	2c00      	cmp	r4, #0
 8004b54:	f000 80a1 	beq.w	8004c9a <_dtoa_r+0x442>
 8004b58:	2f00      	cmp	r7, #0
 8004b5a:	dd33      	ble.n	8004bc4 <_dtoa_r+0x36c>
 8004b5c:	4bad      	ldr	r3, [pc, #692]	@ (8004e14 <_dtoa_r+0x5bc>)
 8004b5e:	f007 020f 	and.w	r2, r7, #15
 8004b62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b66:	ed93 7b00 	vldr	d7, [r3]
 8004b6a:	05f8      	lsls	r0, r7, #23
 8004b6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004b70:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004b74:	d516      	bpl.n	8004ba4 <_dtoa_r+0x34c>
 8004b76:	4ba8      	ldr	r3, [pc, #672]	@ (8004e18 <_dtoa_r+0x5c0>)
 8004b78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b80:	f7fb fe74 	bl	800086c <__aeabi_ddiv>
 8004b84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b88:	f004 040f 	and.w	r4, r4, #15
 8004b8c:	2603      	movs	r6, #3
 8004b8e:	4da2      	ldr	r5, [pc, #648]	@ (8004e18 <_dtoa_r+0x5c0>)
 8004b90:	b954      	cbnz	r4, 8004ba8 <_dtoa_r+0x350>
 8004b92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b9a:	f7fb fe67 	bl	800086c <__aeabi_ddiv>
 8004b9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ba2:	e028      	b.n	8004bf6 <_dtoa_r+0x39e>
 8004ba4:	2602      	movs	r6, #2
 8004ba6:	e7f2      	b.n	8004b8e <_dtoa_r+0x336>
 8004ba8:	07e1      	lsls	r1, r4, #31
 8004baa:	d508      	bpl.n	8004bbe <_dtoa_r+0x366>
 8004bac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004bb4:	f7fb fd30 	bl	8000618 <__aeabi_dmul>
 8004bb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bbc:	3601      	adds	r6, #1
 8004bbe:	1064      	asrs	r4, r4, #1
 8004bc0:	3508      	adds	r5, #8
 8004bc2:	e7e5      	b.n	8004b90 <_dtoa_r+0x338>
 8004bc4:	f000 80d2 	beq.w	8004d6c <_dtoa_r+0x514>
 8004bc8:	427c      	negs	r4, r7
 8004bca:	4b92      	ldr	r3, [pc, #584]	@ (8004e14 <_dtoa_r+0x5bc>)
 8004bcc:	4d92      	ldr	r5, [pc, #584]	@ (8004e18 <_dtoa_r+0x5c0>)
 8004bce:	f004 020f 	and.w	r2, r4, #15
 8004bd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004bde:	f7fb fd1b 	bl	8000618 <__aeabi_dmul>
 8004be2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004be6:	1124      	asrs	r4, r4, #4
 8004be8:	2300      	movs	r3, #0
 8004bea:	2602      	movs	r6, #2
 8004bec:	2c00      	cmp	r4, #0
 8004bee:	f040 80b2 	bne.w	8004d56 <_dtoa_r+0x4fe>
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1d3      	bne.n	8004b9e <_dtoa_r+0x346>
 8004bf6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004bf8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 80b7 	beq.w	8004d70 <_dtoa_r+0x518>
 8004c02:	4b86      	ldr	r3, [pc, #536]	@ (8004e1c <_dtoa_r+0x5c4>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	4620      	mov	r0, r4
 8004c08:	4629      	mov	r1, r5
 8004c0a:	f7fb ff77 	bl	8000afc <__aeabi_dcmplt>
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	f000 80ae 	beq.w	8004d70 <_dtoa_r+0x518>
 8004c14:	9b07      	ldr	r3, [sp, #28]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 80aa 	beq.w	8004d70 <_dtoa_r+0x518>
 8004c1c:	9b00      	ldr	r3, [sp, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	dd37      	ble.n	8004c92 <_dtoa_r+0x43a>
 8004c22:	1e7b      	subs	r3, r7, #1
 8004c24:	9304      	str	r3, [sp, #16]
 8004c26:	4620      	mov	r0, r4
 8004c28:	4b7d      	ldr	r3, [pc, #500]	@ (8004e20 <_dtoa_r+0x5c8>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	4629      	mov	r1, r5
 8004c2e:	f7fb fcf3 	bl	8000618 <__aeabi_dmul>
 8004c32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c36:	9c00      	ldr	r4, [sp, #0]
 8004c38:	3601      	adds	r6, #1
 8004c3a:	4630      	mov	r0, r6
 8004c3c:	f7fb fc82 	bl	8000544 <__aeabi_i2d>
 8004c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c44:	f7fb fce8 	bl	8000618 <__aeabi_dmul>
 8004c48:	4b76      	ldr	r3, [pc, #472]	@ (8004e24 <_dtoa_r+0x5cc>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f7fb fb2e 	bl	80002ac <__adddf3>
 8004c50:	4605      	mov	r5, r0
 8004c52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004c56:	2c00      	cmp	r4, #0
 8004c58:	f040 808d 	bne.w	8004d76 <_dtoa_r+0x51e>
 8004c5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c60:	4b71      	ldr	r3, [pc, #452]	@ (8004e28 <_dtoa_r+0x5d0>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	f7fb fb20 	bl	80002a8 <__aeabi_dsub>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c70:	462a      	mov	r2, r5
 8004c72:	4633      	mov	r3, r6
 8004c74:	f7fb ff60 	bl	8000b38 <__aeabi_dcmpgt>
 8004c78:	2800      	cmp	r0, #0
 8004c7a:	f040 828b 	bne.w	8005194 <_dtoa_r+0x93c>
 8004c7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c82:	462a      	mov	r2, r5
 8004c84:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004c88:	f7fb ff38 	bl	8000afc <__aeabi_dcmplt>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	f040 8128 	bne.w	8004ee2 <_dtoa_r+0x68a>
 8004c92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004c96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004c9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f2c0 815a 	blt.w	8004f56 <_dtoa_r+0x6fe>
 8004ca2:	2f0e      	cmp	r7, #14
 8004ca4:	f300 8157 	bgt.w	8004f56 <_dtoa_r+0x6fe>
 8004ca8:	4b5a      	ldr	r3, [pc, #360]	@ (8004e14 <_dtoa_r+0x5bc>)
 8004caa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004cae:	ed93 7b00 	vldr	d7, [r3]
 8004cb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	ed8d 7b00 	vstr	d7, [sp]
 8004cba:	da03      	bge.n	8004cc4 <_dtoa_r+0x46c>
 8004cbc:	9b07      	ldr	r3, [sp, #28]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f340 8101 	ble.w	8004ec6 <_dtoa_r+0x66e>
 8004cc4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004cc8:	4656      	mov	r6, sl
 8004cca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004cce:	4620      	mov	r0, r4
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	f7fb fdcb 	bl	800086c <__aeabi_ddiv>
 8004cd6:	f7fb ff4f 	bl	8000b78 <__aeabi_d2iz>
 8004cda:	4680      	mov	r8, r0
 8004cdc:	f7fb fc32 	bl	8000544 <__aeabi_i2d>
 8004ce0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ce4:	f7fb fc98 	bl	8000618 <__aeabi_dmul>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4620      	mov	r0, r4
 8004cee:	4629      	mov	r1, r5
 8004cf0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004cf4:	f7fb fad8 	bl	80002a8 <__aeabi_dsub>
 8004cf8:	f806 4b01 	strb.w	r4, [r6], #1
 8004cfc:	9d07      	ldr	r5, [sp, #28]
 8004cfe:	eba6 040a 	sub.w	r4, r6, sl
 8004d02:	42a5      	cmp	r5, r4
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	f040 8117 	bne.w	8004f3a <_dtoa_r+0x6e2>
 8004d0c:	f7fb face 	bl	80002ac <__adddf3>
 8004d10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d14:	4604      	mov	r4, r0
 8004d16:	460d      	mov	r5, r1
 8004d18:	f7fb ff0e 	bl	8000b38 <__aeabi_dcmpgt>
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	f040 80f9 	bne.w	8004f14 <_dtoa_r+0x6bc>
 8004d22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d26:	4620      	mov	r0, r4
 8004d28:	4629      	mov	r1, r5
 8004d2a:	f7fb fedd 	bl	8000ae8 <__aeabi_dcmpeq>
 8004d2e:	b118      	cbz	r0, 8004d38 <_dtoa_r+0x4e0>
 8004d30:	f018 0f01 	tst.w	r8, #1
 8004d34:	f040 80ee 	bne.w	8004f14 <_dtoa_r+0x6bc>
 8004d38:	4649      	mov	r1, r9
 8004d3a:	4658      	mov	r0, fp
 8004d3c:	f000 fc90 	bl	8005660 <_Bfree>
 8004d40:	2300      	movs	r3, #0
 8004d42:	7033      	strb	r3, [r6, #0]
 8004d44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004d46:	3701      	adds	r7, #1
 8004d48:	601f      	str	r7, [r3, #0]
 8004d4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 831d 	beq.w	800538c <_dtoa_r+0xb34>
 8004d52:	601e      	str	r6, [r3, #0]
 8004d54:	e31a      	b.n	800538c <_dtoa_r+0xb34>
 8004d56:	07e2      	lsls	r2, r4, #31
 8004d58:	d505      	bpl.n	8004d66 <_dtoa_r+0x50e>
 8004d5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004d5e:	f7fb fc5b 	bl	8000618 <__aeabi_dmul>
 8004d62:	3601      	adds	r6, #1
 8004d64:	2301      	movs	r3, #1
 8004d66:	1064      	asrs	r4, r4, #1
 8004d68:	3508      	adds	r5, #8
 8004d6a:	e73f      	b.n	8004bec <_dtoa_r+0x394>
 8004d6c:	2602      	movs	r6, #2
 8004d6e:	e742      	b.n	8004bf6 <_dtoa_r+0x39e>
 8004d70:	9c07      	ldr	r4, [sp, #28]
 8004d72:	9704      	str	r7, [sp, #16]
 8004d74:	e761      	b.n	8004c3a <_dtoa_r+0x3e2>
 8004d76:	4b27      	ldr	r3, [pc, #156]	@ (8004e14 <_dtoa_r+0x5bc>)
 8004d78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004d7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004d7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d82:	4454      	add	r4, sl
 8004d84:	2900      	cmp	r1, #0
 8004d86:	d053      	beq.n	8004e30 <_dtoa_r+0x5d8>
 8004d88:	4928      	ldr	r1, [pc, #160]	@ (8004e2c <_dtoa_r+0x5d4>)
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	f7fb fd6e 	bl	800086c <__aeabi_ddiv>
 8004d90:	4633      	mov	r3, r6
 8004d92:	462a      	mov	r2, r5
 8004d94:	f7fb fa88 	bl	80002a8 <__aeabi_dsub>
 8004d98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004d9c:	4656      	mov	r6, sl
 8004d9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004da2:	f7fb fee9 	bl	8000b78 <__aeabi_d2iz>
 8004da6:	4605      	mov	r5, r0
 8004da8:	f7fb fbcc 	bl	8000544 <__aeabi_i2d>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004db4:	f7fb fa78 	bl	80002a8 <__aeabi_dsub>
 8004db8:	3530      	adds	r5, #48	@ 0x30
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004dc2:	f806 5b01 	strb.w	r5, [r6], #1
 8004dc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004dca:	f7fb fe97 	bl	8000afc <__aeabi_dcmplt>
 8004dce:	2800      	cmp	r0, #0
 8004dd0:	d171      	bne.n	8004eb6 <_dtoa_r+0x65e>
 8004dd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004dd6:	4911      	ldr	r1, [pc, #68]	@ (8004e1c <_dtoa_r+0x5c4>)
 8004dd8:	2000      	movs	r0, #0
 8004dda:	f7fb fa65 	bl	80002a8 <__aeabi_dsub>
 8004dde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004de2:	f7fb fe8b 	bl	8000afc <__aeabi_dcmplt>
 8004de6:	2800      	cmp	r0, #0
 8004de8:	f040 8095 	bne.w	8004f16 <_dtoa_r+0x6be>
 8004dec:	42a6      	cmp	r6, r4
 8004dee:	f43f af50 	beq.w	8004c92 <_dtoa_r+0x43a>
 8004df2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004df6:	4b0a      	ldr	r3, [pc, #40]	@ (8004e20 <_dtoa_r+0x5c8>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f7fb fc0d 	bl	8000618 <__aeabi_dmul>
 8004dfe:	4b08      	ldr	r3, [pc, #32]	@ (8004e20 <_dtoa_r+0x5c8>)
 8004e00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004e04:	2200      	movs	r2, #0
 8004e06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e0a:	f7fb fc05 	bl	8000618 <__aeabi_dmul>
 8004e0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e12:	e7c4      	b.n	8004d9e <_dtoa_r+0x546>
 8004e14:	08007d68 	.word	0x08007d68
 8004e18:	08007d40 	.word	0x08007d40
 8004e1c:	3ff00000 	.word	0x3ff00000
 8004e20:	40240000 	.word	0x40240000
 8004e24:	401c0000 	.word	0x401c0000
 8004e28:	40140000 	.word	0x40140000
 8004e2c:	3fe00000 	.word	0x3fe00000
 8004e30:	4631      	mov	r1, r6
 8004e32:	4628      	mov	r0, r5
 8004e34:	f7fb fbf0 	bl	8000618 <__aeabi_dmul>
 8004e38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004e3c:	9415      	str	r4, [sp, #84]	@ 0x54
 8004e3e:	4656      	mov	r6, sl
 8004e40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e44:	f7fb fe98 	bl	8000b78 <__aeabi_d2iz>
 8004e48:	4605      	mov	r5, r0
 8004e4a:	f7fb fb7b 	bl	8000544 <__aeabi_i2d>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	460b      	mov	r3, r1
 8004e52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e56:	f7fb fa27 	bl	80002a8 <__aeabi_dsub>
 8004e5a:	3530      	adds	r5, #48	@ 0x30
 8004e5c:	f806 5b01 	strb.w	r5, [r6], #1
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	42a6      	cmp	r6, r4
 8004e66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e6a:	f04f 0200 	mov.w	r2, #0
 8004e6e:	d124      	bne.n	8004eba <_dtoa_r+0x662>
 8004e70:	4bac      	ldr	r3, [pc, #688]	@ (8005124 <_dtoa_r+0x8cc>)
 8004e72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004e76:	f7fb fa19 	bl	80002ac <__adddf3>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e82:	f7fb fe59 	bl	8000b38 <__aeabi_dcmpgt>
 8004e86:	2800      	cmp	r0, #0
 8004e88:	d145      	bne.n	8004f16 <_dtoa_r+0x6be>
 8004e8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004e8e:	49a5      	ldr	r1, [pc, #660]	@ (8005124 <_dtoa_r+0x8cc>)
 8004e90:	2000      	movs	r0, #0
 8004e92:	f7fb fa09 	bl	80002a8 <__aeabi_dsub>
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e9e:	f7fb fe2d 	bl	8000afc <__aeabi_dcmplt>
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	f43f aef5 	beq.w	8004c92 <_dtoa_r+0x43a>
 8004ea8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004eaa:	1e73      	subs	r3, r6, #1
 8004eac:	9315      	str	r3, [sp, #84]	@ 0x54
 8004eae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004eb2:	2b30      	cmp	r3, #48	@ 0x30
 8004eb4:	d0f8      	beq.n	8004ea8 <_dtoa_r+0x650>
 8004eb6:	9f04      	ldr	r7, [sp, #16]
 8004eb8:	e73e      	b.n	8004d38 <_dtoa_r+0x4e0>
 8004eba:	4b9b      	ldr	r3, [pc, #620]	@ (8005128 <_dtoa_r+0x8d0>)
 8004ebc:	f7fb fbac 	bl	8000618 <__aeabi_dmul>
 8004ec0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ec4:	e7bc      	b.n	8004e40 <_dtoa_r+0x5e8>
 8004ec6:	d10c      	bne.n	8004ee2 <_dtoa_r+0x68a>
 8004ec8:	4b98      	ldr	r3, [pc, #608]	@ (800512c <_dtoa_r+0x8d4>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ed0:	f7fb fba2 	bl	8000618 <__aeabi_dmul>
 8004ed4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ed8:	f7fb fe24 	bl	8000b24 <__aeabi_dcmpge>
 8004edc:	2800      	cmp	r0, #0
 8004ede:	f000 8157 	beq.w	8005190 <_dtoa_r+0x938>
 8004ee2:	2400      	movs	r4, #0
 8004ee4:	4625      	mov	r5, r4
 8004ee6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	9304      	str	r3, [sp, #16]
 8004eec:	4656      	mov	r6, sl
 8004eee:	2700      	movs	r7, #0
 8004ef0:	4621      	mov	r1, r4
 8004ef2:	4658      	mov	r0, fp
 8004ef4:	f000 fbb4 	bl	8005660 <_Bfree>
 8004ef8:	2d00      	cmp	r5, #0
 8004efa:	d0dc      	beq.n	8004eb6 <_dtoa_r+0x65e>
 8004efc:	b12f      	cbz	r7, 8004f0a <_dtoa_r+0x6b2>
 8004efe:	42af      	cmp	r7, r5
 8004f00:	d003      	beq.n	8004f0a <_dtoa_r+0x6b2>
 8004f02:	4639      	mov	r1, r7
 8004f04:	4658      	mov	r0, fp
 8004f06:	f000 fbab 	bl	8005660 <_Bfree>
 8004f0a:	4629      	mov	r1, r5
 8004f0c:	4658      	mov	r0, fp
 8004f0e:	f000 fba7 	bl	8005660 <_Bfree>
 8004f12:	e7d0      	b.n	8004eb6 <_dtoa_r+0x65e>
 8004f14:	9704      	str	r7, [sp, #16]
 8004f16:	4633      	mov	r3, r6
 8004f18:	461e      	mov	r6, r3
 8004f1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f1e:	2a39      	cmp	r2, #57	@ 0x39
 8004f20:	d107      	bne.n	8004f32 <_dtoa_r+0x6da>
 8004f22:	459a      	cmp	sl, r3
 8004f24:	d1f8      	bne.n	8004f18 <_dtoa_r+0x6c0>
 8004f26:	9a04      	ldr	r2, [sp, #16]
 8004f28:	3201      	adds	r2, #1
 8004f2a:	9204      	str	r2, [sp, #16]
 8004f2c:	2230      	movs	r2, #48	@ 0x30
 8004f2e:	f88a 2000 	strb.w	r2, [sl]
 8004f32:	781a      	ldrb	r2, [r3, #0]
 8004f34:	3201      	adds	r2, #1
 8004f36:	701a      	strb	r2, [r3, #0]
 8004f38:	e7bd      	b.n	8004eb6 <_dtoa_r+0x65e>
 8004f3a:	4b7b      	ldr	r3, [pc, #492]	@ (8005128 <_dtoa_r+0x8d0>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f7fb fb6b 	bl	8000618 <__aeabi_dmul>
 8004f42:	2200      	movs	r2, #0
 8004f44:	2300      	movs	r3, #0
 8004f46:	4604      	mov	r4, r0
 8004f48:	460d      	mov	r5, r1
 8004f4a:	f7fb fdcd 	bl	8000ae8 <__aeabi_dcmpeq>
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	f43f aebb 	beq.w	8004cca <_dtoa_r+0x472>
 8004f54:	e6f0      	b.n	8004d38 <_dtoa_r+0x4e0>
 8004f56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004f58:	2a00      	cmp	r2, #0
 8004f5a:	f000 80db 	beq.w	8005114 <_dtoa_r+0x8bc>
 8004f5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f60:	2a01      	cmp	r2, #1
 8004f62:	f300 80bf 	bgt.w	80050e4 <_dtoa_r+0x88c>
 8004f66:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004f68:	2a00      	cmp	r2, #0
 8004f6a:	f000 80b7 	beq.w	80050dc <_dtoa_r+0x884>
 8004f6e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004f72:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004f74:	4646      	mov	r6, r8
 8004f76:	9a08      	ldr	r2, [sp, #32]
 8004f78:	2101      	movs	r1, #1
 8004f7a:	441a      	add	r2, r3
 8004f7c:	4658      	mov	r0, fp
 8004f7e:	4498      	add	r8, r3
 8004f80:	9208      	str	r2, [sp, #32]
 8004f82:	f000 fc21 	bl	80057c8 <__i2b>
 8004f86:	4605      	mov	r5, r0
 8004f88:	b15e      	cbz	r6, 8004fa2 <_dtoa_r+0x74a>
 8004f8a:	9b08      	ldr	r3, [sp, #32]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	dd08      	ble.n	8004fa2 <_dtoa_r+0x74a>
 8004f90:	42b3      	cmp	r3, r6
 8004f92:	9a08      	ldr	r2, [sp, #32]
 8004f94:	bfa8      	it	ge
 8004f96:	4633      	movge	r3, r6
 8004f98:	eba8 0803 	sub.w	r8, r8, r3
 8004f9c:	1af6      	subs	r6, r6, r3
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	9308      	str	r3, [sp, #32]
 8004fa2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004fa4:	b1f3      	cbz	r3, 8004fe4 <_dtoa_r+0x78c>
 8004fa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 80b7 	beq.w	800511c <_dtoa_r+0x8c4>
 8004fae:	b18c      	cbz	r4, 8004fd4 <_dtoa_r+0x77c>
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	4622      	mov	r2, r4
 8004fb4:	4658      	mov	r0, fp
 8004fb6:	f000 fcc7 	bl	8005948 <__pow5mult>
 8004fba:	464a      	mov	r2, r9
 8004fbc:	4601      	mov	r1, r0
 8004fbe:	4605      	mov	r5, r0
 8004fc0:	4658      	mov	r0, fp
 8004fc2:	f000 fc17 	bl	80057f4 <__multiply>
 8004fc6:	4649      	mov	r1, r9
 8004fc8:	9004      	str	r0, [sp, #16]
 8004fca:	4658      	mov	r0, fp
 8004fcc:	f000 fb48 	bl	8005660 <_Bfree>
 8004fd0:	9b04      	ldr	r3, [sp, #16]
 8004fd2:	4699      	mov	r9, r3
 8004fd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004fd6:	1b1a      	subs	r2, r3, r4
 8004fd8:	d004      	beq.n	8004fe4 <_dtoa_r+0x78c>
 8004fda:	4649      	mov	r1, r9
 8004fdc:	4658      	mov	r0, fp
 8004fde:	f000 fcb3 	bl	8005948 <__pow5mult>
 8004fe2:	4681      	mov	r9, r0
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	4658      	mov	r0, fp
 8004fe8:	f000 fbee 	bl	80057c8 <__i2b>
 8004fec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004fee:	4604      	mov	r4, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 81cf 	beq.w	8005394 <_dtoa_r+0xb3c>
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	4601      	mov	r1, r0
 8004ffa:	4658      	mov	r0, fp
 8004ffc:	f000 fca4 	bl	8005948 <__pow5mult>
 8005000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005002:	2b01      	cmp	r3, #1
 8005004:	4604      	mov	r4, r0
 8005006:	f300 8095 	bgt.w	8005134 <_dtoa_r+0x8dc>
 800500a:	9b02      	ldr	r3, [sp, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	f040 8087 	bne.w	8005120 <_dtoa_r+0x8c8>
 8005012:	9b03      	ldr	r3, [sp, #12]
 8005014:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005018:	2b00      	cmp	r3, #0
 800501a:	f040 8089 	bne.w	8005130 <_dtoa_r+0x8d8>
 800501e:	9b03      	ldr	r3, [sp, #12]
 8005020:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005024:	0d1b      	lsrs	r3, r3, #20
 8005026:	051b      	lsls	r3, r3, #20
 8005028:	b12b      	cbz	r3, 8005036 <_dtoa_r+0x7de>
 800502a:	9b08      	ldr	r3, [sp, #32]
 800502c:	3301      	adds	r3, #1
 800502e:	9308      	str	r3, [sp, #32]
 8005030:	f108 0801 	add.w	r8, r8, #1
 8005034:	2301      	movs	r3, #1
 8005036:	930a      	str	r3, [sp, #40]	@ 0x28
 8005038:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 81b0 	beq.w	80053a0 <_dtoa_r+0xb48>
 8005040:	6923      	ldr	r3, [r4, #16]
 8005042:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005046:	6918      	ldr	r0, [r3, #16]
 8005048:	f000 fb72 	bl	8005730 <__hi0bits>
 800504c:	f1c0 0020 	rsb	r0, r0, #32
 8005050:	9b08      	ldr	r3, [sp, #32]
 8005052:	4418      	add	r0, r3
 8005054:	f010 001f 	ands.w	r0, r0, #31
 8005058:	d077      	beq.n	800514a <_dtoa_r+0x8f2>
 800505a:	f1c0 0320 	rsb	r3, r0, #32
 800505e:	2b04      	cmp	r3, #4
 8005060:	dd6b      	ble.n	800513a <_dtoa_r+0x8e2>
 8005062:	9b08      	ldr	r3, [sp, #32]
 8005064:	f1c0 001c 	rsb	r0, r0, #28
 8005068:	4403      	add	r3, r0
 800506a:	4480      	add	r8, r0
 800506c:	4406      	add	r6, r0
 800506e:	9308      	str	r3, [sp, #32]
 8005070:	f1b8 0f00 	cmp.w	r8, #0
 8005074:	dd05      	ble.n	8005082 <_dtoa_r+0x82a>
 8005076:	4649      	mov	r1, r9
 8005078:	4642      	mov	r2, r8
 800507a:	4658      	mov	r0, fp
 800507c:	f000 fcbe 	bl	80059fc <__lshift>
 8005080:	4681      	mov	r9, r0
 8005082:	9b08      	ldr	r3, [sp, #32]
 8005084:	2b00      	cmp	r3, #0
 8005086:	dd05      	ble.n	8005094 <_dtoa_r+0x83c>
 8005088:	4621      	mov	r1, r4
 800508a:	461a      	mov	r2, r3
 800508c:	4658      	mov	r0, fp
 800508e:	f000 fcb5 	bl	80059fc <__lshift>
 8005092:	4604      	mov	r4, r0
 8005094:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005096:	2b00      	cmp	r3, #0
 8005098:	d059      	beq.n	800514e <_dtoa_r+0x8f6>
 800509a:	4621      	mov	r1, r4
 800509c:	4648      	mov	r0, r9
 800509e:	f000 fd19 	bl	8005ad4 <__mcmp>
 80050a2:	2800      	cmp	r0, #0
 80050a4:	da53      	bge.n	800514e <_dtoa_r+0x8f6>
 80050a6:	1e7b      	subs	r3, r7, #1
 80050a8:	9304      	str	r3, [sp, #16]
 80050aa:	4649      	mov	r1, r9
 80050ac:	2300      	movs	r3, #0
 80050ae:	220a      	movs	r2, #10
 80050b0:	4658      	mov	r0, fp
 80050b2:	f000 faf7 	bl	80056a4 <__multadd>
 80050b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050b8:	4681      	mov	r9, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 8172 	beq.w	80053a4 <_dtoa_r+0xb4c>
 80050c0:	2300      	movs	r3, #0
 80050c2:	4629      	mov	r1, r5
 80050c4:	220a      	movs	r2, #10
 80050c6:	4658      	mov	r0, fp
 80050c8:	f000 faec 	bl	80056a4 <__multadd>
 80050cc:	9b00      	ldr	r3, [sp, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	4605      	mov	r5, r0
 80050d2:	dc67      	bgt.n	80051a4 <_dtoa_r+0x94c>
 80050d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	dc41      	bgt.n	800515e <_dtoa_r+0x906>
 80050da:	e063      	b.n	80051a4 <_dtoa_r+0x94c>
 80050dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80050de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80050e2:	e746      	b.n	8004f72 <_dtoa_r+0x71a>
 80050e4:	9b07      	ldr	r3, [sp, #28]
 80050e6:	1e5c      	subs	r4, r3, #1
 80050e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050ea:	42a3      	cmp	r3, r4
 80050ec:	bfbf      	itttt	lt
 80050ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80050f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80050f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80050f4:	1ae3      	sublt	r3, r4, r3
 80050f6:	bfb4      	ite	lt
 80050f8:	18d2      	addlt	r2, r2, r3
 80050fa:	1b1c      	subge	r4, r3, r4
 80050fc:	9b07      	ldr	r3, [sp, #28]
 80050fe:	bfbc      	itt	lt
 8005100:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005102:	2400      	movlt	r4, #0
 8005104:	2b00      	cmp	r3, #0
 8005106:	bfb5      	itete	lt
 8005108:	eba8 0603 	sublt.w	r6, r8, r3
 800510c:	9b07      	ldrge	r3, [sp, #28]
 800510e:	2300      	movlt	r3, #0
 8005110:	4646      	movge	r6, r8
 8005112:	e730      	b.n	8004f76 <_dtoa_r+0x71e>
 8005114:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005116:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005118:	4646      	mov	r6, r8
 800511a:	e735      	b.n	8004f88 <_dtoa_r+0x730>
 800511c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800511e:	e75c      	b.n	8004fda <_dtoa_r+0x782>
 8005120:	2300      	movs	r3, #0
 8005122:	e788      	b.n	8005036 <_dtoa_r+0x7de>
 8005124:	3fe00000 	.word	0x3fe00000
 8005128:	40240000 	.word	0x40240000
 800512c:	40140000 	.word	0x40140000
 8005130:	9b02      	ldr	r3, [sp, #8]
 8005132:	e780      	b.n	8005036 <_dtoa_r+0x7de>
 8005134:	2300      	movs	r3, #0
 8005136:	930a      	str	r3, [sp, #40]	@ 0x28
 8005138:	e782      	b.n	8005040 <_dtoa_r+0x7e8>
 800513a:	d099      	beq.n	8005070 <_dtoa_r+0x818>
 800513c:	9a08      	ldr	r2, [sp, #32]
 800513e:	331c      	adds	r3, #28
 8005140:	441a      	add	r2, r3
 8005142:	4498      	add	r8, r3
 8005144:	441e      	add	r6, r3
 8005146:	9208      	str	r2, [sp, #32]
 8005148:	e792      	b.n	8005070 <_dtoa_r+0x818>
 800514a:	4603      	mov	r3, r0
 800514c:	e7f6      	b.n	800513c <_dtoa_r+0x8e4>
 800514e:	9b07      	ldr	r3, [sp, #28]
 8005150:	9704      	str	r7, [sp, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	dc20      	bgt.n	8005198 <_dtoa_r+0x940>
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800515a:	2b02      	cmp	r3, #2
 800515c:	dd1e      	ble.n	800519c <_dtoa_r+0x944>
 800515e:	9b00      	ldr	r3, [sp, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	f47f aec0 	bne.w	8004ee6 <_dtoa_r+0x68e>
 8005166:	4621      	mov	r1, r4
 8005168:	2205      	movs	r2, #5
 800516a:	4658      	mov	r0, fp
 800516c:	f000 fa9a 	bl	80056a4 <__multadd>
 8005170:	4601      	mov	r1, r0
 8005172:	4604      	mov	r4, r0
 8005174:	4648      	mov	r0, r9
 8005176:	f000 fcad 	bl	8005ad4 <__mcmp>
 800517a:	2800      	cmp	r0, #0
 800517c:	f77f aeb3 	ble.w	8004ee6 <_dtoa_r+0x68e>
 8005180:	4656      	mov	r6, sl
 8005182:	2331      	movs	r3, #49	@ 0x31
 8005184:	f806 3b01 	strb.w	r3, [r6], #1
 8005188:	9b04      	ldr	r3, [sp, #16]
 800518a:	3301      	adds	r3, #1
 800518c:	9304      	str	r3, [sp, #16]
 800518e:	e6ae      	b.n	8004eee <_dtoa_r+0x696>
 8005190:	9c07      	ldr	r4, [sp, #28]
 8005192:	9704      	str	r7, [sp, #16]
 8005194:	4625      	mov	r5, r4
 8005196:	e7f3      	b.n	8005180 <_dtoa_r+0x928>
 8005198:	9b07      	ldr	r3, [sp, #28]
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 8104 	beq.w	80053ac <_dtoa_r+0xb54>
 80051a4:	2e00      	cmp	r6, #0
 80051a6:	dd05      	ble.n	80051b4 <_dtoa_r+0x95c>
 80051a8:	4629      	mov	r1, r5
 80051aa:	4632      	mov	r2, r6
 80051ac:	4658      	mov	r0, fp
 80051ae:	f000 fc25 	bl	80059fc <__lshift>
 80051b2:	4605      	mov	r5, r0
 80051b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d05a      	beq.n	8005270 <_dtoa_r+0xa18>
 80051ba:	6869      	ldr	r1, [r5, #4]
 80051bc:	4658      	mov	r0, fp
 80051be:	f000 fa0f 	bl	80055e0 <_Balloc>
 80051c2:	4606      	mov	r6, r0
 80051c4:	b928      	cbnz	r0, 80051d2 <_dtoa_r+0x97a>
 80051c6:	4b84      	ldr	r3, [pc, #528]	@ (80053d8 <_dtoa_r+0xb80>)
 80051c8:	4602      	mov	r2, r0
 80051ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80051ce:	f7ff bb5a 	b.w	8004886 <_dtoa_r+0x2e>
 80051d2:	692a      	ldr	r2, [r5, #16]
 80051d4:	3202      	adds	r2, #2
 80051d6:	0092      	lsls	r2, r2, #2
 80051d8:	f105 010c 	add.w	r1, r5, #12
 80051dc:	300c      	adds	r0, #12
 80051de:	f000 ffaf 	bl	8006140 <memcpy>
 80051e2:	2201      	movs	r2, #1
 80051e4:	4631      	mov	r1, r6
 80051e6:	4658      	mov	r0, fp
 80051e8:	f000 fc08 	bl	80059fc <__lshift>
 80051ec:	f10a 0301 	add.w	r3, sl, #1
 80051f0:	9307      	str	r3, [sp, #28]
 80051f2:	9b00      	ldr	r3, [sp, #0]
 80051f4:	4453      	add	r3, sl
 80051f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051f8:	9b02      	ldr	r3, [sp, #8]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	462f      	mov	r7, r5
 8005200:	930a      	str	r3, [sp, #40]	@ 0x28
 8005202:	4605      	mov	r5, r0
 8005204:	9b07      	ldr	r3, [sp, #28]
 8005206:	4621      	mov	r1, r4
 8005208:	3b01      	subs	r3, #1
 800520a:	4648      	mov	r0, r9
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	f7ff fa9a 	bl	8004746 <quorem>
 8005212:	4639      	mov	r1, r7
 8005214:	9002      	str	r0, [sp, #8]
 8005216:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800521a:	4648      	mov	r0, r9
 800521c:	f000 fc5a 	bl	8005ad4 <__mcmp>
 8005220:	462a      	mov	r2, r5
 8005222:	9008      	str	r0, [sp, #32]
 8005224:	4621      	mov	r1, r4
 8005226:	4658      	mov	r0, fp
 8005228:	f000 fc70 	bl	8005b0c <__mdiff>
 800522c:	68c2      	ldr	r2, [r0, #12]
 800522e:	4606      	mov	r6, r0
 8005230:	bb02      	cbnz	r2, 8005274 <_dtoa_r+0xa1c>
 8005232:	4601      	mov	r1, r0
 8005234:	4648      	mov	r0, r9
 8005236:	f000 fc4d 	bl	8005ad4 <__mcmp>
 800523a:	4602      	mov	r2, r0
 800523c:	4631      	mov	r1, r6
 800523e:	4658      	mov	r0, fp
 8005240:	920e      	str	r2, [sp, #56]	@ 0x38
 8005242:	f000 fa0d 	bl	8005660 <_Bfree>
 8005246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005248:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800524a:	9e07      	ldr	r6, [sp, #28]
 800524c:	ea43 0102 	orr.w	r1, r3, r2
 8005250:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005252:	4319      	orrs	r1, r3
 8005254:	d110      	bne.n	8005278 <_dtoa_r+0xa20>
 8005256:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800525a:	d029      	beq.n	80052b0 <_dtoa_r+0xa58>
 800525c:	9b08      	ldr	r3, [sp, #32]
 800525e:	2b00      	cmp	r3, #0
 8005260:	dd02      	ble.n	8005268 <_dtoa_r+0xa10>
 8005262:	9b02      	ldr	r3, [sp, #8]
 8005264:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005268:	9b00      	ldr	r3, [sp, #0]
 800526a:	f883 8000 	strb.w	r8, [r3]
 800526e:	e63f      	b.n	8004ef0 <_dtoa_r+0x698>
 8005270:	4628      	mov	r0, r5
 8005272:	e7bb      	b.n	80051ec <_dtoa_r+0x994>
 8005274:	2201      	movs	r2, #1
 8005276:	e7e1      	b.n	800523c <_dtoa_r+0x9e4>
 8005278:	9b08      	ldr	r3, [sp, #32]
 800527a:	2b00      	cmp	r3, #0
 800527c:	db04      	blt.n	8005288 <_dtoa_r+0xa30>
 800527e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005280:	430b      	orrs	r3, r1
 8005282:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005284:	430b      	orrs	r3, r1
 8005286:	d120      	bne.n	80052ca <_dtoa_r+0xa72>
 8005288:	2a00      	cmp	r2, #0
 800528a:	dded      	ble.n	8005268 <_dtoa_r+0xa10>
 800528c:	4649      	mov	r1, r9
 800528e:	2201      	movs	r2, #1
 8005290:	4658      	mov	r0, fp
 8005292:	f000 fbb3 	bl	80059fc <__lshift>
 8005296:	4621      	mov	r1, r4
 8005298:	4681      	mov	r9, r0
 800529a:	f000 fc1b 	bl	8005ad4 <__mcmp>
 800529e:	2800      	cmp	r0, #0
 80052a0:	dc03      	bgt.n	80052aa <_dtoa_r+0xa52>
 80052a2:	d1e1      	bne.n	8005268 <_dtoa_r+0xa10>
 80052a4:	f018 0f01 	tst.w	r8, #1
 80052a8:	d0de      	beq.n	8005268 <_dtoa_r+0xa10>
 80052aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80052ae:	d1d8      	bne.n	8005262 <_dtoa_r+0xa0a>
 80052b0:	9a00      	ldr	r2, [sp, #0]
 80052b2:	2339      	movs	r3, #57	@ 0x39
 80052b4:	7013      	strb	r3, [r2, #0]
 80052b6:	4633      	mov	r3, r6
 80052b8:	461e      	mov	r6, r3
 80052ba:	3b01      	subs	r3, #1
 80052bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80052c0:	2a39      	cmp	r2, #57	@ 0x39
 80052c2:	d052      	beq.n	800536a <_dtoa_r+0xb12>
 80052c4:	3201      	adds	r2, #1
 80052c6:	701a      	strb	r2, [r3, #0]
 80052c8:	e612      	b.n	8004ef0 <_dtoa_r+0x698>
 80052ca:	2a00      	cmp	r2, #0
 80052cc:	dd07      	ble.n	80052de <_dtoa_r+0xa86>
 80052ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80052d2:	d0ed      	beq.n	80052b0 <_dtoa_r+0xa58>
 80052d4:	9a00      	ldr	r2, [sp, #0]
 80052d6:	f108 0301 	add.w	r3, r8, #1
 80052da:	7013      	strb	r3, [r2, #0]
 80052dc:	e608      	b.n	8004ef0 <_dtoa_r+0x698>
 80052de:	9b07      	ldr	r3, [sp, #28]
 80052e0:	9a07      	ldr	r2, [sp, #28]
 80052e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80052e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d028      	beq.n	800533e <_dtoa_r+0xae6>
 80052ec:	4649      	mov	r1, r9
 80052ee:	2300      	movs	r3, #0
 80052f0:	220a      	movs	r2, #10
 80052f2:	4658      	mov	r0, fp
 80052f4:	f000 f9d6 	bl	80056a4 <__multadd>
 80052f8:	42af      	cmp	r7, r5
 80052fa:	4681      	mov	r9, r0
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	f04f 020a 	mov.w	r2, #10
 8005304:	4639      	mov	r1, r7
 8005306:	4658      	mov	r0, fp
 8005308:	d107      	bne.n	800531a <_dtoa_r+0xac2>
 800530a:	f000 f9cb 	bl	80056a4 <__multadd>
 800530e:	4607      	mov	r7, r0
 8005310:	4605      	mov	r5, r0
 8005312:	9b07      	ldr	r3, [sp, #28]
 8005314:	3301      	adds	r3, #1
 8005316:	9307      	str	r3, [sp, #28]
 8005318:	e774      	b.n	8005204 <_dtoa_r+0x9ac>
 800531a:	f000 f9c3 	bl	80056a4 <__multadd>
 800531e:	4629      	mov	r1, r5
 8005320:	4607      	mov	r7, r0
 8005322:	2300      	movs	r3, #0
 8005324:	220a      	movs	r2, #10
 8005326:	4658      	mov	r0, fp
 8005328:	f000 f9bc 	bl	80056a4 <__multadd>
 800532c:	4605      	mov	r5, r0
 800532e:	e7f0      	b.n	8005312 <_dtoa_r+0xaba>
 8005330:	9b00      	ldr	r3, [sp, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	bfcc      	ite	gt
 8005336:	461e      	movgt	r6, r3
 8005338:	2601      	movle	r6, #1
 800533a:	4456      	add	r6, sl
 800533c:	2700      	movs	r7, #0
 800533e:	4649      	mov	r1, r9
 8005340:	2201      	movs	r2, #1
 8005342:	4658      	mov	r0, fp
 8005344:	f000 fb5a 	bl	80059fc <__lshift>
 8005348:	4621      	mov	r1, r4
 800534a:	4681      	mov	r9, r0
 800534c:	f000 fbc2 	bl	8005ad4 <__mcmp>
 8005350:	2800      	cmp	r0, #0
 8005352:	dcb0      	bgt.n	80052b6 <_dtoa_r+0xa5e>
 8005354:	d102      	bne.n	800535c <_dtoa_r+0xb04>
 8005356:	f018 0f01 	tst.w	r8, #1
 800535a:	d1ac      	bne.n	80052b6 <_dtoa_r+0xa5e>
 800535c:	4633      	mov	r3, r6
 800535e:	461e      	mov	r6, r3
 8005360:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005364:	2a30      	cmp	r2, #48	@ 0x30
 8005366:	d0fa      	beq.n	800535e <_dtoa_r+0xb06>
 8005368:	e5c2      	b.n	8004ef0 <_dtoa_r+0x698>
 800536a:	459a      	cmp	sl, r3
 800536c:	d1a4      	bne.n	80052b8 <_dtoa_r+0xa60>
 800536e:	9b04      	ldr	r3, [sp, #16]
 8005370:	3301      	adds	r3, #1
 8005372:	9304      	str	r3, [sp, #16]
 8005374:	2331      	movs	r3, #49	@ 0x31
 8005376:	f88a 3000 	strb.w	r3, [sl]
 800537a:	e5b9      	b.n	8004ef0 <_dtoa_r+0x698>
 800537c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800537e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80053dc <_dtoa_r+0xb84>
 8005382:	b11b      	cbz	r3, 800538c <_dtoa_r+0xb34>
 8005384:	f10a 0308 	add.w	r3, sl, #8
 8005388:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	4650      	mov	r0, sl
 800538e:	b019      	add	sp, #100	@ 0x64
 8005390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005396:	2b01      	cmp	r3, #1
 8005398:	f77f ae37 	ble.w	800500a <_dtoa_r+0x7b2>
 800539c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800539e:	930a      	str	r3, [sp, #40]	@ 0x28
 80053a0:	2001      	movs	r0, #1
 80053a2:	e655      	b.n	8005050 <_dtoa_r+0x7f8>
 80053a4:	9b00      	ldr	r3, [sp, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f77f aed6 	ble.w	8005158 <_dtoa_r+0x900>
 80053ac:	4656      	mov	r6, sl
 80053ae:	4621      	mov	r1, r4
 80053b0:	4648      	mov	r0, r9
 80053b2:	f7ff f9c8 	bl	8004746 <quorem>
 80053b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80053ba:	f806 8b01 	strb.w	r8, [r6], #1
 80053be:	9b00      	ldr	r3, [sp, #0]
 80053c0:	eba6 020a 	sub.w	r2, r6, sl
 80053c4:	4293      	cmp	r3, r2
 80053c6:	ddb3      	ble.n	8005330 <_dtoa_r+0xad8>
 80053c8:	4649      	mov	r1, r9
 80053ca:	2300      	movs	r3, #0
 80053cc:	220a      	movs	r2, #10
 80053ce:	4658      	mov	r0, fp
 80053d0:	f000 f968 	bl	80056a4 <__multadd>
 80053d4:	4681      	mov	r9, r0
 80053d6:	e7ea      	b.n	80053ae <_dtoa_r+0xb56>
 80053d8:	08007cc4 	.word	0x08007cc4
 80053dc:	08007c48 	.word	0x08007c48

080053e0 <_free_r>:
 80053e0:	b538      	push	{r3, r4, r5, lr}
 80053e2:	4605      	mov	r5, r0
 80053e4:	2900      	cmp	r1, #0
 80053e6:	d041      	beq.n	800546c <_free_r+0x8c>
 80053e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053ec:	1f0c      	subs	r4, r1, #4
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	bfb8      	it	lt
 80053f2:	18e4      	addlt	r4, r4, r3
 80053f4:	f000 f8e8 	bl	80055c8 <__malloc_lock>
 80053f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005470 <_free_r+0x90>)
 80053fa:	6813      	ldr	r3, [r2, #0]
 80053fc:	b933      	cbnz	r3, 800540c <_free_r+0x2c>
 80053fe:	6063      	str	r3, [r4, #4]
 8005400:	6014      	str	r4, [r2, #0]
 8005402:	4628      	mov	r0, r5
 8005404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005408:	f000 b8e4 	b.w	80055d4 <__malloc_unlock>
 800540c:	42a3      	cmp	r3, r4
 800540e:	d908      	bls.n	8005422 <_free_r+0x42>
 8005410:	6820      	ldr	r0, [r4, #0]
 8005412:	1821      	adds	r1, r4, r0
 8005414:	428b      	cmp	r3, r1
 8005416:	bf01      	itttt	eq
 8005418:	6819      	ldreq	r1, [r3, #0]
 800541a:	685b      	ldreq	r3, [r3, #4]
 800541c:	1809      	addeq	r1, r1, r0
 800541e:	6021      	streq	r1, [r4, #0]
 8005420:	e7ed      	b.n	80053fe <_free_r+0x1e>
 8005422:	461a      	mov	r2, r3
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	b10b      	cbz	r3, 800542c <_free_r+0x4c>
 8005428:	42a3      	cmp	r3, r4
 800542a:	d9fa      	bls.n	8005422 <_free_r+0x42>
 800542c:	6811      	ldr	r1, [r2, #0]
 800542e:	1850      	adds	r0, r2, r1
 8005430:	42a0      	cmp	r0, r4
 8005432:	d10b      	bne.n	800544c <_free_r+0x6c>
 8005434:	6820      	ldr	r0, [r4, #0]
 8005436:	4401      	add	r1, r0
 8005438:	1850      	adds	r0, r2, r1
 800543a:	4283      	cmp	r3, r0
 800543c:	6011      	str	r1, [r2, #0]
 800543e:	d1e0      	bne.n	8005402 <_free_r+0x22>
 8005440:	6818      	ldr	r0, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	6053      	str	r3, [r2, #4]
 8005446:	4408      	add	r0, r1
 8005448:	6010      	str	r0, [r2, #0]
 800544a:	e7da      	b.n	8005402 <_free_r+0x22>
 800544c:	d902      	bls.n	8005454 <_free_r+0x74>
 800544e:	230c      	movs	r3, #12
 8005450:	602b      	str	r3, [r5, #0]
 8005452:	e7d6      	b.n	8005402 <_free_r+0x22>
 8005454:	6820      	ldr	r0, [r4, #0]
 8005456:	1821      	adds	r1, r4, r0
 8005458:	428b      	cmp	r3, r1
 800545a:	bf04      	itt	eq
 800545c:	6819      	ldreq	r1, [r3, #0]
 800545e:	685b      	ldreq	r3, [r3, #4]
 8005460:	6063      	str	r3, [r4, #4]
 8005462:	bf04      	itt	eq
 8005464:	1809      	addeq	r1, r1, r0
 8005466:	6021      	streq	r1, [r4, #0]
 8005468:	6054      	str	r4, [r2, #4]
 800546a:	e7ca      	b.n	8005402 <_free_r+0x22>
 800546c:	bd38      	pop	{r3, r4, r5, pc}
 800546e:	bf00      	nop
 8005470:	20000450 	.word	0x20000450

08005474 <malloc>:
 8005474:	4b02      	ldr	r3, [pc, #8]	@ (8005480 <malloc+0xc>)
 8005476:	4601      	mov	r1, r0
 8005478:	6818      	ldr	r0, [r3, #0]
 800547a:	f000 b825 	b.w	80054c8 <_malloc_r>
 800547e:	bf00      	nop
 8005480:	20000018 	.word	0x20000018

08005484 <sbrk_aligned>:
 8005484:	b570      	push	{r4, r5, r6, lr}
 8005486:	4e0f      	ldr	r6, [pc, #60]	@ (80054c4 <sbrk_aligned+0x40>)
 8005488:	460c      	mov	r4, r1
 800548a:	6831      	ldr	r1, [r6, #0]
 800548c:	4605      	mov	r5, r0
 800548e:	b911      	cbnz	r1, 8005496 <sbrk_aligned+0x12>
 8005490:	f000 fe46 	bl	8006120 <_sbrk_r>
 8005494:	6030      	str	r0, [r6, #0]
 8005496:	4621      	mov	r1, r4
 8005498:	4628      	mov	r0, r5
 800549a:	f000 fe41 	bl	8006120 <_sbrk_r>
 800549e:	1c43      	adds	r3, r0, #1
 80054a0:	d103      	bne.n	80054aa <sbrk_aligned+0x26>
 80054a2:	f04f 34ff 	mov.w	r4, #4294967295
 80054a6:	4620      	mov	r0, r4
 80054a8:	bd70      	pop	{r4, r5, r6, pc}
 80054aa:	1cc4      	adds	r4, r0, #3
 80054ac:	f024 0403 	bic.w	r4, r4, #3
 80054b0:	42a0      	cmp	r0, r4
 80054b2:	d0f8      	beq.n	80054a6 <sbrk_aligned+0x22>
 80054b4:	1a21      	subs	r1, r4, r0
 80054b6:	4628      	mov	r0, r5
 80054b8:	f000 fe32 	bl	8006120 <_sbrk_r>
 80054bc:	3001      	adds	r0, #1
 80054be:	d1f2      	bne.n	80054a6 <sbrk_aligned+0x22>
 80054c0:	e7ef      	b.n	80054a2 <sbrk_aligned+0x1e>
 80054c2:	bf00      	nop
 80054c4:	2000044c 	.word	0x2000044c

080054c8 <_malloc_r>:
 80054c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054cc:	1ccd      	adds	r5, r1, #3
 80054ce:	f025 0503 	bic.w	r5, r5, #3
 80054d2:	3508      	adds	r5, #8
 80054d4:	2d0c      	cmp	r5, #12
 80054d6:	bf38      	it	cc
 80054d8:	250c      	movcc	r5, #12
 80054da:	2d00      	cmp	r5, #0
 80054dc:	4606      	mov	r6, r0
 80054de:	db01      	blt.n	80054e4 <_malloc_r+0x1c>
 80054e0:	42a9      	cmp	r1, r5
 80054e2:	d904      	bls.n	80054ee <_malloc_r+0x26>
 80054e4:	230c      	movs	r3, #12
 80054e6:	6033      	str	r3, [r6, #0]
 80054e8:	2000      	movs	r0, #0
 80054ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80055c4 <_malloc_r+0xfc>
 80054f2:	f000 f869 	bl	80055c8 <__malloc_lock>
 80054f6:	f8d8 3000 	ldr.w	r3, [r8]
 80054fa:	461c      	mov	r4, r3
 80054fc:	bb44      	cbnz	r4, 8005550 <_malloc_r+0x88>
 80054fe:	4629      	mov	r1, r5
 8005500:	4630      	mov	r0, r6
 8005502:	f7ff ffbf 	bl	8005484 <sbrk_aligned>
 8005506:	1c43      	adds	r3, r0, #1
 8005508:	4604      	mov	r4, r0
 800550a:	d158      	bne.n	80055be <_malloc_r+0xf6>
 800550c:	f8d8 4000 	ldr.w	r4, [r8]
 8005510:	4627      	mov	r7, r4
 8005512:	2f00      	cmp	r7, #0
 8005514:	d143      	bne.n	800559e <_malloc_r+0xd6>
 8005516:	2c00      	cmp	r4, #0
 8005518:	d04b      	beq.n	80055b2 <_malloc_r+0xea>
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	4639      	mov	r1, r7
 800551e:	4630      	mov	r0, r6
 8005520:	eb04 0903 	add.w	r9, r4, r3
 8005524:	f000 fdfc 	bl	8006120 <_sbrk_r>
 8005528:	4581      	cmp	r9, r0
 800552a:	d142      	bne.n	80055b2 <_malloc_r+0xea>
 800552c:	6821      	ldr	r1, [r4, #0]
 800552e:	1a6d      	subs	r5, r5, r1
 8005530:	4629      	mov	r1, r5
 8005532:	4630      	mov	r0, r6
 8005534:	f7ff ffa6 	bl	8005484 <sbrk_aligned>
 8005538:	3001      	adds	r0, #1
 800553a:	d03a      	beq.n	80055b2 <_malloc_r+0xea>
 800553c:	6823      	ldr	r3, [r4, #0]
 800553e:	442b      	add	r3, r5
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	f8d8 3000 	ldr.w	r3, [r8]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	bb62      	cbnz	r2, 80055a4 <_malloc_r+0xdc>
 800554a:	f8c8 7000 	str.w	r7, [r8]
 800554e:	e00f      	b.n	8005570 <_malloc_r+0xa8>
 8005550:	6822      	ldr	r2, [r4, #0]
 8005552:	1b52      	subs	r2, r2, r5
 8005554:	d420      	bmi.n	8005598 <_malloc_r+0xd0>
 8005556:	2a0b      	cmp	r2, #11
 8005558:	d917      	bls.n	800558a <_malloc_r+0xc2>
 800555a:	1961      	adds	r1, r4, r5
 800555c:	42a3      	cmp	r3, r4
 800555e:	6025      	str	r5, [r4, #0]
 8005560:	bf18      	it	ne
 8005562:	6059      	strne	r1, [r3, #4]
 8005564:	6863      	ldr	r3, [r4, #4]
 8005566:	bf08      	it	eq
 8005568:	f8c8 1000 	streq.w	r1, [r8]
 800556c:	5162      	str	r2, [r4, r5]
 800556e:	604b      	str	r3, [r1, #4]
 8005570:	4630      	mov	r0, r6
 8005572:	f000 f82f 	bl	80055d4 <__malloc_unlock>
 8005576:	f104 000b 	add.w	r0, r4, #11
 800557a:	1d23      	adds	r3, r4, #4
 800557c:	f020 0007 	bic.w	r0, r0, #7
 8005580:	1ac2      	subs	r2, r0, r3
 8005582:	bf1c      	itt	ne
 8005584:	1a1b      	subne	r3, r3, r0
 8005586:	50a3      	strne	r3, [r4, r2]
 8005588:	e7af      	b.n	80054ea <_malloc_r+0x22>
 800558a:	6862      	ldr	r2, [r4, #4]
 800558c:	42a3      	cmp	r3, r4
 800558e:	bf0c      	ite	eq
 8005590:	f8c8 2000 	streq.w	r2, [r8]
 8005594:	605a      	strne	r2, [r3, #4]
 8005596:	e7eb      	b.n	8005570 <_malloc_r+0xa8>
 8005598:	4623      	mov	r3, r4
 800559a:	6864      	ldr	r4, [r4, #4]
 800559c:	e7ae      	b.n	80054fc <_malloc_r+0x34>
 800559e:	463c      	mov	r4, r7
 80055a0:	687f      	ldr	r7, [r7, #4]
 80055a2:	e7b6      	b.n	8005512 <_malloc_r+0x4a>
 80055a4:	461a      	mov	r2, r3
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	42a3      	cmp	r3, r4
 80055aa:	d1fb      	bne.n	80055a4 <_malloc_r+0xdc>
 80055ac:	2300      	movs	r3, #0
 80055ae:	6053      	str	r3, [r2, #4]
 80055b0:	e7de      	b.n	8005570 <_malloc_r+0xa8>
 80055b2:	230c      	movs	r3, #12
 80055b4:	6033      	str	r3, [r6, #0]
 80055b6:	4630      	mov	r0, r6
 80055b8:	f000 f80c 	bl	80055d4 <__malloc_unlock>
 80055bc:	e794      	b.n	80054e8 <_malloc_r+0x20>
 80055be:	6005      	str	r5, [r0, #0]
 80055c0:	e7d6      	b.n	8005570 <_malloc_r+0xa8>
 80055c2:	bf00      	nop
 80055c4:	20000450 	.word	0x20000450

080055c8 <__malloc_lock>:
 80055c8:	4801      	ldr	r0, [pc, #4]	@ (80055d0 <__malloc_lock+0x8>)
 80055ca:	f7ff b8ba 	b.w	8004742 <__retarget_lock_acquire_recursive>
 80055ce:	bf00      	nop
 80055d0:	20000448 	.word	0x20000448

080055d4 <__malloc_unlock>:
 80055d4:	4801      	ldr	r0, [pc, #4]	@ (80055dc <__malloc_unlock+0x8>)
 80055d6:	f7ff b8b5 	b.w	8004744 <__retarget_lock_release_recursive>
 80055da:	bf00      	nop
 80055dc:	20000448 	.word	0x20000448

080055e0 <_Balloc>:
 80055e0:	b570      	push	{r4, r5, r6, lr}
 80055e2:	69c6      	ldr	r6, [r0, #28]
 80055e4:	4604      	mov	r4, r0
 80055e6:	460d      	mov	r5, r1
 80055e8:	b976      	cbnz	r6, 8005608 <_Balloc+0x28>
 80055ea:	2010      	movs	r0, #16
 80055ec:	f7ff ff42 	bl	8005474 <malloc>
 80055f0:	4602      	mov	r2, r0
 80055f2:	61e0      	str	r0, [r4, #28]
 80055f4:	b920      	cbnz	r0, 8005600 <_Balloc+0x20>
 80055f6:	4b18      	ldr	r3, [pc, #96]	@ (8005658 <_Balloc+0x78>)
 80055f8:	4818      	ldr	r0, [pc, #96]	@ (800565c <_Balloc+0x7c>)
 80055fa:	216b      	movs	r1, #107	@ 0x6b
 80055fc:	f000 fdae 	bl	800615c <__assert_func>
 8005600:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005604:	6006      	str	r6, [r0, #0]
 8005606:	60c6      	str	r6, [r0, #12]
 8005608:	69e6      	ldr	r6, [r4, #28]
 800560a:	68f3      	ldr	r3, [r6, #12]
 800560c:	b183      	cbz	r3, 8005630 <_Balloc+0x50>
 800560e:	69e3      	ldr	r3, [r4, #28]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005616:	b9b8      	cbnz	r0, 8005648 <_Balloc+0x68>
 8005618:	2101      	movs	r1, #1
 800561a:	fa01 f605 	lsl.w	r6, r1, r5
 800561e:	1d72      	adds	r2, r6, #5
 8005620:	0092      	lsls	r2, r2, #2
 8005622:	4620      	mov	r0, r4
 8005624:	f000 fdb8 	bl	8006198 <_calloc_r>
 8005628:	b160      	cbz	r0, 8005644 <_Balloc+0x64>
 800562a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800562e:	e00e      	b.n	800564e <_Balloc+0x6e>
 8005630:	2221      	movs	r2, #33	@ 0x21
 8005632:	2104      	movs	r1, #4
 8005634:	4620      	mov	r0, r4
 8005636:	f000 fdaf 	bl	8006198 <_calloc_r>
 800563a:	69e3      	ldr	r3, [r4, #28]
 800563c:	60f0      	str	r0, [r6, #12]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e4      	bne.n	800560e <_Balloc+0x2e>
 8005644:	2000      	movs	r0, #0
 8005646:	bd70      	pop	{r4, r5, r6, pc}
 8005648:	6802      	ldr	r2, [r0, #0]
 800564a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800564e:	2300      	movs	r3, #0
 8005650:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005654:	e7f7      	b.n	8005646 <_Balloc+0x66>
 8005656:	bf00      	nop
 8005658:	08007c55 	.word	0x08007c55
 800565c:	08007cd5 	.word	0x08007cd5

08005660 <_Bfree>:
 8005660:	b570      	push	{r4, r5, r6, lr}
 8005662:	69c6      	ldr	r6, [r0, #28]
 8005664:	4605      	mov	r5, r0
 8005666:	460c      	mov	r4, r1
 8005668:	b976      	cbnz	r6, 8005688 <_Bfree+0x28>
 800566a:	2010      	movs	r0, #16
 800566c:	f7ff ff02 	bl	8005474 <malloc>
 8005670:	4602      	mov	r2, r0
 8005672:	61e8      	str	r0, [r5, #28]
 8005674:	b920      	cbnz	r0, 8005680 <_Bfree+0x20>
 8005676:	4b09      	ldr	r3, [pc, #36]	@ (800569c <_Bfree+0x3c>)
 8005678:	4809      	ldr	r0, [pc, #36]	@ (80056a0 <_Bfree+0x40>)
 800567a:	218f      	movs	r1, #143	@ 0x8f
 800567c:	f000 fd6e 	bl	800615c <__assert_func>
 8005680:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005684:	6006      	str	r6, [r0, #0]
 8005686:	60c6      	str	r6, [r0, #12]
 8005688:	b13c      	cbz	r4, 800569a <_Bfree+0x3a>
 800568a:	69eb      	ldr	r3, [r5, #28]
 800568c:	6862      	ldr	r2, [r4, #4]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005694:	6021      	str	r1, [r4, #0]
 8005696:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800569a:	bd70      	pop	{r4, r5, r6, pc}
 800569c:	08007c55 	.word	0x08007c55
 80056a0:	08007cd5 	.word	0x08007cd5

080056a4 <__multadd>:
 80056a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056a8:	690d      	ldr	r5, [r1, #16]
 80056aa:	4607      	mov	r7, r0
 80056ac:	460c      	mov	r4, r1
 80056ae:	461e      	mov	r6, r3
 80056b0:	f101 0c14 	add.w	ip, r1, #20
 80056b4:	2000      	movs	r0, #0
 80056b6:	f8dc 3000 	ldr.w	r3, [ip]
 80056ba:	b299      	uxth	r1, r3
 80056bc:	fb02 6101 	mla	r1, r2, r1, r6
 80056c0:	0c1e      	lsrs	r6, r3, #16
 80056c2:	0c0b      	lsrs	r3, r1, #16
 80056c4:	fb02 3306 	mla	r3, r2, r6, r3
 80056c8:	b289      	uxth	r1, r1
 80056ca:	3001      	adds	r0, #1
 80056cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80056d0:	4285      	cmp	r5, r0
 80056d2:	f84c 1b04 	str.w	r1, [ip], #4
 80056d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80056da:	dcec      	bgt.n	80056b6 <__multadd+0x12>
 80056dc:	b30e      	cbz	r6, 8005722 <__multadd+0x7e>
 80056de:	68a3      	ldr	r3, [r4, #8]
 80056e0:	42ab      	cmp	r3, r5
 80056e2:	dc19      	bgt.n	8005718 <__multadd+0x74>
 80056e4:	6861      	ldr	r1, [r4, #4]
 80056e6:	4638      	mov	r0, r7
 80056e8:	3101      	adds	r1, #1
 80056ea:	f7ff ff79 	bl	80055e0 <_Balloc>
 80056ee:	4680      	mov	r8, r0
 80056f0:	b928      	cbnz	r0, 80056fe <__multadd+0x5a>
 80056f2:	4602      	mov	r2, r0
 80056f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005728 <__multadd+0x84>)
 80056f6:	480d      	ldr	r0, [pc, #52]	@ (800572c <__multadd+0x88>)
 80056f8:	21ba      	movs	r1, #186	@ 0xba
 80056fa:	f000 fd2f 	bl	800615c <__assert_func>
 80056fe:	6922      	ldr	r2, [r4, #16]
 8005700:	3202      	adds	r2, #2
 8005702:	f104 010c 	add.w	r1, r4, #12
 8005706:	0092      	lsls	r2, r2, #2
 8005708:	300c      	adds	r0, #12
 800570a:	f000 fd19 	bl	8006140 <memcpy>
 800570e:	4621      	mov	r1, r4
 8005710:	4638      	mov	r0, r7
 8005712:	f7ff ffa5 	bl	8005660 <_Bfree>
 8005716:	4644      	mov	r4, r8
 8005718:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800571c:	3501      	adds	r5, #1
 800571e:	615e      	str	r6, [r3, #20]
 8005720:	6125      	str	r5, [r4, #16]
 8005722:	4620      	mov	r0, r4
 8005724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005728:	08007cc4 	.word	0x08007cc4
 800572c:	08007cd5 	.word	0x08007cd5

08005730 <__hi0bits>:
 8005730:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005734:	4603      	mov	r3, r0
 8005736:	bf36      	itet	cc
 8005738:	0403      	lslcc	r3, r0, #16
 800573a:	2000      	movcs	r0, #0
 800573c:	2010      	movcc	r0, #16
 800573e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005742:	bf3c      	itt	cc
 8005744:	021b      	lslcc	r3, r3, #8
 8005746:	3008      	addcc	r0, #8
 8005748:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800574c:	bf3c      	itt	cc
 800574e:	011b      	lslcc	r3, r3, #4
 8005750:	3004      	addcc	r0, #4
 8005752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005756:	bf3c      	itt	cc
 8005758:	009b      	lslcc	r3, r3, #2
 800575a:	3002      	addcc	r0, #2
 800575c:	2b00      	cmp	r3, #0
 800575e:	db05      	blt.n	800576c <__hi0bits+0x3c>
 8005760:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005764:	f100 0001 	add.w	r0, r0, #1
 8005768:	bf08      	it	eq
 800576a:	2020      	moveq	r0, #32
 800576c:	4770      	bx	lr

0800576e <__lo0bits>:
 800576e:	6803      	ldr	r3, [r0, #0]
 8005770:	4602      	mov	r2, r0
 8005772:	f013 0007 	ands.w	r0, r3, #7
 8005776:	d00b      	beq.n	8005790 <__lo0bits+0x22>
 8005778:	07d9      	lsls	r1, r3, #31
 800577a:	d421      	bmi.n	80057c0 <__lo0bits+0x52>
 800577c:	0798      	lsls	r0, r3, #30
 800577e:	bf49      	itett	mi
 8005780:	085b      	lsrmi	r3, r3, #1
 8005782:	089b      	lsrpl	r3, r3, #2
 8005784:	2001      	movmi	r0, #1
 8005786:	6013      	strmi	r3, [r2, #0]
 8005788:	bf5c      	itt	pl
 800578a:	6013      	strpl	r3, [r2, #0]
 800578c:	2002      	movpl	r0, #2
 800578e:	4770      	bx	lr
 8005790:	b299      	uxth	r1, r3
 8005792:	b909      	cbnz	r1, 8005798 <__lo0bits+0x2a>
 8005794:	0c1b      	lsrs	r3, r3, #16
 8005796:	2010      	movs	r0, #16
 8005798:	b2d9      	uxtb	r1, r3
 800579a:	b909      	cbnz	r1, 80057a0 <__lo0bits+0x32>
 800579c:	3008      	adds	r0, #8
 800579e:	0a1b      	lsrs	r3, r3, #8
 80057a0:	0719      	lsls	r1, r3, #28
 80057a2:	bf04      	itt	eq
 80057a4:	091b      	lsreq	r3, r3, #4
 80057a6:	3004      	addeq	r0, #4
 80057a8:	0799      	lsls	r1, r3, #30
 80057aa:	bf04      	itt	eq
 80057ac:	089b      	lsreq	r3, r3, #2
 80057ae:	3002      	addeq	r0, #2
 80057b0:	07d9      	lsls	r1, r3, #31
 80057b2:	d403      	bmi.n	80057bc <__lo0bits+0x4e>
 80057b4:	085b      	lsrs	r3, r3, #1
 80057b6:	f100 0001 	add.w	r0, r0, #1
 80057ba:	d003      	beq.n	80057c4 <__lo0bits+0x56>
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	4770      	bx	lr
 80057c0:	2000      	movs	r0, #0
 80057c2:	4770      	bx	lr
 80057c4:	2020      	movs	r0, #32
 80057c6:	4770      	bx	lr

080057c8 <__i2b>:
 80057c8:	b510      	push	{r4, lr}
 80057ca:	460c      	mov	r4, r1
 80057cc:	2101      	movs	r1, #1
 80057ce:	f7ff ff07 	bl	80055e0 <_Balloc>
 80057d2:	4602      	mov	r2, r0
 80057d4:	b928      	cbnz	r0, 80057e2 <__i2b+0x1a>
 80057d6:	4b05      	ldr	r3, [pc, #20]	@ (80057ec <__i2b+0x24>)
 80057d8:	4805      	ldr	r0, [pc, #20]	@ (80057f0 <__i2b+0x28>)
 80057da:	f240 1145 	movw	r1, #325	@ 0x145
 80057de:	f000 fcbd 	bl	800615c <__assert_func>
 80057e2:	2301      	movs	r3, #1
 80057e4:	6144      	str	r4, [r0, #20]
 80057e6:	6103      	str	r3, [r0, #16]
 80057e8:	bd10      	pop	{r4, pc}
 80057ea:	bf00      	nop
 80057ec:	08007cc4 	.word	0x08007cc4
 80057f0:	08007cd5 	.word	0x08007cd5

080057f4 <__multiply>:
 80057f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f8:	4614      	mov	r4, r2
 80057fa:	690a      	ldr	r2, [r1, #16]
 80057fc:	6923      	ldr	r3, [r4, #16]
 80057fe:	429a      	cmp	r2, r3
 8005800:	bfa8      	it	ge
 8005802:	4623      	movge	r3, r4
 8005804:	460f      	mov	r7, r1
 8005806:	bfa4      	itt	ge
 8005808:	460c      	movge	r4, r1
 800580a:	461f      	movge	r7, r3
 800580c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005810:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005814:	68a3      	ldr	r3, [r4, #8]
 8005816:	6861      	ldr	r1, [r4, #4]
 8005818:	eb0a 0609 	add.w	r6, sl, r9
 800581c:	42b3      	cmp	r3, r6
 800581e:	b085      	sub	sp, #20
 8005820:	bfb8      	it	lt
 8005822:	3101      	addlt	r1, #1
 8005824:	f7ff fedc 	bl	80055e0 <_Balloc>
 8005828:	b930      	cbnz	r0, 8005838 <__multiply+0x44>
 800582a:	4602      	mov	r2, r0
 800582c:	4b44      	ldr	r3, [pc, #272]	@ (8005940 <__multiply+0x14c>)
 800582e:	4845      	ldr	r0, [pc, #276]	@ (8005944 <__multiply+0x150>)
 8005830:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005834:	f000 fc92 	bl	800615c <__assert_func>
 8005838:	f100 0514 	add.w	r5, r0, #20
 800583c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005840:	462b      	mov	r3, r5
 8005842:	2200      	movs	r2, #0
 8005844:	4543      	cmp	r3, r8
 8005846:	d321      	bcc.n	800588c <__multiply+0x98>
 8005848:	f107 0114 	add.w	r1, r7, #20
 800584c:	f104 0214 	add.w	r2, r4, #20
 8005850:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005854:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005858:	9302      	str	r3, [sp, #8]
 800585a:	1b13      	subs	r3, r2, r4
 800585c:	3b15      	subs	r3, #21
 800585e:	f023 0303 	bic.w	r3, r3, #3
 8005862:	3304      	adds	r3, #4
 8005864:	f104 0715 	add.w	r7, r4, #21
 8005868:	42ba      	cmp	r2, r7
 800586a:	bf38      	it	cc
 800586c:	2304      	movcc	r3, #4
 800586e:	9301      	str	r3, [sp, #4]
 8005870:	9b02      	ldr	r3, [sp, #8]
 8005872:	9103      	str	r1, [sp, #12]
 8005874:	428b      	cmp	r3, r1
 8005876:	d80c      	bhi.n	8005892 <__multiply+0x9e>
 8005878:	2e00      	cmp	r6, #0
 800587a:	dd03      	ble.n	8005884 <__multiply+0x90>
 800587c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005880:	2b00      	cmp	r3, #0
 8005882:	d05b      	beq.n	800593c <__multiply+0x148>
 8005884:	6106      	str	r6, [r0, #16]
 8005886:	b005      	add	sp, #20
 8005888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800588c:	f843 2b04 	str.w	r2, [r3], #4
 8005890:	e7d8      	b.n	8005844 <__multiply+0x50>
 8005892:	f8b1 a000 	ldrh.w	sl, [r1]
 8005896:	f1ba 0f00 	cmp.w	sl, #0
 800589a:	d024      	beq.n	80058e6 <__multiply+0xf2>
 800589c:	f104 0e14 	add.w	lr, r4, #20
 80058a0:	46a9      	mov	r9, r5
 80058a2:	f04f 0c00 	mov.w	ip, #0
 80058a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80058aa:	f8d9 3000 	ldr.w	r3, [r9]
 80058ae:	fa1f fb87 	uxth.w	fp, r7
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	fb0a 330b 	mla	r3, sl, fp, r3
 80058b8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80058bc:	f8d9 7000 	ldr.w	r7, [r9]
 80058c0:	4463      	add	r3, ip
 80058c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80058c6:	fb0a c70b 	mla	r7, sl, fp, ip
 80058ca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80058d4:	4572      	cmp	r2, lr
 80058d6:	f849 3b04 	str.w	r3, [r9], #4
 80058da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80058de:	d8e2      	bhi.n	80058a6 <__multiply+0xb2>
 80058e0:	9b01      	ldr	r3, [sp, #4]
 80058e2:	f845 c003 	str.w	ip, [r5, r3]
 80058e6:	9b03      	ldr	r3, [sp, #12]
 80058e8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80058ec:	3104      	adds	r1, #4
 80058ee:	f1b9 0f00 	cmp.w	r9, #0
 80058f2:	d021      	beq.n	8005938 <__multiply+0x144>
 80058f4:	682b      	ldr	r3, [r5, #0]
 80058f6:	f104 0c14 	add.w	ip, r4, #20
 80058fa:	46ae      	mov	lr, r5
 80058fc:	f04f 0a00 	mov.w	sl, #0
 8005900:	f8bc b000 	ldrh.w	fp, [ip]
 8005904:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005908:	fb09 770b 	mla	r7, r9, fp, r7
 800590c:	4457      	add	r7, sl
 800590e:	b29b      	uxth	r3, r3
 8005910:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005914:	f84e 3b04 	str.w	r3, [lr], #4
 8005918:	f85c 3b04 	ldr.w	r3, [ip], #4
 800591c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005920:	f8be 3000 	ldrh.w	r3, [lr]
 8005924:	fb09 330a 	mla	r3, r9, sl, r3
 8005928:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800592c:	4562      	cmp	r2, ip
 800592e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005932:	d8e5      	bhi.n	8005900 <__multiply+0x10c>
 8005934:	9f01      	ldr	r7, [sp, #4]
 8005936:	51eb      	str	r3, [r5, r7]
 8005938:	3504      	adds	r5, #4
 800593a:	e799      	b.n	8005870 <__multiply+0x7c>
 800593c:	3e01      	subs	r6, #1
 800593e:	e79b      	b.n	8005878 <__multiply+0x84>
 8005940:	08007cc4 	.word	0x08007cc4
 8005944:	08007cd5 	.word	0x08007cd5

08005948 <__pow5mult>:
 8005948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800594c:	4615      	mov	r5, r2
 800594e:	f012 0203 	ands.w	r2, r2, #3
 8005952:	4607      	mov	r7, r0
 8005954:	460e      	mov	r6, r1
 8005956:	d007      	beq.n	8005968 <__pow5mult+0x20>
 8005958:	4c25      	ldr	r4, [pc, #148]	@ (80059f0 <__pow5mult+0xa8>)
 800595a:	3a01      	subs	r2, #1
 800595c:	2300      	movs	r3, #0
 800595e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005962:	f7ff fe9f 	bl	80056a4 <__multadd>
 8005966:	4606      	mov	r6, r0
 8005968:	10ad      	asrs	r5, r5, #2
 800596a:	d03d      	beq.n	80059e8 <__pow5mult+0xa0>
 800596c:	69fc      	ldr	r4, [r7, #28]
 800596e:	b97c      	cbnz	r4, 8005990 <__pow5mult+0x48>
 8005970:	2010      	movs	r0, #16
 8005972:	f7ff fd7f 	bl	8005474 <malloc>
 8005976:	4602      	mov	r2, r0
 8005978:	61f8      	str	r0, [r7, #28]
 800597a:	b928      	cbnz	r0, 8005988 <__pow5mult+0x40>
 800597c:	4b1d      	ldr	r3, [pc, #116]	@ (80059f4 <__pow5mult+0xac>)
 800597e:	481e      	ldr	r0, [pc, #120]	@ (80059f8 <__pow5mult+0xb0>)
 8005980:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005984:	f000 fbea 	bl	800615c <__assert_func>
 8005988:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800598c:	6004      	str	r4, [r0, #0]
 800598e:	60c4      	str	r4, [r0, #12]
 8005990:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005994:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005998:	b94c      	cbnz	r4, 80059ae <__pow5mult+0x66>
 800599a:	f240 2171 	movw	r1, #625	@ 0x271
 800599e:	4638      	mov	r0, r7
 80059a0:	f7ff ff12 	bl	80057c8 <__i2b>
 80059a4:	2300      	movs	r3, #0
 80059a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80059aa:	4604      	mov	r4, r0
 80059ac:	6003      	str	r3, [r0, #0]
 80059ae:	f04f 0900 	mov.w	r9, #0
 80059b2:	07eb      	lsls	r3, r5, #31
 80059b4:	d50a      	bpl.n	80059cc <__pow5mult+0x84>
 80059b6:	4631      	mov	r1, r6
 80059b8:	4622      	mov	r2, r4
 80059ba:	4638      	mov	r0, r7
 80059bc:	f7ff ff1a 	bl	80057f4 <__multiply>
 80059c0:	4631      	mov	r1, r6
 80059c2:	4680      	mov	r8, r0
 80059c4:	4638      	mov	r0, r7
 80059c6:	f7ff fe4b 	bl	8005660 <_Bfree>
 80059ca:	4646      	mov	r6, r8
 80059cc:	106d      	asrs	r5, r5, #1
 80059ce:	d00b      	beq.n	80059e8 <__pow5mult+0xa0>
 80059d0:	6820      	ldr	r0, [r4, #0]
 80059d2:	b938      	cbnz	r0, 80059e4 <__pow5mult+0x9c>
 80059d4:	4622      	mov	r2, r4
 80059d6:	4621      	mov	r1, r4
 80059d8:	4638      	mov	r0, r7
 80059da:	f7ff ff0b 	bl	80057f4 <__multiply>
 80059de:	6020      	str	r0, [r4, #0]
 80059e0:	f8c0 9000 	str.w	r9, [r0]
 80059e4:	4604      	mov	r4, r0
 80059e6:	e7e4      	b.n	80059b2 <__pow5mult+0x6a>
 80059e8:	4630      	mov	r0, r6
 80059ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059ee:	bf00      	nop
 80059f0:	08007d30 	.word	0x08007d30
 80059f4:	08007c55 	.word	0x08007c55
 80059f8:	08007cd5 	.word	0x08007cd5

080059fc <__lshift>:
 80059fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a00:	460c      	mov	r4, r1
 8005a02:	6849      	ldr	r1, [r1, #4]
 8005a04:	6923      	ldr	r3, [r4, #16]
 8005a06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005a0a:	68a3      	ldr	r3, [r4, #8]
 8005a0c:	4607      	mov	r7, r0
 8005a0e:	4691      	mov	r9, r2
 8005a10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005a14:	f108 0601 	add.w	r6, r8, #1
 8005a18:	42b3      	cmp	r3, r6
 8005a1a:	db0b      	blt.n	8005a34 <__lshift+0x38>
 8005a1c:	4638      	mov	r0, r7
 8005a1e:	f7ff fddf 	bl	80055e0 <_Balloc>
 8005a22:	4605      	mov	r5, r0
 8005a24:	b948      	cbnz	r0, 8005a3a <__lshift+0x3e>
 8005a26:	4602      	mov	r2, r0
 8005a28:	4b28      	ldr	r3, [pc, #160]	@ (8005acc <__lshift+0xd0>)
 8005a2a:	4829      	ldr	r0, [pc, #164]	@ (8005ad0 <__lshift+0xd4>)
 8005a2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005a30:	f000 fb94 	bl	800615c <__assert_func>
 8005a34:	3101      	adds	r1, #1
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	e7ee      	b.n	8005a18 <__lshift+0x1c>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f100 0114 	add.w	r1, r0, #20
 8005a40:	f100 0210 	add.w	r2, r0, #16
 8005a44:	4618      	mov	r0, r3
 8005a46:	4553      	cmp	r3, sl
 8005a48:	db33      	blt.n	8005ab2 <__lshift+0xb6>
 8005a4a:	6920      	ldr	r0, [r4, #16]
 8005a4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a50:	f104 0314 	add.w	r3, r4, #20
 8005a54:	f019 091f 	ands.w	r9, r9, #31
 8005a58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005a60:	d02b      	beq.n	8005aba <__lshift+0xbe>
 8005a62:	f1c9 0e20 	rsb	lr, r9, #32
 8005a66:	468a      	mov	sl, r1
 8005a68:	2200      	movs	r2, #0
 8005a6a:	6818      	ldr	r0, [r3, #0]
 8005a6c:	fa00 f009 	lsl.w	r0, r0, r9
 8005a70:	4310      	orrs	r0, r2
 8005a72:	f84a 0b04 	str.w	r0, [sl], #4
 8005a76:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a7a:	459c      	cmp	ip, r3
 8005a7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005a80:	d8f3      	bhi.n	8005a6a <__lshift+0x6e>
 8005a82:	ebac 0304 	sub.w	r3, ip, r4
 8005a86:	3b15      	subs	r3, #21
 8005a88:	f023 0303 	bic.w	r3, r3, #3
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	f104 0015 	add.w	r0, r4, #21
 8005a92:	4584      	cmp	ip, r0
 8005a94:	bf38      	it	cc
 8005a96:	2304      	movcc	r3, #4
 8005a98:	50ca      	str	r2, [r1, r3]
 8005a9a:	b10a      	cbz	r2, 8005aa0 <__lshift+0xa4>
 8005a9c:	f108 0602 	add.w	r6, r8, #2
 8005aa0:	3e01      	subs	r6, #1
 8005aa2:	4638      	mov	r0, r7
 8005aa4:	612e      	str	r6, [r5, #16]
 8005aa6:	4621      	mov	r1, r4
 8005aa8:	f7ff fdda 	bl	8005660 <_Bfree>
 8005aac:	4628      	mov	r0, r5
 8005aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab2:	f842 0f04 	str.w	r0, [r2, #4]!
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	e7c5      	b.n	8005a46 <__lshift+0x4a>
 8005aba:	3904      	subs	r1, #4
 8005abc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ac0:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ac4:	459c      	cmp	ip, r3
 8005ac6:	d8f9      	bhi.n	8005abc <__lshift+0xc0>
 8005ac8:	e7ea      	b.n	8005aa0 <__lshift+0xa4>
 8005aca:	bf00      	nop
 8005acc:	08007cc4 	.word	0x08007cc4
 8005ad0:	08007cd5 	.word	0x08007cd5

08005ad4 <__mcmp>:
 8005ad4:	690a      	ldr	r2, [r1, #16]
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	6900      	ldr	r0, [r0, #16]
 8005ada:	1a80      	subs	r0, r0, r2
 8005adc:	b530      	push	{r4, r5, lr}
 8005ade:	d10e      	bne.n	8005afe <__mcmp+0x2a>
 8005ae0:	3314      	adds	r3, #20
 8005ae2:	3114      	adds	r1, #20
 8005ae4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005ae8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005aec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005af0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005af4:	4295      	cmp	r5, r2
 8005af6:	d003      	beq.n	8005b00 <__mcmp+0x2c>
 8005af8:	d205      	bcs.n	8005b06 <__mcmp+0x32>
 8005afa:	f04f 30ff 	mov.w	r0, #4294967295
 8005afe:	bd30      	pop	{r4, r5, pc}
 8005b00:	42a3      	cmp	r3, r4
 8005b02:	d3f3      	bcc.n	8005aec <__mcmp+0x18>
 8005b04:	e7fb      	b.n	8005afe <__mcmp+0x2a>
 8005b06:	2001      	movs	r0, #1
 8005b08:	e7f9      	b.n	8005afe <__mcmp+0x2a>
	...

08005b0c <__mdiff>:
 8005b0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b10:	4689      	mov	r9, r1
 8005b12:	4606      	mov	r6, r0
 8005b14:	4611      	mov	r1, r2
 8005b16:	4648      	mov	r0, r9
 8005b18:	4614      	mov	r4, r2
 8005b1a:	f7ff ffdb 	bl	8005ad4 <__mcmp>
 8005b1e:	1e05      	subs	r5, r0, #0
 8005b20:	d112      	bne.n	8005b48 <__mdiff+0x3c>
 8005b22:	4629      	mov	r1, r5
 8005b24:	4630      	mov	r0, r6
 8005b26:	f7ff fd5b 	bl	80055e0 <_Balloc>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	b928      	cbnz	r0, 8005b3a <__mdiff+0x2e>
 8005b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8005c2c <__mdiff+0x120>)
 8005b30:	f240 2137 	movw	r1, #567	@ 0x237
 8005b34:	483e      	ldr	r0, [pc, #248]	@ (8005c30 <__mdiff+0x124>)
 8005b36:	f000 fb11 	bl	800615c <__assert_func>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005b40:	4610      	mov	r0, r2
 8005b42:	b003      	add	sp, #12
 8005b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b48:	bfbc      	itt	lt
 8005b4a:	464b      	movlt	r3, r9
 8005b4c:	46a1      	movlt	r9, r4
 8005b4e:	4630      	mov	r0, r6
 8005b50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005b54:	bfba      	itte	lt
 8005b56:	461c      	movlt	r4, r3
 8005b58:	2501      	movlt	r5, #1
 8005b5a:	2500      	movge	r5, #0
 8005b5c:	f7ff fd40 	bl	80055e0 <_Balloc>
 8005b60:	4602      	mov	r2, r0
 8005b62:	b918      	cbnz	r0, 8005b6c <__mdiff+0x60>
 8005b64:	4b31      	ldr	r3, [pc, #196]	@ (8005c2c <__mdiff+0x120>)
 8005b66:	f240 2145 	movw	r1, #581	@ 0x245
 8005b6a:	e7e3      	b.n	8005b34 <__mdiff+0x28>
 8005b6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005b70:	6926      	ldr	r6, [r4, #16]
 8005b72:	60c5      	str	r5, [r0, #12]
 8005b74:	f109 0310 	add.w	r3, r9, #16
 8005b78:	f109 0514 	add.w	r5, r9, #20
 8005b7c:	f104 0e14 	add.w	lr, r4, #20
 8005b80:	f100 0b14 	add.w	fp, r0, #20
 8005b84:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005b88:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005b8c:	9301      	str	r3, [sp, #4]
 8005b8e:	46d9      	mov	r9, fp
 8005b90:	f04f 0c00 	mov.w	ip, #0
 8005b94:	9b01      	ldr	r3, [sp, #4]
 8005b96:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005b9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005b9e:	9301      	str	r3, [sp, #4]
 8005ba0:	fa1f f38a 	uxth.w	r3, sl
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	b283      	uxth	r3, r0
 8005ba8:	1acb      	subs	r3, r1, r3
 8005baa:	0c00      	lsrs	r0, r0, #16
 8005bac:	4463      	add	r3, ip
 8005bae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005bb2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005bbc:	4576      	cmp	r6, lr
 8005bbe:	f849 3b04 	str.w	r3, [r9], #4
 8005bc2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005bc6:	d8e5      	bhi.n	8005b94 <__mdiff+0x88>
 8005bc8:	1b33      	subs	r3, r6, r4
 8005bca:	3b15      	subs	r3, #21
 8005bcc:	f023 0303 	bic.w	r3, r3, #3
 8005bd0:	3415      	adds	r4, #21
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	42a6      	cmp	r6, r4
 8005bd6:	bf38      	it	cc
 8005bd8:	2304      	movcc	r3, #4
 8005bda:	441d      	add	r5, r3
 8005bdc:	445b      	add	r3, fp
 8005bde:	461e      	mov	r6, r3
 8005be0:	462c      	mov	r4, r5
 8005be2:	4544      	cmp	r4, r8
 8005be4:	d30e      	bcc.n	8005c04 <__mdiff+0xf8>
 8005be6:	f108 0103 	add.w	r1, r8, #3
 8005bea:	1b49      	subs	r1, r1, r5
 8005bec:	f021 0103 	bic.w	r1, r1, #3
 8005bf0:	3d03      	subs	r5, #3
 8005bf2:	45a8      	cmp	r8, r5
 8005bf4:	bf38      	it	cc
 8005bf6:	2100      	movcc	r1, #0
 8005bf8:	440b      	add	r3, r1
 8005bfa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005bfe:	b191      	cbz	r1, 8005c26 <__mdiff+0x11a>
 8005c00:	6117      	str	r7, [r2, #16]
 8005c02:	e79d      	b.n	8005b40 <__mdiff+0x34>
 8005c04:	f854 1b04 	ldr.w	r1, [r4], #4
 8005c08:	46e6      	mov	lr, ip
 8005c0a:	0c08      	lsrs	r0, r1, #16
 8005c0c:	fa1c fc81 	uxtah	ip, ip, r1
 8005c10:	4471      	add	r1, lr
 8005c12:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005c16:	b289      	uxth	r1, r1
 8005c18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005c1c:	f846 1b04 	str.w	r1, [r6], #4
 8005c20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005c24:	e7dd      	b.n	8005be2 <__mdiff+0xd6>
 8005c26:	3f01      	subs	r7, #1
 8005c28:	e7e7      	b.n	8005bfa <__mdiff+0xee>
 8005c2a:	bf00      	nop
 8005c2c:	08007cc4 	.word	0x08007cc4
 8005c30:	08007cd5 	.word	0x08007cd5

08005c34 <__d2b>:
 8005c34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005c38:	460f      	mov	r7, r1
 8005c3a:	2101      	movs	r1, #1
 8005c3c:	ec59 8b10 	vmov	r8, r9, d0
 8005c40:	4616      	mov	r6, r2
 8005c42:	f7ff fccd 	bl	80055e0 <_Balloc>
 8005c46:	4604      	mov	r4, r0
 8005c48:	b930      	cbnz	r0, 8005c58 <__d2b+0x24>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	4b23      	ldr	r3, [pc, #140]	@ (8005cdc <__d2b+0xa8>)
 8005c4e:	4824      	ldr	r0, [pc, #144]	@ (8005ce0 <__d2b+0xac>)
 8005c50:	f240 310f 	movw	r1, #783	@ 0x30f
 8005c54:	f000 fa82 	bl	800615c <__assert_func>
 8005c58:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005c5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005c60:	b10d      	cbz	r5, 8005c66 <__d2b+0x32>
 8005c62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c66:	9301      	str	r3, [sp, #4]
 8005c68:	f1b8 0300 	subs.w	r3, r8, #0
 8005c6c:	d023      	beq.n	8005cb6 <__d2b+0x82>
 8005c6e:	4668      	mov	r0, sp
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	f7ff fd7c 	bl	800576e <__lo0bits>
 8005c76:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005c7a:	b1d0      	cbz	r0, 8005cb2 <__d2b+0x7e>
 8005c7c:	f1c0 0320 	rsb	r3, r0, #32
 8005c80:	fa02 f303 	lsl.w	r3, r2, r3
 8005c84:	430b      	orrs	r3, r1
 8005c86:	40c2      	lsrs	r2, r0
 8005c88:	6163      	str	r3, [r4, #20]
 8005c8a:	9201      	str	r2, [sp, #4]
 8005c8c:	9b01      	ldr	r3, [sp, #4]
 8005c8e:	61a3      	str	r3, [r4, #24]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	bf0c      	ite	eq
 8005c94:	2201      	moveq	r2, #1
 8005c96:	2202      	movne	r2, #2
 8005c98:	6122      	str	r2, [r4, #16]
 8005c9a:	b1a5      	cbz	r5, 8005cc6 <__d2b+0x92>
 8005c9c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005ca0:	4405      	add	r5, r0
 8005ca2:	603d      	str	r5, [r7, #0]
 8005ca4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005ca8:	6030      	str	r0, [r6, #0]
 8005caa:	4620      	mov	r0, r4
 8005cac:	b003      	add	sp, #12
 8005cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cb2:	6161      	str	r1, [r4, #20]
 8005cb4:	e7ea      	b.n	8005c8c <__d2b+0x58>
 8005cb6:	a801      	add	r0, sp, #4
 8005cb8:	f7ff fd59 	bl	800576e <__lo0bits>
 8005cbc:	9b01      	ldr	r3, [sp, #4]
 8005cbe:	6163      	str	r3, [r4, #20]
 8005cc0:	3020      	adds	r0, #32
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	e7e8      	b.n	8005c98 <__d2b+0x64>
 8005cc6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005cca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005cce:	6038      	str	r0, [r7, #0]
 8005cd0:	6918      	ldr	r0, [r3, #16]
 8005cd2:	f7ff fd2d 	bl	8005730 <__hi0bits>
 8005cd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005cda:	e7e5      	b.n	8005ca8 <__d2b+0x74>
 8005cdc:	08007cc4 	.word	0x08007cc4
 8005ce0:	08007cd5 	.word	0x08007cd5

08005ce4 <__ssputs_r>:
 8005ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce8:	688e      	ldr	r6, [r1, #8]
 8005cea:	461f      	mov	r7, r3
 8005cec:	42be      	cmp	r6, r7
 8005cee:	680b      	ldr	r3, [r1, #0]
 8005cf0:	4682      	mov	sl, r0
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	4690      	mov	r8, r2
 8005cf6:	d82d      	bhi.n	8005d54 <__ssputs_r+0x70>
 8005cf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005cfc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d00:	d026      	beq.n	8005d50 <__ssputs_r+0x6c>
 8005d02:	6965      	ldr	r5, [r4, #20]
 8005d04:	6909      	ldr	r1, [r1, #16]
 8005d06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d0a:	eba3 0901 	sub.w	r9, r3, r1
 8005d0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d12:	1c7b      	adds	r3, r7, #1
 8005d14:	444b      	add	r3, r9
 8005d16:	106d      	asrs	r5, r5, #1
 8005d18:	429d      	cmp	r5, r3
 8005d1a:	bf38      	it	cc
 8005d1c:	461d      	movcc	r5, r3
 8005d1e:	0553      	lsls	r3, r2, #21
 8005d20:	d527      	bpl.n	8005d72 <__ssputs_r+0x8e>
 8005d22:	4629      	mov	r1, r5
 8005d24:	f7ff fbd0 	bl	80054c8 <_malloc_r>
 8005d28:	4606      	mov	r6, r0
 8005d2a:	b360      	cbz	r0, 8005d86 <__ssputs_r+0xa2>
 8005d2c:	6921      	ldr	r1, [r4, #16]
 8005d2e:	464a      	mov	r2, r9
 8005d30:	f000 fa06 	bl	8006140 <memcpy>
 8005d34:	89a3      	ldrh	r3, [r4, #12]
 8005d36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005d3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d3e:	81a3      	strh	r3, [r4, #12]
 8005d40:	6126      	str	r6, [r4, #16]
 8005d42:	6165      	str	r5, [r4, #20]
 8005d44:	444e      	add	r6, r9
 8005d46:	eba5 0509 	sub.w	r5, r5, r9
 8005d4a:	6026      	str	r6, [r4, #0]
 8005d4c:	60a5      	str	r5, [r4, #8]
 8005d4e:	463e      	mov	r6, r7
 8005d50:	42be      	cmp	r6, r7
 8005d52:	d900      	bls.n	8005d56 <__ssputs_r+0x72>
 8005d54:	463e      	mov	r6, r7
 8005d56:	6820      	ldr	r0, [r4, #0]
 8005d58:	4632      	mov	r2, r6
 8005d5a:	4641      	mov	r1, r8
 8005d5c:	f000 f9c6 	bl	80060ec <memmove>
 8005d60:	68a3      	ldr	r3, [r4, #8]
 8005d62:	1b9b      	subs	r3, r3, r6
 8005d64:	60a3      	str	r3, [r4, #8]
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	4433      	add	r3, r6
 8005d6a:	6023      	str	r3, [r4, #0]
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d72:	462a      	mov	r2, r5
 8005d74:	f000 fa36 	bl	80061e4 <_realloc_r>
 8005d78:	4606      	mov	r6, r0
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	d1e0      	bne.n	8005d40 <__ssputs_r+0x5c>
 8005d7e:	6921      	ldr	r1, [r4, #16]
 8005d80:	4650      	mov	r0, sl
 8005d82:	f7ff fb2d 	bl	80053e0 <_free_r>
 8005d86:	230c      	movs	r3, #12
 8005d88:	f8ca 3000 	str.w	r3, [sl]
 8005d8c:	89a3      	ldrh	r3, [r4, #12]
 8005d8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d92:	81a3      	strh	r3, [r4, #12]
 8005d94:	f04f 30ff 	mov.w	r0, #4294967295
 8005d98:	e7e9      	b.n	8005d6e <__ssputs_r+0x8a>
	...

08005d9c <_svfiprintf_r>:
 8005d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da0:	4698      	mov	r8, r3
 8005da2:	898b      	ldrh	r3, [r1, #12]
 8005da4:	061b      	lsls	r3, r3, #24
 8005da6:	b09d      	sub	sp, #116	@ 0x74
 8005da8:	4607      	mov	r7, r0
 8005daa:	460d      	mov	r5, r1
 8005dac:	4614      	mov	r4, r2
 8005dae:	d510      	bpl.n	8005dd2 <_svfiprintf_r+0x36>
 8005db0:	690b      	ldr	r3, [r1, #16]
 8005db2:	b973      	cbnz	r3, 8005dd2 <_svfiprintf_r+0x36>
 8005db4:	2140      	movs	r1, #64	@ 0x40
 8005db6:	f7ff fb87 	bl	80054c8 <_malloc_r>
 8005dba:	6028      	str	r0, [r5, #0]
 8005dbc:	6128      	str	r0, [r5, #16]
 8005dbe:	b930      	cbnz	r0, 8005dce <_svfiprintf_r+0x32>
 8005dc0:	230c      	movs	r3, #12
 8005dc2:	603b      	str	r3, [r7, #0]
 8005dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc8:	b01d      	add	sp, #116	@ 0x74
 8005dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dce:	2340      	movs	r3, #64	@ 0x40
 8005dd0:	616b      	str	r3, [r5, #20]
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dd6:	2320      	movs	r3, #32
 8005dd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ddc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005de0:	2330      	movs	r3, #48	@ 0x30
 8005de2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005f80 <_svfiprintf_r+0x1e4>
 8005de6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005dea:	f04f 0901 	mov.w	r9, #1
 8005dee:	4623      	mov	r3, r4
 8005df0:	469a      	mov	sl, r3
 8005df2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005df6:	b10a      	cbz	r2, 8005dfc <_svfiprintf_r+0x60>
 8005df8:	2a25      	cmp	r2, #37	@ 0x25
 8005dfa:	d1f9      	bne.n	8005df0 <_svfiprintf_r+0x54>
 8005dfc:	ebba 0b04 	subs.w	fp, sl, r4
 8005e00:	d00b      	beq.n	8005e1a <_svfiprintf_r+0x7e>
 8005e02:	465b      	mov	r3, fp
 8005e04:	4622      	mov	r2, r4
 8005e06:	4629      	mov	r1, r5
 8005e08:	4638      	mov	r0, r7
 8005e0a:	f7ff ff6b 	bl	8005ce4 <__ssputs_r>
 8005e0e:	3001      	adds	r0, #1
 8005e10:	f000 80a7 	beq.w	8005f62 <_svfiprintf_r+0x1c6>
 8005e14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e16:	445a      	add	r2, fp
 8005e18:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e1a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 809f 	beq.w	8005f62 <_svfiprintf_r+0x1c6>
 8005e24:	2300      	movs	r3, #0
 8005e26:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e2e:	f10a 0a01 	add.w	sl, sl, #1
 8005e32:	9304      	str	r3, [sp, #16]
 8005e34:	9307      	str	r3, [sp, #28]
 8005e36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e3c:	4654      	mov	r4, sl
 8005e3e:	2205      	movs	r2, #5
 8005e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e44:	484e      	ldr	r0, [pc, #312]	@ (8005f80 <_svfiprintf_r+0x1e4>)
 8005e46:	f7fa f9d3 	bl	80001f0 <memchr>
 8005e4a:	9a04      	ldr	r2, [sp, #16]
 8005e4c:	b9d8      	cbnz	r0, 8005e86 <_svfiprintf_r+0xea>
 8005e4e:	06d0      	lsls	r0, r2, #27
 8005e50:	bf44      	itt	mi
 8005e52:	2320      	movmi	r3, #32
 8005e54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e58:	0711      	lsls	r1, r2, #28
 8005e5a:	bf44      	itt	mi
 8005e5c:	232b      	movmi	r3, #43	@ 0x2b
 8005e5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e62:	f89a 3000 	ldrb.w	r3, [sl]
 8005e66:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e68:	d015      	beq.n	8005e96 <_svfiprintf_r+0xfa>
 8005e6a:	9a07      	ldr	r2, [sp, #28]
 8005e6c:	4654      	mov	r4, sl
 8005e6e:	2000      	movs	r0, #0
 8005e70:	f04f 0c0a 	mov.w	ip, #10
 8005e74:	4621      	mov	r1, r4
 8005e76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e7a:	3b30      	subs	r3, #48	@ 0x30
 8005e7c:	2b09      	cmp	r3, #9
 8005e7e:	d94b      	bls.n	8005f18 <_svfiprintf_r+0x17c>
 8005e80:	b1b0      	cbz	r0, 8005eb0 <_svfiprintf_r+0x114>
 8005e82:	9207      	str	r2, [sp, #28]
 8005e84:	e014      	b.n	8005eb0 <_svfiprintf_r+0x114>
 8005e86:	eba0 0308 	sub.w	r3, r0, r8
 8005e8a:	fa09 f303 	lsl.w	r3, r9, r3
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	9304      	str	r3, [sp, #16]
 8005e92:	46a2      	mov	sl, r4
 8005e94:	e7d2      	b.n	8005e3c <_svfiprintf_r+0xa0>
 8005e96:	9b03      	ldr	r3, [sp, #12]
 8005e98:	1d19      	adds	r1, r3, #4
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	9103      	str	r1, [sp, #12]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	bfbb      	ittet	lt
 8005ea2:	425b      	neglt	r3, r3
 8005ea4:	f042 0202 	orrlt.w	r2, r2, #2
 8005ea8:	9307      	strge	r3, [sp, #28]
 8005eaa:	9307      	strlt	r3, [sp, #28]
 8005eac:	bfb8      	it	lt
 8005eae:	9204      	strlt	r2, [sp, #16]
 8005eb0:	7823      	ldrb	r3, [r4, #0]
 8005eb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005eb4:	d10a      	bne.n	8005ecc <_svfiprintf_r+0x130>
 8005eb6:	7863      	ldrb	r3, [r4, #1]
 8005eb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005eba:	d132      	bne.n	8005f22 <_svfiprintf_r+0x186>
 8005ebc:	9b03      	ldr	r3, [sp, #12]
 8005ebe:	1d1a      	adds	r2, r3, #4
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	9203      	str	r2, [sp, #12]
 8005ec4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ec8:	3402      	adds	r4, #2
 8005eca:	9305      	str	r3, [sp, #20]
 8005ecc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005f90 <_svfiprintf_r+0x1f4>
 8005ed0:	7821      	ldrb	r1, [r4, #0]
 8005ed2:	2203      	movs	r2, #3
 8005ed4:	4650      	mov	r0, sl
 8005ed6:	f7fa f98b 	bl	80001f0 <memchr>
 8005eda:	b138      	cbz	r0, 8005eec <_svfiprintf_r+0x150>
 8005edc:	9b04      	ldr	r3, [sp, #16]
 8005ede:	eba0 000a 	sub.w	r0, r0, sl
 8005ee2:	2240      	movs	r2, #64	@ 0x40
 8005ee4:	4082      	lsls	r2, r0
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	3401      	adds	r4, #1
 8005eea:	9304      	str	r3, [sp, #16]
 8005eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ef0:	4824      	ldr	r0, [pc, #144]	@ (8005f84 <_svfiprintf_r+0x1e8>)
 8005ef2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ef6:	2206      	movs	r2, #6
 8005ef8:	f7fa f97a 	bl	80001f0 <memchr>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	d036      	beq.n	8005f6e <_svfiprintf_r+0x1d2>
 8005f00:	4b21      	ldr	r3, [pc, #132]	@ (8005f88 <_svfiprintf_r+0x1ec>)
 8005f02:	bb1b      	cbnz	r3, 8005f4c <_svfiprintf_r+0x1b0>
 8005f04:	9b03      	ldr	r3, [sp, #12]
 8005f06:	3307      	adds	r3, #7
 8005f08:	f023 0307 	bic.w	r3, r3, #7
 8005f0c:	3308      	adds	r3, #8
 8005f0e:	9303      	str	r3, [sp, #12]
 8005f10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f12:	4433      	add	r3, r6
 8005f14:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f16:	e76a      	b.n	8005dee <_svfiprintf_r+0x52>
 8005f18:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f1c:	460c      	mov	r4, r1
 8005f1e:	2001      	movs	r0, #1
 8005f20:	e7a8      	b.n	8005e74 <_svfiprintf_r+0xd8>
 8005f22:	2300      	movs	r3, #0
 8005f24:	3401      	adds	r4, #1
 8005f26:	9305      	str	r3, [sp, #20]
 8005f28:	4619      	mov	r1, r3
 8005f2a:	f04f 0c0a 	mov.w	ip, #10
 8005f2e:	4620      	mov	r0, r4
 8005f30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f34:	3a30      	subs	r2, #48	@ 0x30
 8005f36:	2a09      	cmp	r2, #9
 8005f38:	d903      	bls.n	8005f42 <_svfiprintf_r+0x1a6>
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d0c6      	beq.n	8005ecc <_svfiprintf_r+0x130>
 8005f3e:	9105      	str	r1, [sp, #20]
 8005f40:	e7c4      	b.n	8005ecc <_svfiprintf_r+0x130>
 8005f42:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f46:	4604      	mov	r4, r0
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e7f0      	b.n	8005f2e <_svfiprintf_r+0x192>
 8005f4c:	ab03      	add	r3, sp, #12
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	462a      	mov	r2, r5
 8005f52:	4b0e      	ldr	r3, [pc, #56]	@ (8005f8c <_svfiprintf_r+0x1f0>)
 8005f54:	a904      	add	r1, sp, #16
 8005f56:	4638      	mov	r0, r7
 8005f58:	f7fd fe98 	bl	8003c8c <_printf_float>
 8005f5c:	1c42      	adds	r2, r0, #1
 8005f5e:	4606      	mov	r6, r0
 8005f60:	d1d6      	bne.n	8005f10 <_svfiprintf_r+0x174>
 8005f62:	89ab      	ldrh	r3, [r5, #12]
 8005f64:	065b      	lsls	r3, r3, #25
 8005f66:	f53f af2d 	bmi.w	8005dc4 <_svfiprintf_r+0x28>
 8005f6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f6c:	e72c      	b.n	8005dc8 <_svfiprintf_r+0x2c>
 8005f6e:	ab03      	add	r3, sp, #12
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	462a      	mov	r2, r5
 8005f74:	4b05      	ldr	r3, [pc, #20]	@ (8005f8c <_svfiprintf_r+0x1f0>)
 8005f76:	a904      	add	r1, sp, #16
 8005f78:	4638      	mov	r0, r7
 8005f7a:	f7fe f91f 	bl	80041bc <_printf_i>
 8005f7e:	e7ed      	b.n	8005f5c <_svfiprintf_r+0x1c0>
 8005f80:	08007e30 	.word	0x08007e30
 8005f84:	08007e3a 	.word	0x08007e3a
 8005f88:	08003c8d 	.word	0x08003c8d
 8005f8c:	08005ce5 	.word	0x08005ce5
 8005f90:	08007e36 	.word	0x08007e36

08005f94 <__sflush_r>:
 8005f94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f9c:	0716      	lsls	r6, r2, #28
 8005f9e:	4605      	mov	r5, r0
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	d454      	bmi.n	800604e <__sflush_r+0xba>
 8005fa4:	684b      	ldr	r3, [r1, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	dc02      	bgt.n	8005fb0 <__sflush_r+0x1c>
 8005faa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	dd48      	ble.n	8006042 <__sflush_r+0xae>
 8005fb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fb2:	2e00      	cmp	r6, #0
 8005fb4:	d045      	beq.n	8006042 <__sflush_r+0xae>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005fbc:	682f      	ldr	r7, [r5, #0]
 8005fbe:	6a21      	ldr	r1, [r4, #32]
 8005fc0:	602b      	str	r3, [r5, #0]
 8005fc2:	d030      	beq.n	8006026 <__sflush_r+0x92>
 8005fc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005fc6:	89a3      	ldrh	r3, [r4, #12]
 8005fc8:	0759      	lsls	r1, r3, #29
 8005fca:	d505      	bpl.n	8005fd8 <__sflush_r+0x44>
 8005fcc:	6863      	ldr	r3, [r4, #4]
 8005fce:	1ad2      	subs	r2, r2, r3
 8005fd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005fd2:	b10b      	cbz	r3, 8005fd8 <__sflush_r+0x44>
 8005fd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005fd6:	1ad2      	subs	r2, r2, r3
 8005fd8:	2300      	movs	r3, #0
 8005fda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fdc:	6a21      	ldr	r1, [r4, #32]
 8005fde:	4628      	mov	r0, r5
 8005fe0:	47b0      	blx	r6
 8005fe2:	1c43      	adds	r3, r0, #1
 8005fe4:	89a3      	ldrh	r3, [r4, #12]
 8005fe6:	d106      	bne.n	8005ff6 <__sflush_r+0x62>
 8005fe8:	6829      	ldr	r1, [r5, #0]
 8005fea:	291d      	cmp	r1, #29
 8005fec:	d82b      	bhi.n	8006046 <__sflush_r+0xb2>
 8005fee:	4a2a      	ldr	r2, [pc, #168]	@ (8006098 <__sflush_r+0x104>)
 8005ff0:	410a      	asrs	r2, r1
 8005ff2:	07d6      	lsls	r6, r2, #31
 8005ff4:	d427      	bmi.n	8006046 <__sflush_r+0xb2>
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	6062      	str	r2, [r4, #4]
 8005ffa:	04d9      	lsls	r1, r3, #19
 8005ffc:	6922      	ldr	r2, [r4, #16]
 8005ffe:	6022      	str	r2, [r4, #0]
 8006000:	d504      	bpl.n	800600c <__sflush_r+0x78>
 8006002:	1c42      	adds	r2, r0, #1
 8006004:	d101      	bne.n	800600a <__sflush_r+0x76>
 8006006:	682b      	ldr	r3, [r5, #0]
 8006008:	b903      	cbnz	r3, 800600c <__sflush_r+0x78>
 800600a:	6560      	str	r0, [r4, #84]	@ 0x54
 800600c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800600e:	602f      	str	r7, [r5, #0]
 8006010:	b1b9      	cbz	r1, 8006042 <__sflush_r+0xae>
 8006012:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006016:	4299      	cmp	r1, r3
 8006018:	d002      	beq.n	8006020 <__sflush_r+0x8c>
 800601a:	4628      	mov	r0, r5
 800601c:	f7ff f9e0 	bl	80053e0 <_free_r>
 8006020:	2300      	movs	r3, #0
 8006022:	6363      	str	r3, [r4, #52]	@ 0x34
 8006024:	e00d      	b.n	8006042 <__sflush_r+0xae>
 8006026:	2301      	movs	r3, #1
 8006028:	4628      	mov	r0, r5
 800602a:	47b0      	blx	r6
 800602c:	4602      	mov	r2, r0
 800602e:	1c50      	adds	r0, r2, #1
 8006030:	d1c9      	bne.n	8005fc6 <__sflush_r+0x32>
 8006032:	682b      	ldr	r3, [r5, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d0c6      	beq.n	8005fc6 <__sflush_r+0x32>
 8006038:	2b1d      	cmp	r3, #29
 800603a:	d001      	beq.n	8006040 <__sflush_r+0xac>
 800603c:	2b16      	cmp	r3, #22
 800603e:	d11e      	bne.n	800607e <__sflush_r+0xea>
 8006040:	602f      	str	r7, [r5, #0]
 8006042:	2000      	movs	r0, #0
 8006044:	e022      	b.n	800608c <__sflush_r+0xf8>
 8006046:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800604a:	b21b      	sxth	r3, r3
 800604c:	e01b      	b.n	8006086 <__sflush_r+0xf2>
 800604e:	690f      	ldr	r7, [r1, #16]
 8006050:	2f00      	cmp	r7, #0
 8006052:	d0f6      	beq.n	8006042 <__sflush_r+0xae>
 8006054:	0793      	lsls	r3, r2, #30
 8006056:	680e      	ldr	r6, [r1, #0]
 8006058:	bf08      	it	eq
 800605a:	694b      	ldreq	r3, [r1, #20]
 800605c:	600f      	str	r7, [r1, #0]
 800605e:	bf18      	it	ne
 8006060:	2300      	movne	r3, #0
 8006062:	eba6 0807 	sub.w	r8, r6, r7
 8006066:	608b      	str	r3, [r1, #8]
 8006068:	f1b8 0f00 	cmp.w	r8, #0
 800606c:	dde9      	ble.n	8006042 <__sflush_r+0xae>
 800606e:	6a21      	ldr	r1, [r4, #32]
 8006070:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006072:	4643      	mov	r3, r8
 8006074:	463a      	mov	r2, r7
 8006076:	4628      	mov	r0, r5
 8006078:	47b0      	blx	r6
 800607a:	2800      	cmp	r0, #0
 800607c:	dc08      	bgt.n	8006090 <__sflush_r+0xfc>
 800607e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006086:	81a3      	strh	r3, [r4, #12]
 8006088:	f04f 30ff 	mov.w	r0, #4294967295
 800608c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006090:	4407      	add	r7, r0
 8006092:	eba8 0800 	sub.w	r8, r8, r0
 8006096:	e7e7      	b.n	8006068 <__sflush_r+0xd4>
 8006098:	dfbffffe 	.word	0xdfbffffe

0800609c <_fflush_r>:
 800609c:	b538      	push	{r3, r4, r5, lr}
 800609e:	690b      	ldr	r3, [r1, #16]
 80060a0:	4605      	mov	r5, r0
 80060a2:	460c      	mov	r4, r1
 80060a4:	b913      	cbnz	r3, 80060ac <_fflush_r+0x10>
 80060a6:	2500      	movs	r5, #0
 80060a8:	4628      	mov	r0, r5
 80060aa:	bd38      	pop	{r3, r4, r5, pc}
 80060ac:	b118      	cbz	r0, 80060b6 <_fflush_r+0x1a>
 80060ae:	6a03      	ldr	r3, [r0, #32]
 80060b0:	b90b      	cbnz	r3, 80060b6 <_fflush_r+0x1a>
 80060b2:	f7fe fa2f 	bl	8004514 <__sinit>
 80060b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d0f3      	beq.n	80060a6 <_fflush_r+0xa>
 80060be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80060c0:	07d0      	lsls	r0, r2, #31
 80060c2:	d404      	bmi.n	80060ce <_fflush_r+0x32>
 80060c4:	0599      	lsls	r1, r3, #22
 80060c6:	d402      	bmi.n	80060ce <_fflush_r+0x32>
 80060c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060ca:	f7fe fb3a 	bl	8004742 <__retarget_lock_acquire_recursive>
 80060ce:	4628      	mov	r0, r5
 80060d0:	4621      	mov	r1, r4
 80060d2:	f7ff ff5f 	bl	8005f94 <__sflush_r>
 80060d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060d8:	07da      	lsls	r2, r3, #31
 80060da:	4605      	mov	r5, r0
 80060dc:	d4e4      	bmi.n	80060a8 <_fflush_r+0xc>
 80060de:	89a3      	ldrh	r3, [r4, #12]
 80060e0:	059b      	lsls	r3, r3, #22
 80060e2:	d4e1      	bmi.n	80060a8 <_fflush_r+0xc>
 80060e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060e6:	f7fe fb2d 	bl	8004744 <__retarget_lock_release_recursive>
 80060ea:	e7dd      	b.n	80060a8 <_fflush_r+0xc>

080060ec <memmove>:
 80060ec:	4288      	cmp	r0, r1
 80060ee:	b510      	push	{r4, lr}
 80060f0:	eb01 0402 	add.w	r4, r1, r2
 80060f4:	d902      	bls.n	80060fc <memmove+0x10>
 80060f6:	4284      	cmp	r4, r0
 80060f8:	4623      	mov	r3, r4
 80060fa:	d807      	bhi.n	800610c <memmove+0x20>
 80060fc:	1e43      	subs	r3, r0, #1
 80060fe:	42a1      	cmp	r1, r4
 8006100:	d008      	beq.n	8006114 <memmove+0x28>
 8006102:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006106:	f803 2f01 	strb.w	r2, [r3, #1]!
 800610a:	e7f8      	b.n	80060fe <memmove+0x12>
 800610c:	4402      	add	r2, r0
 800610e:	4601      	mov	r1, r0
 8006110:	428a      	cmp	r2, r1
 8006112:	d100      	bne.n	8006116 <memmove+0x2a>
 8006114:	bd10      	pop	{r4, pc}
 8006116:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800611a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800611e:	e7f7      	b.n	8006110 <memmove+0x24>

08006120 <_sbrk_r>:
 8006120:	b538      	push	{r3, r4, r5, lr}
 8006122:	4d06      	ldr	r5, [pc, #24]	@ (800613c <_sbrk_r+0x1c>)
 8006124:	2300      	movs	r3, #0
 8006126:	4604      	mov	r4, r0
 8006128:	4608      	mov	r0, r1
 800612a:	602b      	str	r3, [r5, #0]
 800612c:	f7fb fc56 	bl	80019dc <_sbrk>
 8006130:	1c43      	adds	r3, r0, #1
 8006132:	d102      	bne.n	800613a <_sbrk_r+0x1a>
 8006134:	682b      	ldr	r3, [r5, #0]
 8006136:	b103      	cbz	r3, 800613a <_sbrk_r+0x1a>
 8006138:	6023      	str	r3, [r4, #0]
 800613a:	bd38      	pop	{r3, r4, r5, pc}
 800613c:	20000444 	.word	0x20000444

08006140 <memcpy>:
 8006140:	440a      	add	r2, r1
 8006142:	4291      	cmp	r1, r2
 8006144:	f100 33ff 	add.w	r3, r0, #4294967295
 8006148:	d100      	bne.n	800614c <memcpy+0xc>
 800614a:	4770      	bx	lr
 800614c:	b510      	push	{r4, lr}
 800614e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006152:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006156:	4291      	cmp	r1, r2
 8006158:	d1f9      	bne.n	800614e <memcpy+0xe>
 800615a:	bd10      	pop	{r4, pc}

0800615c <__assert_func>:
 800615c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800615e:	4614      	mov	r4, r2
 8006160:	461a      	mov	r2, r3
 8006162:	4b09      	ldr	r3, [pc, #36]	@ (8006188 <__assert_func+0x2c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4605      	mov	r5, r0
 8006168:	68d8      	ldr	r0, [r3, #12]
 800616a:	b954      	cbnz	r4, 8006182 <__assert_func+0x26>
 800616c:	4b07      	ldr	r3, [pc, #28]	@ (800618c <__assert_func+0x30>)
 800616e:	461c      	mov	r4, r3
 8006170:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006174:	9100      	str	r1, [sp, #0]
 8006176:	462b      	mov	r3, r5
 8006178:	4905      	ldr	r1, [pc, #20]	@ (8006190 <__assert_func+0x34>)
 800617a:	f000 f86f 	bl	800625c <fiprintf>
 800617e:	f000 f87f 	bl	8006280 <abort>
 8006182:	4b04      	ldr	r3, [pc, #16]	@ (8006194 <__assert_func+0x38>)
 8006184:	e7f4      	b.n	8006170 <__assert_func+0x14>
 8006186:	bf00      	nop
 8006188:	20000018 	.word	0x20000018
 800618c:	08007e86 	.word	0x08007e86
 8006190:	08007e58 	.word	0x08007e58
 8006194:	08007e4b 	.word	0x08007e4b

08006198 <_calloc_r>:
 8006198:	b570      	push	{r4, r5, r6, lr}
 800619a:	fba1 5402 	umull	r5, r4, r1, r2
 800619e:	b93c      	cbnz	r4, 80061b0 <_calloc_r+0x18>
 80061a0:	4629      	mov	r1, r5
 80061a2:	f7ff f991 	bl	80054c8 <_malloc_r>
 80061a6:	4606      	mov	r6, r0
 80061a8:	b928      	cbnz	r0, 80061b6 <_calloc_r+0x1e>
 80061aa:	2600      	movs	r6, #0
 80061ac:	4630      	mov	r0, r6
 80061ae:	bd70      	pop	{r4, r5, r6, pc}
 80061b0:	220c      	movs	r2, #12
 80061b2:	6002      	str	r2, [r0, #0]
 80061b4:	e7f9      	b.n	80061aa <_calloc_r+0x12>
 80061b6:	462a      	mov	r2, r5
 80061b8:	4621      	mov	r1, r4
 80061ba:	f7fe fa44 	bl	8004646 <memset>
 80061be:	e7f5      	b.n	80061ac <_calloc_r+0x14>

080061c0 <__ascii_mbtowc>:
 80061c0:	b082      	sub	sp, #8
 80061c2:	b901      	cbnz	r1, 80061c6 <__ascii_mbtowc+0x6>
 80061c4:	a901      	add	r1, sp, #4
 80061c6:	b142      	cbz	r2, 80061da <__ascii_mbtowc+0x1a>
 80061c8:	b14b      	cbz	r3, 80061de <__ascii_mbtowc+0x1e>
 80061ca:	7813      	ldrb	r3, [r2, #0]
 80061cc:	600b      	str	r3, [r1, #0]
 80061ce:	7812      	ldrb	r2, [r2, #0]
 80061d0:	1e10      	subs	r0, r2, #0
 80061d2:	bf18      	it	ne
 80061d4:	2001      	movne	r0, #1
 80061d6:	b002      	add	sp, #8
 80061d8:	4770      	bx	lr
 80061da:	4610      	mov	r0, r2
 80061dc:	e7fb      	b.n	80061d6 <__ascii_mbtowc+0x16>
 80061de:	f06f 0001 	mvn.w	r0, #1
 80061e2:	e7f8      	b.n	80061d6 <__ascii_mbtowc+0x16>

080061e4 <_realloc_r>:
 80061e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061e8:	4680      	mov	r8, r0
 80061ea:	4615      	mov	r5, r2
 80061ec:	460c      	mov	r4, r1
 80061ee:	b921      	cbnz	r1, 80061fa <_realloc_r+0x16>
 80061f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061f4:	4611      	mov	r1, r2
 80061f6:	f7ff b967 	b.w	80054c8 <_malloc_r>
 80061fa:	b92a      	cbnz	r2, 8006208 <_realloc_r+0x24>
 80061fc:	f7ff f8f0 	bl	80053e0 <_free_r>
 8006200:	2400      	movs	r4, #0
 8006202:	4620      	mov	r0, r4
 8006204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006208:	f000 f841 	bl	800628e <_malloc_usable_size_r>
 800620c:	4285      	cmp	r5, r0
 800620e:	4606      	mov	r6, r0
 8006210:	d802      	bhi.n	8006218 <_realloc_r+0x34>
 8006212:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006216:	d8f4      	bhi.n	8006202 <_realloc_r+0x1e>
 8006218:	4629      	mov	r1, r5
 800621a:	4640      	mov	r0, r8
 800621c:	f7ff f954 	bl	80054c8 <_malloc_r>
 8006220:	4607      	mov	r7, r0
 8006222:	2800      	cmp	r0, #0
 8006224:	d0ec      	beq.n	8006200 <_realloc_r+0x1c>
 8006226:	42b5      	cmp	r5, r6
 8006228:	462a      	mov	r2, r5
 800622a:	4621      	mov	r1, r4
 800622c:	bf28      	it	cs
 800622e:	4632      	movcs	r2, r6
 8006230:	f7ff ff86 	bl	8006140 <memcpy>
 8006234:	4621      	mov	r1, r4
 8006236:	4640      	mov	r0, r8
 8006238:	f7ff f8d2 	bl	80053e0 <_free_r>
 800623c:	463c      	mov	r4, r7
 800623e:	e7e0      	b.n	8006202 <_realloc_r+0x1e>

08006240 <__ascii_wctomb>:
 8006240:	4603      	mov	r3, r0
 8006242:	4608      	mov	r0, r1
 8006244:	b141      	cbz	r1, 8006258 <__ascii_wctomb+0x18>
 8006246:	2aff      	cmp	r2, #255	@ 0xff
 8006248:	d904      	bls.n	8006254 <__ascii_wctomb+0x14>
 800624a:	228a      	movs	r2, #138	@ 0x8a
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	f04f 30ff 	mov.w	r0, #4294967295
 8006252:	4770      	bx	lr
 8006254:	700a      	strb	r2, [r1, #0]
 8006256:	2001      	movs	r0, #1
 8006258:	4770      	bx	lr
	...

0800625c <fiprintf>:
 800625c:	b40e      	push	{r1, r2, r3}
 800625e:	b503      	push	{r0, r1, lr}
 8006260:	4601      	mov	r1, r0
 8006262:	ab03      	add	r3, sp, #12
 8006264:	4805      	ldr	r0, [pc, #20]	@ (800627c <fiprintf+0x20>)
 8006266:	f853 2b04 	ldr.w	r2, [r3], #4
 800626a:	6800      	ldr	r0, [r0, #0]
 800626c:	9301      	str	r3, [sp, #4]
 800626e:	f000 f83f 	bl	80062f0 <_vfiprintf_r>
 8006272:	b002      	add	sp, #8
 8006274:	f85d eb04 	ldr.w	lr, [sp], #4
 8006278:	b003      	add	sp, #12
 800627a:	4770      	bx	lr
 800627c:	20000018 	.word	0x20000018

08006280 <abort>:
 8006280:	b508      	push	{r3, lr}
 8006282:	2006      	movs	r0, #6
 8006284:	f000 fa08 	bl	8006698 <raise>
 8006288:	2001      	movs	r0, #1
 800628a:	f7fb fb2e 	bl	80018ea <_exit>

0800628e <_malloc_usable_size_r>:
 800628e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006292:	1f18      	subs	r0, r3, #4
 8006294:	2b00      	cmp	r3, #0
 8006296:	bfbc      	itt	lt
 8006298:	580b      	ldrlt	r3, [r1, r0]
 800629a:	18c0      	addlt	r0, r0, r3
 800629c:	4770      	bx	lr

0800629e <__sfputc_r>:
 800629e:	6893      	ldr	r3, [r2, #8]
 80062a0:	3b01      	subs	r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	b410      	push	{r4}
 80062a6:	6093      	str	r3, [r2, #8]
 80062a8:	da08      	bge.n	80062bc <__sfputc_r+0x1e>
 80062aa:	6994      	ldr	r4, [r2, #24]
 80062ac:	42a3      	cmp	r3, r4
 80062ae:	db01      	blt.n	80062b4 <__sfputc_r+0x16>
 80062b0:	290a      	cmp	r1, #10
 80062b2:	d103      	bne.n	80062bc <__sfputc_r+0x1e>
 80062b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062b8:	f000 b932 	b.w	8006520 <__swbuf_r>
 80062bc:	6813      	ldr	r3, [r2, #0]
 80062be:	1c58      	adds	r0, r3, #1
 80062c0:	6010      	str	r0, [r2, #0]
 80062c2:	7019      	strb	r1, [r3, #0]
 80062c4:	4608      	mov	r0, r1
 80062c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <__sfputs_r>:
 80062cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ce:	4606      	mov	r6, r0
 80062d0:	460f      	mov	r7, r1
 80062d2:	4614      	mov	r4, r2
 80062d4:	18d5      	adds	r5, r2, r3
 80062d6:	42ac      	cmp	r4, r5
 80062d8:	d101      	bne.n	80062de <__sfputs_r+0x12>
 80062da:	2000      	movs	r0, #0
 80062dc:	e007      	b.n	80062ee <__sfputs_r+0x22>
 80062de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062e2:	463a      	mov	r2, r7
 80062e4:	4630      	mov	r0, r6
 80062e6:	f7ff ffda 	bl	800629e <__sfputc_r>
 80062ea:	1c43      	adds	r3, r0, #1
 80062ec:	d1f3      	bne.n	80062d6 <__sfputs_r+0xa>
 80062ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080062f0 <_vfiprintf_r>:
 80062f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f4:	460d      	mov	r5, r1
 80062f6:	b09d      	sub	sp, #116	@ 0x74
 80062f8:	4614      	mov	r4, r2
 80062fa:	4698      	mov	r8, r3
 80062fc:	4606      	mov	r6, r0
 80062fe:	b118      	cbz	r0, 8006308 <_vfiprintf_r+0x18>
 8006300:	6a03      	ldr	r3, [r0, #32]
 8006302:	b90b      	cbnz	r3, 8006308 <_vfiprintf_r+0x18>
 8006304:	f7fe f906 	bl	8004514 <__sinit>
 8006308:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800630a:	07d9      	lsls	r1, r3, #31
 800630c:	d405      	bmi.n	800631a <_vfiprintf_r+0x2a>
 800630e:	89ab      	ldrh	r3, [r5, #12]
 8006310:	059a      	lsls	r2, r3, #22
 8006312:	d402      	bmi.n	800631a <_vfiprintf_r+0x2a>
 8006314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006316:	f7fe fa14 	bl	8004742 <__retarget_lock_acquire_recursive>
 800631a:	89ab      	ldrh	r3, [r5, #12]
 800631c:	071b      	lsls	r3, r3, #28
 800631e:	d501      	bpl.n	8006324 <_vfiprintf_r+0x34>
 8006320:	692b      	ldr	r3, [r5, #16]
 8006322:	b99b      	cbnz	r3, 800634c <_vfiprintf_r+0x5c>
 8006324:	4629      	mov	r1, r5
 8006326:	4630      	mov	r0, r6
 8006328:	f000 f938 	bl	800659c <__swsetup_r>
 800632c:	b170      	cbz	r0, 800634c <_vfiprintf_r+0x5c>
 800632e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006330:	07dc      	lsls	r4, r3, #31
 8006332:	d504      	bpl.n	800633e <_vfiprintf_r+0x4e>
 8006334:	f04f 30ff 	mov.w	r0, #4294967295
 8006338:	b01d      	add	sp, #116	@ 0x74
 800633a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800633e:	89ab      	ldrh	r3, [r5, #12]
 8006340:	0598      	lsls	r0, r3, #22
 8006342:	d4f7      	bmi.n	8006334 <_vfiprintf_r+0x44>
 8006344:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006346:	f7fe f9fd 	bl	8004744 <__retarget_lock_release_recursive>
 800634a:	e7f3      	b.n	8006334 <_vfiprintf_r+0x44>
 800634c:	2300      	movs	r3, #0
 800634e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006350:	2320      	movs	r3, #32
 8006352:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006356:	f8cd 800c 	str.w	r8, [sp, #12]
 800635a:	2330      	movs	r3, #48	@ 0x30
 800635c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800650c <_vfiprintf_r+0x21c>
 8006360:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006364:	f04f 0901 	mov.w	r9, #1
 8006368:	4623      	mov	r3, r4
 800636a:	469a      	mov	sl, r3
 800636c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006370:	b10a      	cbz	r2, 8006376 <_vfiprintf_r+0x86>
 8006372:	2a25      	cmp	r2, #37	@ 0x25
 8006374:	d1f9      	bne.n	800636a <_vfiprintf_r+0x7a>
 8006376:	ebba 0b04 	subs.w	fp, sl, r4
 800637a:	d00b      	beq.n	8006394 <_vfiprintf_r+0xa4>
 800637c:	465b      	mov	r3, fp
 800637e:	4622      	mov	r2, r4
 8006380:	4629      	mov	r1, r5
 8006382:	4630      	mov	r0, r6
 8006384:	f7ff ffa2 	bl	80062cc <__sfputs_r>
 8006388:	3001      	adds	r0, #1
 800638a:	f000 80a7 	beq.w	80064dc <_vfiprintf_r+0x1ec>
 800638e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006390:	445a      	add	r2, fp
 8006392:	9209      	str	r2, [sp, #36]	@ 0x24
 8006394:	f89a 3000 	ldrb.w	r3, [sl]
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 809f 	beq.w	80064dc <_vfiprintf_r+0x1ec>
 800639e:	2300      	movs	r3, #0
 80063a0:	f04f 32ff 	mov.w	r2, #4294967295
 80063a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063a8:	f10a 0a01 	add.w	sl, sl, #1
 80063ac:	9304      	str	r3, [sp, #16]
 80063ae:	9307      	str	r3, [sp, #28]
 80063b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80063b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80063b6:	4654      	mov	r4, sl
 80063b8:	2205      	movs	r2, #5
 80063ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063be:	4853      	ldr	r0, [pc, #332]	@ (800650c <_vfiprintf_r+0x21c>)
 80063c0:	f7f9 ff16 	bl	80001f0 <memchr>
 80063c4:	9a04      	ldr	r2, [sp, #16]
 80063c6:	b9d8      	cbnz	r0, 8006400 <_vfiprintf_r+0x110>
 80063c8:	06d1      	lsls	r1, r2, #27
 80063ca:	bf44      	itt	mi
 80063cc:	2320      	movmi	r3, #32
 80063ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063d2:	0713      	lsls	r3, r2, #28
 80063d4:	bf44      	itt	mi
 80063d6:	232b      	movmi	r3, #43	@ 0x2b
 80063d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063dc:	f89a 3000 	ldrb.w	r3, [sl]
 80063e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80063e2:	d015      	beq.n	8006410 <_vfiprintf_r+0x120>
 80063e4:	9a07      	ldr	r2, [sp, #28]
 80063e6:	4654      	mov	r4, sl
 80063e8:	2000      	movs	r0, #0
 80063ea:	f04f 0c0a 	mov.w	ip, #10
 80063ee:	4621      	mov	r1, r4
 80063f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063f4:	3b30      	subs	r3, #48	@ 0x30
 80063f6:	2b09      	cmp	r3, #9
 80063f8:	d94b      	bls.n	8006492 <_vfiprintf_r+0x1a2>
 80063fa:	b1b0      	cbz	r0, 800642a <_vfiprintf_r+0x13a>
 80063fc:	9207      	str	r2, [sp, #28]
 80063fe:	e014      	b.n	800642a <_vfiprintf_r+0x13a>
 8006400:	eba0 0308 	sub.w	r3, r0, r8
 8006404:	fa09 f303 	lsl.w	r3, r9, r3
 8006408:	4313      	orrs	r3, r2
 800640a:	9304      	str	r3, [sp, #16]
 800640c:	46a2      	mov	sl, r4
 800640e:	e7d2      	b.n	80063b6 <_vfiprintf_r+0xc6>
 8006410:	9b03      	ldr	r3, [sp, #12]
 8006412:	1d19      	adds	r1, r3, #4
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	9103      	str	r1, [sp, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	bfbb      	ittet	lt
 800641c:	425b      	neglt	r3, r3
 800641e:	f042 0202 	orrlt.w	r2, r2, #2
 8006422:	9307      	strge	r3, [sp, #28]
 8006424:	9307      	strlt	r3, [sp, #28]
 8006426:	bfb8      	it	lt
 8006428:	9204      	strlt	r2, [sp, #16]
 800642a:	7823      	ldrb	r3, [r4, #0]
 800642c:	2b2e      	cmp	r3, #46	@ 0x2e
 800642e:	d10a      	bne.n	8006446 <_vfiprintf_r+0x156>
 8006430:	7863      	ldrb	r3, [r4, #1]
 8006432:	2b2a      	cmp	r3, #42	@ 0x2a
 8006434:	d132      	bne.n	800649c <_vfiprintf_r+0x1ac>
 8006436:	9b03      	ldr	r3, [sp, #12]
 8006438:	1d1a      	adds	r2, r3, #4
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	9203      	str	r2, [sp, #12]
 800643e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006442:	3402      	adds	r4, #2
 8006444:	9305      	str	r3, [sp, #20]
 8006446:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800651c <_vfiprintf_r+0x22c>
 800644a:	7821      	ldrb	r1, [r4, #0]
 800644c:	2203      	movs	r2, #3
 800644e:	4650      	mov	r0, sl
 8006450:	f7f9 fece 	bl	80001f0 <memchr>
 8006454:	b138      	cbz	r0, 8006466 <_vfiprintf_r+0x176>
 8006456:	9b04      	ldr	r3, [sp, #16]
 8006458:	eba0 000a 	sub.w	r0, r0, sl
 800645c:	2240      	movs	r2, #64	@ 0x40
 800645e:	4082      	lsls	r2, r0
 8006460:	4313      	orrs	r3, r2
 8006462:	3401      	adds	r4, #1
 8006464:	9304      	str	r3, [sp, #16]
 8006466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800646a:	4829      	ldr	r0, [pc, #164]	@ (8006510 <_vfiprintf_r+0x220>)
 800646c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006470:	2206      	movs	r2, #6
 8006472:	f7f9 febd 	bl	80001f0 <memchr>
 8006476:	2800      	cmp	r0, #0
 8006478:	d03f      	beq.n	80064fa <_vfiprintf_r+0x20a>
 800647a:	4b26      	ldr	r3, [pc, #152]	@ (8006514 <_vfiprintf_r+0x224>)
 800647c:	bb1b      	cbnz	r3, 80064c6 <_vfiprintf_r+0x1d6>
 800647e:	9b03      	ldr	r3, [sp, #12]
 8006480:	3307      	adds	r3, #7
 8006482:	f023 0307 	bic.w	r3, r3, #7
 8006486:	3308      	adds	r3, #8
 8006488:	9303      	str	r3, [sp, #12]
 800648a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800648c:	443b      	add	r3, r7
 800648e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006490:	e76a      	b.n	8006368 <_vfiprintf_r+0x78>
 8006492:	fb0c 3202 	mla	r2, ip, r2, r3
 8006496:	460c      	mov	r4, r1
 8006498:	2001      	movs	r0, #1
 800649a:	e7a8      	b.n	80063ee <_vfiprintf_r+0xfe>
 800649c:	2300      	movs	r3, #0
 800649e:	3401      	adds	r4, #1
 80064a0:	9305      	str	r3, [sp, #20]
 80064a2:	4619      	mov	r1, r3
 80064a4:	f04f 0c0a 	mov.w	ip, #10
 80064a8:	4620      	mov	r0, r4
 80064aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064ae:	3a30      	subs	r2, #48	@ 0x30
 80064b0:	2a09      	cmp	r2, #9
 80064b2:	d903      	bls.n	80064bc <_vfiprintf_r+0x1cc>
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d0c6      	beq.n	8006446 <_vfiprintf_r+0x156>
 80064b8:	9105      	str	r1, [sp, #20]
 80064ba:	e7c4      	b.n	8006446 <_vfiprintf_r+0x156>
 80064bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80064c0:	4604      	mov	r4, r0
 80064c2:	2301      	movs	r3, #1
 80064c4:	e7f0      	b.n	80064a8 <_vfiprintf_r+0x1b8>
 80064c6:	ab03      	add	r3, sp, #12
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	462a      	mov	r2, r5
 80064cc:	4b12      	ldr	r3, [pc, #72]	@ (8006518 <_vfiprintf_r+0x228>)
 80064ce:	a904      	add	r1, sp, #16
 80064d0:	4630      	mov	r0, r6
 80064d2:	f7fd fbdb 	bl	8003c8c <_printf_float>
 80064d6:	4607      	mov	r7, r0
 80064d8:	1c78      	adds	r0, r7, #1
 80064da:	d1d6      	bne.n	800648a <_vfiprintf_r+0x19a>
 80064dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064de:	07d9      	lsls	r1, r3, #31
 80064e0:	d405      	bmi.n	80064ee <_vfiprintf_r+0x1fe>
 80064e2:	89ab      	ldrh	r3, [r5, #12]
 80064e4:	059a      	lsls	r2, r3, #22
 80064e6:	d402      	bmi.n	80064ee <_vfiprintf_r+0x1fe>
 80064e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064ea:	f7fe f92b 	bl	8004744 <__retarget_lock_release_recursive>
 80064ee:	89ab      	ldrh	r3, [r5, #12]
 80064f0:	065b      	lsls	r3, r3, #25
 80064f2:	f53f af1f 	bmi.w	8006334 <_vfiprintf_r+0x44>
 80064f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064f8:	e71e      	b.n	8006338 <_vfiprintf_r+0x48>
 80064fa:	ab03      	add	r3, sp, #12
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	462a      	mov	r2, r5
 8006500:	4b05      	ldr	r3, [pc, #20]	@ (8006518 <_vfiprintf_r+0x228>)
 8006502:	a904      	add	r1, sp, #16
 8006504:	4630      	mov	r0, r6
 8006506:	f7fd fe59 	bl	80041bc <_printf_i>
 800650a:	e7e4      	b.n	80064d6 <_vfiprintf_r+0x1e6>
 800650c:	08007e30 	.word	0x08007e30
 8006510:	08007e3a 	.word	0x08007e3a
 8006514:	08003c8d 	.word	0x08003c8d
 8006518:	080062cd 	.word	0x080062cd
 800651c:	08007e36 	.word	0x08007e36

08006520 <__swbuf_r>:
 8006520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006522:	460e      	mov	r6, r1
 8006524:	4614      	mov	r4, r2
 8006526:	4605      	mov	r5, r0
 8006528:	b118      	cbz	r0, 8006532 <__swbuf_r+0x12>
 800652a:	6a03      	ldr	r3, [r0, #32]
 800652c:	b90b      	cbnz	r3, 8006532 <__swbuf_r+0x12>
 800652e:	f7fd fff1 	bl	8004514 <__sinit>
 8006532:	69a3      	ldr	r3, [r4, #24]
 8006534:	60a3      	str	r3, [r4, #8]
 8006536:	89a3      	ldrh	r3, [r4, #12]
 8006538:	071a      	lsls	r2, r3, #28
 800653a:	d501      	bpl.n	8006540 <__swbuf_r+0x20>
 800653c:	6923      	ldr	r3, [r4, #16]
 800653e:	b943      	cbnz	r3, 8006552 <__swbuf_r+0x32>
 8006540:	4621      	mov	r1, r4
 8006542:	4628      	mov	r0, r5
 8006544:	f000 f82a 	bl	800659c <__swsetup_r>
 8006548:	b118      	cbz	r0, 8006552 <__swbuf_r+0x32>
 800654a:	f04f 37ff 	mov.w	r7, #4294967295
 800654e:	4638      	mov	r0, r7
 8006550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	6922      	ldr	r2, [r4, #16]
 8006556:	1a98      	subs	r0, r3, r2
 8006558:	6963      	ldr	r3, [r4, #20]
 800655a:	b2f6      	uxtb	r6, r6
 800655c:	4283      	cmp	r3, r0
 800655e:	4637      	mov	r7, r6
 8006560:	dc05      	bgt.n	800656e <__swbuf_r+0x4e>
 8006562:	4621      	mov	r1, r4
 8006564:	4628      	mov	r0, r5
 8006566:	f7ff fd99 	bl	800609c <_fflush_r>
 800656a:	2800      	cmp	r0, #0
 800656c:	d1ed      	bne.n	800654a <__swbuf_r+0x2a>
 800656e:	68a3      	ldr	r3, [r4, #8]
 8006570:	3b01      	subs	r3, #1
 8006572:	60a3      	str	r3, [r4, #8]
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	1c5a      	adds	r2, r3, #1
 8006578:	6022      	str	r2, [r4, #0]
 800657a:	701e      	strb	r6, [r3, #0]
 800657c:	6962      	ldr	r2, [r4, #20]
 800657e:	1c43      	adds	r3, r0, #1
 8006580:	429a      	cmp	r2, r3
 8006582:	d004      	beq.n	800658e <__swbuf_r+0x6e>
 8006584:	89a3      	ldrh	r3, [r4, #12]
 8006586:	07db      	lsls	r3, r3, #31
 8006588:	d5e1      	bpl.n	800654e <__swbuf_r+0x2e>
 800658a:	2e0a      	cmp	r6, #10
 800658c:	d1df      	bne.n	800654e <__swbuf_r+0x2e>
 800658e:	4621      	mov	r1, r4
 8006590:	4628      	mov	r0, r5
 8006592:	f7ff fd83 	bl	800609c <_fflush_r>
 8006596:	2800      	cmp	r0, #0
 8006598:	d0d9      	beq.n	800654e <__swbuf_r+0x2e>
 800659a:	e7d6      	b.n	800654a <__swbuf_r+0x2a>

0800659c <__swsetup_r>:
 800659c:	b538      	push	{r3, r4, r5, lr}
 800659e:	4b29      	ldr	r3, [pc, #164]	@ (8006644 <__swsetup_r+0xa8>)
 80065a0:	4605      	mov	r5, r0
 80065a2:	6818      	ldr	r0, [r3, #0]
 80065a4:	460c      	mov	r4, r1
 80065a6:	b118      	cbz	r0, 80065b0 <__swsetup_r+0x14>
 80065a8:	6a03      	ldr	r3, [r0, #32]
 80065aa:	b90b      	cbnz	r3, 80065b0 <__swsetup_r+0x14>
 80065ac:	f7fd ffb2 	bl	8004514 <__sinit>
 80065b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065b4:	0719      	lsls	r1, r3, #28
 80065b6:	d422      	bmi.n	80065fe <__swsetup_r+0x62>
 80065b8:	06da      	lsls	r2, r3, #27
 80065ba:	d407      	bmi.n	80065cc <__swsetup_r+0x30>
 80065bc:	2209      	movs	r2, #9
 80065be:	602a      	str	r2, [r5, #0]
 80065c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065c4:	81a3      	strh	r3, [r4, #12]
 80065c6:	f04f 30ff 	mov.w	r0, #4294967295
 80065ca:	e033      	b.n	8006634 <__swsetup_r+0x98>
 80065cc:	0758      	lsls	r0, r3, #29
 80065ce:	d512      	bpl.n	80065f6 <__swsetup_r+0x5a>
 80065d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80065d2:	b141      	cbz	r1, 80065e6 <__swsetup_r+0x4a>
 80065d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80065d8:	4299      	cmp	r1, r3
 80065da:	d002      	beq.n	80065e2 <__swsetup_r+0x46>
 80065dc:	4628      	mov	r0, r5
 80065de:	f7fe feff 	bl	80053e0 <_free_r>
 80065e2:	2300      	movs	r3, #0
 80065e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80065e6:	89a3      	ldrh	r3, [r4, #12]
 80065e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80065ec:	81a3      	strh	r3, [r4, #12]
 80065ee:	2300      	movs	r3, #0
 80065f0:	6063      	str	r3, [r4, #4]
 80065f2:	6923      	ldr	r3, [r4, #16]
 80065f4:	6023      	str	r3, [r4, #0]
 80065f6:	89a3      	ldrh	r3, [r4, #12]
 80065f8:	f043 0308 	orr.w	r3, r3, #8
 80065fc:	81a3      	strh	r3, [r4, #12]
 80065fe:	6923      	ldr	r3, [r4, #16]
 8006600:	b94b      	cbnz	r3, 8006616 <__swsetup_r+0x7a>
 8006602:	89a3      	ldrh	r3, [r4, #12]
 8006604:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006608:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800660c:	d003      	beq.n	8006616 <__swsetup_r+0x7a>
 800660e:	4621      	mov	r1, r4
 8006610:	4628      	mov	r0, r5
 8006612:	f000 f883 	bl	800671c <__smakebuf_r>
 8006616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800661a:	f013 0201 	ands.w	r2, r3, #1
 800661e:	d00a      	beq.n	8006636 <__swsetup_r+0x9a>
 8006620:	2200      	movs	r2, #0
 8006622:	60a2      	str	r2, [r4, #8]
 8006624:	6962      	ldr	r2, [r4, #20]
 8006626:	4252      	negs	r2, r2
 8006628:	61a2      	str	r2, [r4, #24]
 800662a:	6922      	ldr	r2, [r4, #16]
 800662c:	b942      	cbnz	r2, 8006640 <__swsetup_r+0xa4>
 800662e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006632:	d1c5      	bne.n	80065c0 <__swsetup_r+0x24>
 8006634:	bd38      	pop	{r3, r4, r5, pc}
 8006636:	0799      	lsls	r1, r3, #30
 8006638:	bf58      	it	pl
 800663a:	6962      	ldrpl	r2, [r4, #20]
 800663c:	60a2      	str	r2, [r4, #8]
 800663e:	e7f4      	b.n	800662a <__swsetup_r+0x8e>
 8006640:	2000      	movs	r0, #0
 8006642:	e7f7      	b.n	8006634 <__swsetup_r+0x98>
 8006644:	20000018 	.word	0x20000018

08006648 <_raise_r>:
 8006648:	291f      	cmp	r1, #31
 800664a:	b538      	push	{r3, r4, r5, lr}
 800664c:	4605      	mov	r5, r0
 800664e:	460c      	mov	r4, r1
 8006650:	d904      	bls.n	800665c <_raise_r+0x14>
 8006652:	2316      	movs	r3, #22
 8006654:	6003      	str	r3, [r0, #0]
 8006656:	f04f 30ff 	mov.w	r0, #4294967295
 800665a:	bd38      	pop	{r3, r4, r5, pc}
 800665c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800665e:	b112      	cbz	r2, 8006666 <_raise_r+0x1e>
 8006660:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006664:	b94b      	cbnz	r3, 800667a <_raise_r+0x32>
 8006666:	4628      	mov	r0, r5
 8006668:	f000 f830 	bl	80066cc <_getpid_r>
 800666c:	4622      	mov	r2, r4
 800666e:	4601      	mov	r1, r0
 8006670:	4628      	mov	r0, r5
 8006672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006676:	f000 b817 	b.w	80066a8 <_kill_r>
 800667a:	2b01      	cmp	r3, #1
 800667c:	d00a      	beq.n	8006694 <_raise_r+0x4c>
 800667e:	1c59      	adds	r1, r3, #1
 8006680:	d103      	bne.n	800668a <_raise_r+0x42>
 8006682:	2316      	movs	r3, #22
 8006684:	6003      	str	r3, [r0, #0]
 8006686:	2001      	movs	r0, #1
 8006688:	e7e7      	b.n	800665a <_raise_r+0x12>
 800668a:	2100      	movs	r1, #0
 800668c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006690:	4620      	mov	r0, r4
 8006692:	4798      	blx	r3
 8006694:	2000      	movs	r0, #0
 8006696:	e7e0      	b.n	800665a <_raise_r+0x12>

08006698 <raise>:
 8006698:	4b02      	ldr	r3, [pc, #8]	@ (80066a4 <raise+0xc>)
 800669a:	4601      	mov	r1, r0
 800669c:	6818      	ldr	r0, [r3, #0]
 800669e:	f7ff bfd3 	b.w	8006648 <_raise_r>
 80066a2:	bf00      	nop
 80066a4:	20000018 	.word	0x20000018

080066a8 <_kill_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	4d07      	ldr	r5, [pc, #28]	@ (80066c8 <_kill_r+0x20>)
 80066ac:	2300      	movs	r3, #0
 80066ae:	4604      	mov	r4, r0
 80066b0:	4608      	mov	r0, r1
 80066b2:	4611      	mov	r1, r2
 80066b4:	602b      	str	r3, [r5, #0]
 80066b6:	f7fb f908 	bl	80018ca <_kill>
 80066ba:	1c43      	adds	r3, r0, #1
 80066bc:	d102      	bne.n	80066c4 <_kill_r+0x1c>
 80066be:	682b      	ldr	r3, [r5, #0]
 80066c0:	b103      	cbz	r3, 80066c4 <_kill_r+0x1c>
 80066c2:	6023      	str	r3, [r4, #0]
 80066c4:	bd38      	pop	{r3, r4, r5, pc}
 80066c6:	bf00      	nop
 80066c8:	20000444 	.word	0x20000444

080066cc <_getpid_r>:
 80066cc:	f7fb b8f5 	b.w	80018ba <_getpid>

080066d0 <__swhatbuf_r>:
 80066d0:	b570      	push	{r4, r5, r6, lr}
 80066d2:	460c      	mov	r4, r1
 80066d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d8:	2900      	cmp	r1, #0
 80066da:	b096      	sub	sp, #88	@ 0x58
 80066dc:	4615      	mov	r5, r2
 80066de:	461e      	mov	r6, r3
 80066e0:	da0d      	bge.n	80066fe <__swhatbuf_r+0x2e>
 80066e2:	89a3      	ldrh	r3, [r4, #12]
 80066e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80066e8:	f04f 0100 	mov.w	r1, #0
 80066ec:	bf14      	ite	ne
 80066ee:	2340      	movne	r3, #64	@ 0x40
 80066f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80066f4:	2000      	movs	r0, #0
 80066f6:	6031      	str	r1, [r6, #0]
 80066f8:	602b      	str	r3, [r5, #0]
 80066fa:	b016      	add	sp, #88	@ 0x58
 80066fc:	bd70      	pop	{r4, r5, r6, pc}
 80066fe:	466a      	mov	r2, sp
 8006700:	f000 f848 	bl	8006794 <_fstat_r>
 8006704:	2800      	cmp	r0, #0
 8006706:	dbec      	blt.n	80066e2 <__swhatbuf_r+0x12>
 8006708:	9901      	ldr	r1, [sp, #4]
 800670a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800670e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006712:	4259      	negs	r1, r3
 8006714:	4159      	adcs	r1, r3
 8006716:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800671a:	e7eb      	b.n	80066f4 <__swhatbuf_r+0x24>

0800671c <__smakebuf_r>:
 800671c:	898b      	ldrh	r3, [r1, #12]
 800671e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006720:	079d      	lsls	r5, r3, #30
 8006722:	4606      	mov	r6, r0
 8006724:	460c      	mov	r4, r1
 8006726:	d507      	bpl.n	8006738 <__smakebuf_r+0x1c>
 8006728:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800672c:	6023      	str	r3, [r4, #0]
 800672e:	6123      	str	r3, [r4, #16]
 8006730:	2301      	movs	r3, #1
 8006732:	6163      	str	r3, [r4, #20]
 8006734:	b003      	add	sp, #12
 8006736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006738:	ab01      	add	r3, sp, #4
 800673a:	466a      	mov	r2, sp
 800673c:	f7ff ffc8 	bl	80066d0 <__swhatbuf_r>
 8006740:	9f00      	ldr	r7, [sp, #0]
 8006742:	4605      	mov	r5, r0
 8006744:	4639      	mov	r1, r7
 8006746:	4630      	mov	r0, r6
 8006748:	f7fe febe 	bl	80054c8 <_malloc_r>
 800674c:	b948      	cbnz	r0, 8006762 <__smakebuf_r+0x46>
 800674e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006752:	059a      	lsls	r2, r3, #22
 8006754:	d4ee      	bmi.n	8006734 <__smakebuf_r+0x18>
 8006756:	f023 0303 	bic.w	r3, r3, #3
 800675a:	f043 0302 	orr.w	r3, r3, #2
 800675e:	81a3      	strh	r3, [r4, #12]
 8006760:	e7e2      	b.n	8006728 <__smakebuf_r+0xc>
 8006762:	89a3      	ldrh	r3, [r4, #12]
 8006764:	6020      	str	r0, [r4, #0]
 8006766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800676a:	81a3      	strh	r3, [r4, #12]
 800676c:	9b01      	ldr	r3, [sp, #4]
 800676e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006772:	b15b      	cbz	r3, 800678c <__smakebuf_r+0x70>
 8006774:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006778:	4630      	mov	r0, r6
 800677a:	f000 f81d 	bl	80067b8 <_isatty_r>
 800677e:	b128      	cbz	r0, 800678c <__smakebuf_r+0x70>
 8006780:	89a3      	ldrh	r3, [r4, #12]
 8006782:	f023 0303 	bic.w	r3, r3, #3
 8006786:	f043 0301 	orr.w	r3, r3, #1
 800678a:	81a3      	strh	r3, [r4, #12]
 800678c:	89a3      	ldrh	r3, [r4, #12]
 800678e:	431d      	orrs	r5, r3
 8006790:	81a5      	strh	r5, [r4, #12]
 8006792:	e7cf      	b.n	8006734 <__smakebuf_r+0x18>

08006794 <_fstat_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	4d07      	ldr	r5, [pc, #28]	@ (80067b4 <_fstat_r+0x20>)
 8006798:	2300      	movs	r3, #0
 800679a:	4604      	mov	r4, r0
 800679c:	4608      	mov	r0, r1
 800679e:	4611      	mov	r1, r2
 80067a0:	602b      	str	r3, [r5, #0]
 80067a2:	f7fb f8f2 	bl	800198a <_fstat>
 80067a6:	1c43      	adds	r3, r0, #1
 80067a8:	d102      	bne.n	80067b0 <_fstat_r+0x1c>
 80067aa:	682b      	ldr	r3, [r5, #0]
 80067ac:	b103      	cbz	r3, 80067b0 <_fstat_r+0x1c>
 80067ae:	6023      	str	r3, [r4, #0]
 80067b0:	bd38      	pop	{r3, r4, r5, pc}
 80067b2:	bf00      	nop
 80067b4:	20000444 	.word	0x20000444

080067b8 <_isatty_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	4d06      	ldr	r5, [pc, #24]	@ (80067d4 <_isatty_r+0x1c>)
 80067bc:	2300      	movs	r3, #0
 80067be:	4604      	mov	r4, r0
 80067c0:	4608      	mov	r0, r1
 80067c2:	602b      	str	r3, [r5, #0]
 80067c4:	f7fb f8f1 	bl	80019aa <_isatty>
 80067c8:	1c43      	adds	r3, r0, #1
 80067ca:	d102      	bne.n	80067d2 <_isatty_r+0x1a>
 80067cc:	682b      	ldr	r3, [r5, #0]
 80067ce:	b103      	cbz	r3, 80067d2 <_isatty_r+0x1a>
 80067d0:	6023      	str	r3, [r4, #0]
 80067d2:	bd38      	pop	{r3, r4, r5, pc}
 80067d4:	20000444 	.word	0x20000444

080067d8 <log10>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	ed2d 8b02 	vpush	{d8}
 80067de:	ec55 4b10 	vmov	r4, r5, d0
 80067e2:	f000 f8bd 	bl	8006960 <__ieee754_log10>
 80067e6:	4622      	mov	r2, r4
 80067e8:	462b      	mov	r3, r5
 80067ea:	4620      	mov	r0, r4
 80067ec:	4629      	mov	r1, r5
 80067ee:	eeb0 8a40 	vmov.f32	s16, s0
 80067f2:	eef0 8a60 	vmov.f32	s17, s1
 80067f6:	f7fa f9a9 	bl	8000b4c <__aeabi_dcmpun>
 80067fa:	b998      	cbnz	r0, 8006824 <log10+0x4c>
 80067fc:	2200      	movs	r2, #0
 80067fe:	2300      	movs	r3, #0
 8006800:	4620      	mov	r0, r4
 8006802:	4629      	mov	r1, r5
 8006804:	f7fa f984 	bl	8000b10 <__aeabi_dcmple>
 8006808:	b160      	cbz	r0, 8006824 <log10+0x4c>
 800680a:	2200      	movs	r2, #0
 800680c:	2300      	movs	r3, #0
 800680e:	4620      	mov	r0, r4
 8006810:	4629      	mov	r1, r5
 8006812:	f7fa f969 	bl	8000ae8 <__aeabi_dcmpeq>
 8006816:	b160      	cbz	r0, 8006832 <log10+0x5a>
 8006818:	f7fd ff68 	bl	80046ec <__errno>
 800681c:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8006848 <log10+0x70>
 8006820:	2322      	movs	r3, #34	@ 0x22
 8006822:	6003      	str	r3, [r0, #0]
 8006824:	eeb0 0a48 	vmov.f32	s0, s16
 8006828:	eef0 0a68 	vmov.f32	s1, s17
 800682c:	ecbd 8b02 	vpop	{d8}
 8006830:	bd38      	pop	{r3, r4, r5, pc}
 8006832:	f7fd ff5b 	bl	80046ec <__errno>
 8006836:	ecbd 8b02 	vpop	{d8}
 800683a:	2321      	movs	r3, #33	@ 0x21
 800683c:	6003      	str	r3, [r0, #0]
 800683e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006842:	4803      	ldr	r0, [pc, #12]	@ (8006850 <log10+0x78>)
 8006844:	f000 b884 	b.w	8006950 <nan>
 8006848:	00000000 	.word	0x00000000
 800684c:	fff00000 	.word	0xfff00000
 8006850:	08007e86 	.word	0x08007e86

08006854 <pow>:
 8006854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006856:	ed2d 8b02 	vpush	{d8}
 800685a:	eeb0 8a40 	vmov.f32	s16, s0
 800685e:	eef0 8a60 	vmov.f32	s17, s1
 8006862:	ec55 4b11 	vmov	r4, r5, d1
 8006866:	f000 f907 	bl	8006a78 <__ieee754_pow>
 800686a:	4622      	mov	r2, r4
 800686c:	462b      	mov	r3, r5
 800686e:	4620      	mov	r0, r4
 8006870:	4629      	mov	r1, r5
 8006872:	ec57 6b10 	vmov	r6, r7, d0
 8006876:	f7fa f969 	bl	8000b4c <__aeabi_dcmpun>
 800687a:	2800      	cmp	r0, #0
 800687c:	d13b      	bne.n	80068f6 <pow+0xa2>
 800687e:	ec51 0b18 	vmov	r0, r1, d8
 8006882:	2200      	movs	r2, #0
 8006884:	2300      	movs	r3, #0
 8006886:	f7fa f92f 	bl	8000ae8 <__aeabi_dcmpeq>
 800688a:	b1b8      	cbz	r0, 80068bc <pow+0x68>
 800688c:	2200      	movs	r2, #0
 800688e:	2300      	movs	r3, #0
 8006890:	4620      	mov	r0, r4
 8006892:	4629      	mov	r1, r5
 8006894:	f7fa f928 	bl	8000ae8 <__aeabi_dcmpeq>
 8006898:	2800      	cmp	r0, #0
 800689a:	d146      	bne.n	800692a <pow+0xd6>
 800689c:	ec45 4b10 	vmov	d0, r4, r5
 80068a0:	f000 f848 	bl	8006934 <finite>
 80068a4:	b338      	cbz	r0, 80068f6 <pow+0xa2>
 80068a6:	2200      	movs	r2, #0
 80068a8:	2300      	movs	r3, #0
 80068aa:	4620      	mov	r0, r4
 80068ac:	4629      	mov	r1, r5
 80068ae:	f7fa f925 	bl	8000afc <__aeabi_dcmplt>
 80068b2:	b300      	cbz	r0, 80068f6 <pow+0xa2>
 80068b4:	f7fd ff1a 	bl	80046ec <__errno>
 80068b8:	2322      	movs	r3, #34	@ 0x22
 80068ba:	e01b      	b.n	80068f4 <pow+0xa0>
 80068bc:	ec47 6b10 	vmov	d0, r6, r7
 80068c0:	f000 f838 	bl	8006934 <finite>
 80068c4:	b9e0      	cbnz	r0, 8006900 <pow+0xac>
 80068c6:	eeb0 0a48 	vmov.f32	s0, s16
 80068ca:	eef0 0a68 	vmov.f32	s1, s17
 80068ce:	f000 f831 	bl	8006934 <finite>
 80068d2:	b1a8      	cbz	r0, 8006900 <pow+0xac>
 80068d4:	ec45 4b10 	vmov	d0, r4, r5
 80068d8:	f000 f82c 	bl	8006934 <finite>
 80068dc:	b180      	cbz	r0, 8006900 <pow+0xac>
 80068de:	4632      	mov	r2, r6
 80068e0:	463b      	mov	r3, r7
 80068e2:	4630      	mov	r0, r6
 80068e4:	4639      	mov	r1, r7
 80068e6:	f7fa f931 	bl	8000b4c <__aeabi_dcmpun>
 80068ea:	2800      	cmp	r0, #0
 80068ec:	d0e2      	beq.n	80068b4 <pow+0x60>
 80068ee:	f7fd fefd 	bl	80046ec <__errno>
 80068f2:	2321      	movs	r3, #33	@ 0x21
 80068f4:	6003      	str	r3, [r0, #0]
 80068f6:	ecbd 8b02 	vpop	{d8}
 80068fa:	ec47 6b10 	vmov	d0, r6, r7
 80068fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006900:	2200      	movs	r2, #0
 8006902:	2300      	movs	r3, #0
 8006904:	4630      	mov	r0, r6
 8006906:	4639      	mov	r1, r7
 8006908:	f7fa f8ee 	bl	8000ae8 <__aeabi_dcmpeq>
 800690c:	2800      	cmp	r0, #0
 800690e:	d0f2      	beq.n	80068f6 <pow+0xa2>
 8006910:	eeb0 0a48 	vmov.f32	s0, s16
 8006914:	eef0 0a68 	vmov.f32	s1, s17
 8006918:	f000 f80c 	bl	8006934 <finite>
 800691c:	2800      	cmp	r0, #0
 800691e:	d0ea      	beq.n	80068f6 <pow+0xa2>
 8006920:	ec45 4b10 	vmov	d0, r4, r5
 8006924:	f000 f806 	bl	8006934 <finite>
 8006928:	e7c3      	b.n	80068b2 <pow+0x5e>
 800692a:	4f01      	ldr	r7, [pc, #4]	@ (8006930 <pow+0xdc>)
 800692c:	2600      	movs	r6, #0
 800692e:	e7e2      	b.n	80068f6 <pow+0xa2>
 8006930:	3ff00000 	.word	0x3ff00000

08006934 <finite>:
 8006934:	b082      	sub	sp, #8
 8006936:	ed8d 0b00 	vstr	d0, [sp]
 800693a:	9801      	ldr	r0, [sp, #4]
 800693c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8006940:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006944:	0fc0      	lsrs	r0, r0, #31
 8006946:	b002      	add	sp, #8
 8006948:	4770      	bx	lr
 800694a:	0000      	movs	r0, r0
 800694c:	0000      	movs	r0, r0
	...

08006950 <nan>:
 8006950:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006958 <nan+0x8>
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	00000000 	.word	0x00000000
 800695c:	7ff80000 	.word	0x7ff80000

08006960 <__ieee754_log10>:
 8006960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006964:	ec55 4b10 	vmov	r4, r5, d0
 8006968:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800696c:	ed2d 8b02 	vpush	{d8}
 8006970:	462b      	mov	r3, r5
 8006972:	da2e      	bge.n	80069d2 <__ieee754_log10+0x72>
 8006974:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006978:	4322      	orrs	r2, r4
 800697a:	d10b      	bne.n	8006994 <__ieee754_log10+0x34>
 800697c:	493a      	ldr	r1, [pc, #232]	@ (8006a68 <__ieee754_log10+0x108>)
 800697e:	2200      	movs	r2, #0
 8006980:	2300      	movs	r3, #0
 8006982:	2000      	movs	r0, #0
 8006984:	f7f9 ff72 	bl	800086c <__aeabi_ddiv>
 8006988:	ecbd 8b02 	vpop	{d8}
 800698c:	ec41 0b10 	vmov	d0, r0, r1
 8006990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006994:	2d00      	cmp	r5, #0
 8006996:	da07      	bge.n	80069a8 <__ieee754_log10+0x48>
 8006998:	4622      	mov	r2, r4
 800699a:	4620      	mov	r0, r4
 800699c:	4629      	mov	r1, r5
 800699e:	f7f9 fc83 	bl	80002a8 <__aeabi_dsub>
 80069a2:	2200      	movs	r2, #0
 80069a4:	2300      	movs	r3, #0
 80069a6:	e7ed      	b.n	8006984 <__ieee754_log10+0x24>
 80069a8:	4b30      	ldr	r3, [pc, #192]	@ (8006a6c <__ieee754_log10+0x10c>)
 80069aa:	2200      	movs	r2, #0
 80069ac:	4620      	mov	r0, r4
 80069ae:	4629      	mov	r1, r5
 80069b0:	f7f9 fe32 	bl	8000618 <__aeabi_dmul>
 80069b4:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 80069b8:	4604      	mov	r4, r0
 80069ba:	460d      	mov	r5, r1
 80069bc:	460b      	mov	r3, r1
 80069be:	492c      	ldr	r1, [pc, #176]	@ (8006a70 <__ieee754_log10+0x110>)
 80069c0:	428b      	cmp	r3, r1
 80069c2:	dd08      	ble.n	80069d6 <__ieee754_log10+0x76>
 80069c4:	4622      	mov	r2, r4
 80069c6:	462b      	mov	r3, r5
 80069c8:	4620      	mov	r0, r4
 80069ca:	4629      	mov	r1, r5
 80069cc:	f7f9 fc6e 	bl	80002ac <__adddf3>
 80069d0:	e7da      	b.n	8006988 <__ieee754_log10+0x28>
 80069d2:	2200      	movs	r2, #0
 80069d4:	e7f3      	b.n	80069be <__ieee754_log10+0x5e>
 80069d6:	1518      	asrs	r0, r3, #20
 80069d8:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 80069dc:	4410      	add	r0, r2
 80069de:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 80069e2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80069e6:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80069ea:	f7f9 fdab 	bl	8000544 <__aeabi_i2d>
 80069ee:	f5c9 737f 	rsb	r3, r9, #1020	@ 0x3fc
 80069f2:	3303      	adds	r3, #3
 80069f4:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80069f8:	a315      	add	r3, pc, #84	@ (adr r3, 8006a50 <__ieee754_log10+0xf0>)
 80069fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fe:	ec45 4b18 	vmov	d8, r4, r5
 8006a02:	4606      	mov	r6, r0
 8006a04:	460f      	mov	r7, r1
 8006a06:	f7f9 fe07 	bl	8000618 <__aeabi_dmul>
 8006a0a:	eeb0 0a48 	vmov.f32	s0, s16
 8006a0e:	eef0 0a68 	vmov.f32	s1, s17
 8006a12:	4604      	mov	r4, r0
 8006a14:	460d      	mov	r5, r1
 8006a16:	f000 ff13 	bl	8007840 <__ieee754_log>
 8006a1a:	a30f      	add	r3, pc, #60	@ (adr r3, 8006a58 <__ieee754_log10+0xf8>)
 8006a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a20:	ec51 0b10 	vmov	r0, r1, d0
 8006a24:	f7f9 fdf8 	bl	8000618 <__aeabi_dmul>
 8006a28:	4622      	mov	r2, r4
 8006a2a:	462b      	mov	r3, r5
 8006a2c:	f7f9 fc3e 	bl	80002ac <__adddf3>
 8006a30:	a30b      	add	r3, pc, #44	@ (adr r3, 8006a60 <__ieee754_log10+0x100>)
 8006a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a36:	4604      	mov	r4, r0
 8006a38:	460d      	mov	r5, r1
 8006a3a:	4630      	mov	r0, r6
 8006a3c:	4639      	mov	r1, r7
 8006a3e:	f7f9 fdeb 	bl	8000618 <__aeabi_dmul>
 8006a42:	4602      	mov	r2, r0
 8006a44:	460b      	mov	r3, r1
 8006a46:	4620      	mov	r0, r4
 8006a48:	4629      	mov	r1, r5
 8006a4a:	e7bf      	b.n	80069cc <__ieee754_log10+0x6c>
 8006a4c:	f3af 8000 	nop.w
 8006a50:	11f12b36 	.word	0x11f12b36
 8006a54:	3d59fef3 	.word	0x3d59fef3
 8006a58:	1526e50e 	.word	0x1526e50e
 8006a5c:	3fdbcb7b 	.word	0x3fdbcb7b
 8006a60:	509f6000 	.word	0x509f6000
 8006a64:	3fd34413 	.word	0x3fd34413
 8006a68:	c3500000 	.word	0xc3500000
 8006a6c:	43500000 	.word	0x43500000
 8006a70:	7fefffff 	.word	0x7fefffff
 8006a74:	00000000 	.word	0x00000000

08006a78 <__ieee754_pow>:
 8006a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a7c:	b091      	sub	sp, #68	@ 0x44
 8006a7e:	ed8d 1b00 	vstr	d1, [sp]
 8006a82:	e9dd 1900 	ldrd	r1, r9, [sp]
 8006a86:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8006a8a:	ea5a 0001 	orrs.w	r0, sl, r1
 8006a8e:	ec57 6b10 	vmov	r6, r7, d0
 8006a92:	d113      	bne.n	8006abc <__ieee754_pow+0x44>
 8006a94:	19b3      	adds	r3, r6, r6
 8006a96:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8006a9a:	4152      	adcs	r2, r2
 8006a9c:	4298      	cmp	r0, r3
 8006a9e:	4b98      	ldr	r3, [pc, #608]	@ (8006d00 <__ieee754_pow+0x288>)
 8006aa0:	4193      	sbcs	r3, r2
 8006aa2:	f080 84ea 	bcs.w	800747a <__ieee754_pow+0xa02>
 8006aa6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006aaa:	4630      	mov	r0, r6
 8006aac:	4639      	mov	r1, r7
 8006aae:	f7f9 fbfd 	bl	80002ac <__adddf3>
 8006ab2:	ec41 0b10 	vmov	d0, r0, r1
 8006ab6:	b011      	add	sp, #68	@ 0x44
 8006ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006abc:	4a91      	ldr	r2, [pc, #580]	@ (8006d04 <__ieee754_pow+0x28c>)
 8006abe:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006ac2:	4590      	cmp	r8, r2
 8006ac4:	463d      	mov	r5, r7
 8006ac6:	4633      	mov	r3, r6
 8006ac8:	d806      	bhi.n	8006ad8 <__ieee754_pow+0x60>
 8006aca:	d101      	bne.n	8006ad0 <__ieee754_pow+0x58>
 8006acc:	2e00      	cmp	r6, #0
 8006ace:	d1ea      	bne.n	8006aa6 <__ieee754_pow+0x2e>
 8006ad0:	4592      	cmp	sl, r2
 8006ad2:	d801      	bhi.n	8006ad8 <__ieee754_pow+0x60>
 8006ad4:	d10e      	bne.n	8006af4 <__ieee754_pow+0x7c>
 8006ad6:	b169      	cbz	r1, 8006af4 <__ieee754_pow+0x7c>
 8006ad8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8006adc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8006ae0:	431d      	orrs	r5, r3
 8006ae2:	d1e0      	bne.n	8006aa6 <__ieee754_pow+0x2e>
 8006ae4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006ae8:	18db      	adds	r3, r3, r3
 8006aea:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8006aee:	4152      	adcs	r2, r2
 8006af0:	429d      	cmp	r5, r3
 8006af2:	e7d4      	b.n	8006a9e <__ieee754_pow+0x26>
 8006af4:	2d00      	cmp	r5, #0
 8006af6:	46c3      	mov	fp, r8
 8006af8:	da3a      	bge.n	8006b70 <__ieee754_pow+0xf8>
 8006afa:	4a83      	ldr	r2, [pc, #524]	@ (8006d08 <__ieee754_pow+0x290>)
 8006afc:	4592      	cmp	sl, r2
 8006afe:	d84d      	bhi.n	8006b9c <__ieee754_pow+0x124>
 8006b00:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8006b04:	4592      	cmp	sl, r2
 8006b06:	f240 84c7 	bls.w	8007498 <__ieee754_pow+0xa20>
 8006b0a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8006b0e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006b12:	2a14      	cmp	r2, #20
 8006b14:	dd0f      	ble.n	8006b36 <__ieee754_pow+0xbe>
 8006b16:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8006b1a:	fa21 f402 	lsr.w	r4, r1, r2
 8006b1e:	fa04 f202 	lsl.w	r2, r4, r2
 8006b22:	428a      	cmp	r2, r1
 8006b24:	f040 84b8 	bne.w	8007498 <__ieee754_pow+0xa20>
 8006b28:	f004 0401 	and.w	r4, r4, #1
 8006b2c:	f1c4 0402 	rsb	r4, r4, #2
 8006b30:	2900      	cmp	r1, #0
 8006b32:	d158      	bne.n	8006be6 <__ieee754_pow+0x16e>
 8006b34:	e00e      	b.n	8006b54 <__ieee754_pow+0xdc>
 8006b36:	2900      	cmp	r1, #0
 8006b38:	d154      	bne.n	8006be4 <__ieee754_pow+0x16c>
 8006b3a:	f1c2 0214 	rsb	r2, r2, #20
 8006b3e:	fa4a f402 	asr.w	r4, sl, r2
 8006b42:	fa04 f202 	lsl.w	r2, r4, r2
 8006b46:	4552      	cmp	r2, sl
 8006b48:	f040 84a3 	bne.w	8007492 <__ieee754_pow+0xa1a>
 8006b4c:	f004 0401 	and.w	r4, r4, #1
 8006b50:	f1c4 0402 	rsb	r4, r4, #2
 8006b54:	4a6d      	ldr	r2, [pc, #436]	@ (8006d0c <__ieee754_pow+0x294>)
 8006b56:	4592      	cmp	sl, r2
 8006b58:	d12e      	bne.n	8006bb8 <__ieee754_pow+0x140>
 8006b5a:	f1b9 0f00 	cmp.w	r9, #0
 8006b5e:	f280 8494 	bge.w	800748a <__ieee754_pow+0xa12>
 8006b62:	496a      	ldr	r1, [pc, #424]	@ (8006d0c <__ieee754_pow+0x294>)
 8006b64:	4632      	mov	r2, r6
 8006b66:	463b      	mov	r3, r7
 8006b68:	2000      	movs	r0, #0
 8006b6a:	f7f9 fe7f 	bl	800086c <__aeabi_ddiv>
 8006b6e:	e7a0      	b.n	8006ab2 <__ieee754_pow+0x3a>
 8006b70:	2400      	movs	r4, #0
 8006b72:	bbc1      	cbnz	r1, 8006be6 <__ieee754_pow+0x16e>
 8006b74:	4a63      	ldr	r2, [pc, #396]	@ (8006d04 <__ieee754_pow+0x28c>)
 8006b76:	4592      	cmp	sl, r2
 8006b78:	d1ec      	bne.n	8006b54 <__ieee754_pow+0xdc>
 8006b7a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8006b7e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8006b82:	431a      	orrs	r2, r3
 8006b84:	f000 8479 	beq.w	800747a <__ieee754_pow+0xa02>
 8006b88:	4b61      	ldr	r3, [pc, #388]	@ (8006d10 <__ieee754_pow+0x298>)
 8006b8a:	4598      	cmp	r8, r3
 8006b8c:	d908      	bls.n	8006ba0 <__ieee754_pow+0x128>
 8006b8e:	f1b9 0f00 	cmp.w	r9, #0
 8006b92:	f2c0 8476 	blt.w	8007482 <__ieee754_pow+0xa0a>
 8006b96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b9a:	e78a      	b.n	8006ab2 <__ieee754_pow+0x3a>
 8006b9c:	2402      	movs	r4, #2
 8006b9e:	e7e8      	b.n	8006b72 <__ieee754_pow+0xfa>
 8006ba0:	f1b9 0f00 	cmp.w	r9, #0
 8006ba4:	f04f 0000 	mov.w	r0, #0
 8006ba8:	f04f 0100 	mov.w	r1, #0
 8006bac:	da81      	bge.n	8006ab2 <__ieee754_pow+0x3a>
 8006bae:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006bb2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006bb6:	e77c      	b.n	8006ab2 <__ieee754_pow+0x3a>
 8006bb8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8006bbc:	d106      	bne.n	8006bcc <__ieee754_pow+0x154>
 8006bbe:	4632      	mov	r2, r6
 8006bc0:	463b      	mov	r3, r7
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	4639      	mov	r1, r7
 8006bc6:	f7f9 fd27 	bl	8000618 <__aeabi_dmul>
 8006bca:	e772      	b.n	8006ab2 <__ieee754_pow+0x3a>
 8006bcc:	4a51      	ldr	r2, [pc, #324]	@ (8006d14 <__ieee754_pow+0x29c>)
 8006bce:	4591      	cmp	r9, r2
 8006bd0:	d109      	bne.n	8006be6 <__ieee754_pow+0x16e>
 8006bd2:	2d00      	cmp	r5, #0
 8006bd4:	db07      	blt.n	8006be6 <__ieee754_pow+0x16e>
 8006bd6:	ec47 6b10 	vmov	d0, r6, r7
 8006bda:	b011      	add	sp, #68	@ 0x44
 8006bdc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be0:	f000 bd52 	b.w	8007688 <__ieee754_sqrt>
 8006be4:	2400      	movs	r4, #0
 8006be6:	ec47 6b10 	vmov	d0, r6, r7
 8006bea:	9302      	str	r3, [sp, #8]
 8006bec:	f000 fc88 	bl	8007500 <fabs>
 8006bf0:	9b02      	ldr	r3, [sp, #8]
 8006bf2:	ec51 0b10 	vmov	r0, r1, d0
 8006bf6:	bb53      	cbnz	r3, 8006c4e <__ieee754_pow+0x1d6>
 8006bf8:	4b44      	ldr	r3, [pc, #272]	@ (8006d0c <__ieee754_pow+0x294>)
 8006bfa:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d002      	beq.n	8006c08 <__ieee754_pow+0x190>
 8006c02:	f1b8 0f00 	cmp.w	r8, #0
 8006c06:	d122      	bne.n	8006c4e <__ieee754_pow+0x1d6>
 8006c08:	f1b9 0f00 	cmp.w	r9, #0
 8006c0c:	da05      	bge.n	8006c1a <__ieee754_pow+0x1a2>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	460b      	mov	r3, r1
 8006c12:	2000      	movs	r0, #0
 8006c14:	493d      	ldr	r1, [pc, #244]	@ (8006d0c <__ieee754_pow+0x294>)
 8006c16:	f7f9 fe29 	bl	800086c <__aeabi_ddiv>
 8006c1a:	2d00      	cmp	r5, #0
 8006c1c:	f6bf af49 	bge.w	8006ab2 <__ieee754_pow+0x3a>
 8006c20:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8006c24:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8006c28:	ea58 0804 	orrs.w	r8, r8, r4
 8006c2c:	d108      	bne.n	8006c40 <__ieee754_pow+0x1c8>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	460b      	mov	r3, r1
 8006c32:	4610      	mov	r0, r2
 8006c34:	4619      	mov	r1, r3
 8006c36:	f7f9 fb37 	bl	80002a8 <__aeabi_dsub>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	e794      	b.n	8006b6a <__ieee754_pow+0xf2>
 8006c40:	2c01      	cmp	r4, #1
 8006c42:	f47f af36 	bne.w	8006ab2 <__ieee754_pow+0x3a>
 8006c46:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	e731      	b.n	8006ab2 <__ieee754_pow+0x3a>
 8006c4e:	0feb      	lsrs	r3, r5, #31
 8006c50:	3b01      	subs	r3, #1
 8006c52:	ea53 0204 	orrs.w	r2, r3, r4
 8006c56:	d102      	bne.n	8006c5e <__ieee754_pow+0x1e6>
 8006c58:	4632      	mov	r2, r6
 8006c5a:	463b      	mov	r3, r7
 8006c5c:	e7e9      	b.n	8006c32 <__ieee754_pow+0x1ba>
 8006c5e:	3c01      	subs	r4, #1
 8006c60:	431c      	orrs	r4, r3
 8006c62:	d016      	beq.n	8006c92 <__ieee754_pow+0x21a>
 8006c64:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8006cf0 <__ieee754_pow+0x278>
 8006c68:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8006c6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006c70:	f240 8112 	bls.w	8006e98 <__ieee754_pow+0x420>
 8006c74:	4b28      	ldr	r3, [pc, #160]	@ (8006d18 <__ieee754_pow+0x2a0>)
 8006c76:	459a      	cmp	sl, r3
 8006c78:	4b25      	ldr	r3, [pc, #148]	@ (8006d10 <__ieee754_pow+0x298>)
 8006c7a:	d916      	bls.n	8006caa <__ieee754_pow+0x232>
 8006c7c:	4598      	cmp	r8, r3
 8006c7e:	d80b      	bhi.n	8006c98 <__ieee754_pow+0x220>
 8006c80:	f1b9 0f00 	cmp.w	r9, #0
 8006c84:	da0b      	bge.n	8006c9e <__ieee754_pow+0x226>
 8006c86:	2000      	movs	r0, #0
 8006c88:	b011      	add	sp, #68	@ 0x44
 8006c8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c8e:	f000 bcf3 	b.w	8007678 <__math_oflow>
 8006c92:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8006cf8 <__ieee754_pow+0x280>
 8006c96:	e7e7      	b.n	8006c68 <__ieee754_pow+0x1f0>
 8006c98:	f1b9 0f00 	cmp.w	r9, #0
 8006c9c:	dcf3      	bgt.n	8006c86 <__ieee754_pow+0x20e>
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	b011      	add	sp, #68	@ 0x44
 8006ca2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca6:	f000 bcdf 	b.w	8007668 <__math_uflow>
 8006caa:	4598      	cmp	r8, r3
 8006cac:	d20c      	bcs.n	8006cc8 <__ieee754_pow+0x250>
 8006cae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f7f9 ff21 	bl	8000afc <__aeabi_dcmplt>
 8006cba:	3800      	subs	r0, #0
 8006cbc:	bf18      	it	ne
 8006cbe:	2001      	movne	r0, #1
 8006cc0:	f1b9 0f00 	cmp.w	r9, #0
 8006cc4:	daec      	bge.n	8006ca0 <__ieee754_pow+0x228>
 8006cc6:	e7df      	b.n	8006c88 <__ieee754_pow+0x210>
 8006cc8:	4b10      	ldr	r3, [pc, #64]	@ (8006d0c <__ieee754_pow+0x294>)
 8006cca:	4598      	cmp	r8, r3
 8006ccc:	f04f 0200 	mov.w	r2, #0
 8006cd0:	d924      	bls.n	8006d1c <__ieee754_pow+0x2a4>
 8006cd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	f7f9 ff10 	bl	8000afc <__aeabi_dcmplt>
 8006cdc:	3800      	subs	r0, #0
 8006cde:	bf18      	it	ne
 8006ce0:	2001      	movne	r0, #1
 8006ce2:	f1b9 0f00 	cmp.w	r9, #0
 8006ce6:	dccf      	bgt.n	8006c88 <__ieee754_pow+0x210>
 8006ce8:	e7da      	b.n	8006ca0 <__ieee754_pow+0x228>
 8006cea:	bf00      	nop
 8006cec:	f3af 8000 	nop.w
 8006cf0:	00000000 	.word	0x00000000
 8006cf4:	3ff00000 	.word	0x3ff00000
 8006cf8:	00000000 	.word	0x00000000
 8006cfc:	bff00000 	.word	0xbff00000
 8006d00:	fff00000 	.word	0xfff00000
 8006d04:	7ff00000 	.word	0x7ff00000
 8006d08:	433fffff 	.word	0x433fffff
 8006d0c:	3ff00000 	.word	0x3ff00000
 8006d10:	3fefffff 	.word	0x3fefffff
 8006d14:	3fe00000 	.word	0x3fe00000
 8006d18:	43f00000 	.word	0x43f00000
 8006d1c:	4b5a      	ldr	r3, [pc, #360]	@ (8006e88 <__ieee754_pow+0x410>)
 8006d1e:	f7f9 fac3 	bl	80002a8 <__aeabi_dsub>
 8006d22:	a351      	add	r3, pc, #324	@ (adr r3, 8006e68 <__ieee754_pow+0x3f0>)
 8006d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d28:	4604      	mov	r4, r0
 8006d2a:	460d      	mov	r5, r1
 8006d2c:	f7f9 fc74 	bl	8000618 <__aeabi_dmul>
 8006d30:	a34f      	add	r3, pc, #316	@ (adr r3, 8006e70 <__ieee754_pow+0x3f8>)
 8006d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d36:	4606      	mov	r6, r0
 8006d38:	460f      	mov	r7, r1
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	4629      	mov	r1, r5
 8006d3e:	f7f9 fc6b 	bl	8000618 <__aeabi_dmul>
 8006d42:	4b52      	ldr	r3, [pc, #328]	@ (8006e8c <__ieee754_pow+0x414>)
 8006d44:	4682      	mov	sl, r0
 8006d46:	468b      	mov	fp, r1
 8006d48:	2200      	movs	r2, #0
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	4629      	mov	r1, r5
 8006d4e:	f7f9 fc63 	bl	8000618 <__aeabi_dmul>
 8006d52:	4602      	mov	r2, r0
 8006d54:	460b      	mov	r3, r1
 8006d56:	a148      	add	r1, pc, #288	@ (adr r1, 8006e78 <__ieee754_pow+0x400>)
 8006d58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d5c:	f7f9 faa4 	bl	80002a8 <__aeabi_dsub>
 8006d60:	4622      	mov	r2, r4
 8006d62:	462b      	mov	r3, r5
 8006d64:	f7f9 fc58 	bl	8000618 <__aeabi_dmul>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	4948      	ldr	r1, [pc, #288]	@ (8006e90 <__ieee754_pow+0x418>)
 8006d70:	f7f9 fa9a 	bl	80002a8 <__aeabi_dsub>
 8006d74:	4622      	mov	r2, r4
 8006d76:	4680      	mov	r8, r0
 8006d78:	4689      	mov	r9, r1
 8006d7a:	462b      	mov	r3, r5
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	4629      	mov	r1, r5
 8006d80:	f7f9 fc4a 	bl	8000618 <__aeabi_dmul>
 8006d84:	4602      	mov	r2, r0
 8006d86:	460b      	mov	r3, r1
 8006d88:	4640      	mov	r0, r8
 8006d8a:	4649      	mov	r1, r9
 8006d8c:	f7f9 fc44 	bl	8000618 <__aeabi_dmul>
 8006d90:	a33b      	add	r3, pc, #236	@ (adr r3, 8006e80 <__ieee754_pow+0x408>)
 8006d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d96:	f7f9 fc3f 	bl	8000618 <__aeabi_dmul>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	4650      	mov	r0, sl
 8006da0:	4659      	mov	r1, fp
 8006da2:	f7f9 fa81 	bl	80002a8 <__aeabi_dsub>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	4680      	mov	r8, r0
 8006dac:	4689      	mov	r9, r1
 8006dae:	4630      	mov	r0, r6
 8006db0:	4639      	mov	r1, r7
 8006db2:	f7f9 fa7b 	bl	80002ac <__adddf3>
 8006db6:	2400      	movs	r4, #0
 8006db8:	4632      	mov	r2, r6
 8006dba:	463b      	mov	r3, r7
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	460d      	mov	r5, r1
 8006dc0:	f7f9 fa72 	bl	80002a8 <__aeabi_dsub>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	4640      	mov	r0, r8
 8006dca:	4649      	mov	r1, r9
 8006dcc:	f7f9 fa6c 	bl	80002a8 <__aeabi_dsub>
 8006dd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006dd8:	2300      	movs	r3, #0
 8006dda:	9304      	str	r3, [sp, #16]
 8006ddc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006de0:	4606      	mov	r6, r0
 8006de2:	460f      	mov	r7, r1
 8006de4:	4652      	mov	r2, sl
 8006de6:	465b      	mov	r3, fp
 8006de8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006dec:	f7f9 fa5c 	bl	80002a8 <__aeabi_dsub>
 8006df0:	4622      	mov	r2, r4
 8006df2:	462b      	mov	r3, r5
 8006df4:	f7f9 fc10 	bl	8000618 <__aeabi_dmul>
 8006df8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dfc:	4680      	mov	r8, r0
 8006dfe:	4689      	mov	r9, r1
 8006e00:	4630      	mov	r0, r6
 8006e02:	4639      	mov	r1, r7
 8006e04:	f7f9 fc08 	bl	8000618 <__aeabi_dmul>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	4640      	mov	r0, r8
 8006e0e:	4649      	mov	r1, r9
 8006e10:	f7f9 fa4c 	bl	80002ac <__adddf3>
 8006e14:	4652      	mov	r2, sl
 8006e16:	465b      	mov	r3, fp
 8006e18:	4606      	mov	r6, r0
 8006e1a:	460f      	mov	r7, r1
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	4629      	mov	r1, r5
 8006e20:	f7f9 fbfa 	bl	8000618 <__aeabi_dmul>
 8006e24:	460b      	mov	r3, r1
 8006e26:	4602      	mov	r2, r0
 8006e28:	4680      	mov	r8, r0
 8006e2a:	4689      	mov	r9, r1
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	4639      	mov	r1, r7
 8006e30:	f7f9 fa3c 	bl	80002ac <__adddf3>
 8006e34:	4b17      	ldr	r3, [pc, #92]	@ (8006e94 <__ieee754_pow+0x41c>)
 8006e36:	4299      	cmp	r1, r3
 8006e38:	4604      	mov	r4, r0
 8006e3a:	460d      	mov	r5, r1
 8006e3c:	468a      	mov	sl, r1
 8006e3e:	468b      	mov	fp, r1
 8006e40:	f340 82ef 	ble.w	8007422 <__ieee754_pow+0x9aa>
 8006e44:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8006e48:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8006e4c:	4303      	orrs	r3, r0
 8006e4e:	f000 81e8 	beq.w	8007222 <__ieee754_pow+0x7aa>
 8006e52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e56:	2200      	movs	r2, #0
 8006e58:	2300      	movs	r3, #0
 8006e5a:	f7f9 fe4f 	bl	8000afc <__aeabi_dcmplt>
 8006e5e:	3800      	subs	r0, #0
 8006e60:	bf18      	it	ne
 8006e62:	2001      	movne	r0, #1
 8006e64:	e710      	b.n	8006c88 <__ieee754_pow+0x210>
 8006e66:	bf00      	nop
 8006e68:	60000000 	.word	0x60000000
 8006e6c:	3ff71547 	.word	0x3ff71547
 8006e70:	f85ddf44 	.word	0xf85ddf44
 8006e74:	3e54ae0b 	.word	0x3e54ae0b
 8006e78:	55555555 	.word	0x55555555
 8006e7c:	3fd55555 	.word	0x3fd55555
 8006e80:	652b82fe 	.word	0x652b82fe
 8006e84:	3ff71547 	.word	0x3ff71547
 8006e88:	3ff00000 	.word	0x3ff00000
 8006e8c:	3fd00000 	.word	0x3fd00000
 8006e90:	3fe00000 	.word	0x3fe00000
 8006e94:	408fffff 	.word	0x408fffff
 8006e98:	4bd5      	ldr	r3, [pc, #852]	@ (80071f0 <__ieee754_pow+0x778>)
 8006e9a:	402b      	ands	r3, r5
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	b92b      	cbnz	r3, 8006eac <__ieee754_pow+0x434>
 8006ea0:	4bd4      	ldr	r3, [pc, #848]	@ (80071f4 <__ieee754_pow+0x77c>)
 8006ea2:	f7f9 fbb9 	bl	8000618 <__aeabi_dmul>
 8006ea6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8006eaa:	468b      	mov	fp, r1
 8006eac:	ea4f 532b 	mov.w	r3, fp, asr #20
 8006eb0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8006eb4:	4413      	add	r3, r2
 8006eb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006eb8:	4bcf      	ldr	r3, [pc, #828]	@ (80071f8 <__ieee754_pow+0x780>)
 8006eba:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8006ebe:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8006ec2:	459b      	cmp	fp, r3
 8006ec4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006ec8:	dd08      	ble.n	8006edc <__ieee754_pow+0x464>
 8006eca:	4bcc      	ldr	r3, [pc, #816]	@ (80071fc <__ieee754_pow+0x784>)
 8006ecc:	459b      	cmp	fp, r3
 8006ece:	f340 81a5 	ble.w	800721c <__ieee754_pow+0x7a4>
 8006ed2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ed8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8006edc:	f04f 0a00 	mov.w	sl, #0
 8006ee0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8006ee4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ee6:	4bc6      	ldr	r3, [pc, #792]	@ (8007200 <__ieee754_pow+0x788>)
 8006ee8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006eec:	ed93 7b00 	vldr	d7, [r3]
 8006ef0:	4629      	mov	r1, r5
 8006ef2:	ec53 2b17 	vmov	r2, r3, d7
 8006ef6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006efa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006efe:	f7f9 f9d3 	bl	80002a8 <__aeabi_dsub>
 8006f02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006f06:	4606      	mov	r6, r0
 8006f08:	460f      	mov	r7, r1
 8006f0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f0e:	f7f9 f9cd 	bl	80002ac <__adddf3>
 8006f12:	4602      	mov	r2, r0
 8006f14:	460b      	mov	r3, r1
 8006f16:	2000      	movs	r0, #0
 8006f18:	49ba      	ldr	r1, [pc, #744]	@ (8007204 <__ieee754_pow+0x78c>)
 8006f1a:	f7f9 fca7 	bl	800086c <__aeabi_ddiv>
 8006f1e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8006f22:	4602      	mov	r2, r0
 8006f24:	460b      	mov	r3, r1
 8006f26:	4630      	mov	r0, r6
 8006f28:	4639      	mov	r1, r7
 8006f2a:	f7f9 fb75 	bl	8000618 <__aeabi_dmul>
 8006f2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f32:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8006f36:	106d      	asrs	r5, r5, #1
 8006f38:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8006f3c:	f04f 0b00 	mov.w	fp, #0
 8006f40:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8006f44:	4661      	mov	r1, ip
 8006f46:	2200      	movs	r2, #0
 8006f48:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8006f4c:	4658      	mov	r0, fp
 8006f4e:	46e1      	mov	r9, ip
 8006f50:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8006f54:	4614      	mov	r4, r2
 8006f56:	461d      	mov	r5, r3
 8006f58:	f7f9 fb5e 	bl	8000618 <__aeabi_dmul>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	460b      	mov	r3, r1
 8006f60:	4630      	mov	r0, r6
 8006f62:	4639      	mov	r1, r7
 8006f64:	f7f9 f9a0 	bl	80002a8 <__aeabi_dsub>
 8006f68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f6c:	4606      	mov	r6, r0
 8006f6e:	460f      	mov	r7, r1
 8006f70:	4620      	mov	r0, r4
 8006f72:	4629      	mov	r1, r5
 8006f74:	f7f9 f998 	bl	80002a8 <__aeabi_dsub>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006f80:	f7f9 f992 	bl	80002a8 <__aeabi_dsub>
 8006f84:	465a      	mov	r2, fp
 8006f86:	464b      	mov	r3, r9
 8006f88:	f7f9 fb46 	bl	8000618 <__aeabi_dmul>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4630      	mov	r0, r6
 8006f92:	4639      	mov	r1, r7
 8006f94:	f7f9 f988 	bl	80002a8 <__aeabi_dsub>
 8006f98:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006f9c:	f7f9 fb3c 	bl	8000618 <__aeabi_dmul>
 8006fa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fa4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006fa8:	4610      	mov	r0, r2
 8006faa:	4619      	mov	r1, r3
 8006fac:	f7f9 fb34 	bl	8000618 <__aeabi_dmul>
 8006fb0:	a37d      	add	r3, pc, #500	@ (adr r3, 80071a8 <__ieee754_pow+0x730>)
 8006fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	460d      	mov	r5, r1
 8006fba:	f7f9 fb2d 	bl	8000618 <__aeabi_dmul>
 8006fbe:	a37c      	add	r3, pc, #496	@ (adr r3, 80071b0 <__ieee754_pow+0x738>)
 8006fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc4:	f7f9 f972 	bl	80002ac <__adddf3>
 8006fc8:	4622      	mov	r2, r4
 8006fca:	462b      	mov	r3, r5
 8006fcc:	f7f9 fb24 	bl	8000618 <__aeabi_dmul>
 8006fd0:	a379      	add	r3, pc, #484	@ (adr r3, 80071b8 <__ieee754_pow+0x740>)
 8006fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd6:	f7f9 f969 	bl	80002ac <__adddf3>
 8006fda:	4622      	mov	r2, r4
 8006fdc:	462b      	mov	r3, r5
 8006fde:	f7f9 fb1b 	bl	8000618 <__aeabi_dmul>
 8006fe2:	a377      	add	r3, pc, #476	@ (adr r3, 80071c0 <__ieee754_pow+0x748>)
 8006fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe8:	f7f9 f960 	bl	80002ac <__adddf3>
 8006fec:	4622      	mov	r2, r4
 8006fee:	462b      	mov	r3, r5
 8006ff0:	f7f9 fb12 	bl	8000618 <__aeabi_dmul>
 8006ff4:	a374      	add	r3, pc, #464	@ (adr r3, 80071c8 <__ieee754_pow+0x750>)
 8006ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffa:	f7f9 f957 	bl	80002ac <__adddf3>
 8006ffe:	4622      	mov	r2, r4
 8007000:	462b      	mov	r3, r5
 8007002:	f7f9 fb09 	bl	8000618 <__aeabi_dmul>
 8007006:	a372      	add	r3, pc, #456	@ (adr r3, 80071d0 <__ieee754_pow+0x758>)
 8007008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700c:	f7f9 f94e 	bl	80002ac <__adddf3>
 8007010:	4622      	mov	r2, r4
 8007012:	4606      	mov	r6, r0
 8007014:	460f      	mov	r7, r1
 8007016:	462b      	mov	r3, r5
 8007018:	4620      	mov	r0, r4
 800701a:	4629      	mov	r1, r5
 800701c:	f7f9 fafc 	bl	8000618 <__aeabi_dmul>
 8007020:	4602      	mov	r2, r0
 8007022:	460b      	mov	r3, r1
 8007024:	4630      	mov	r0, r6
 8007026:	4639      	mov	r1, r7
 8007028:	f7f9 faf6 	bl	8000618 <__aeabi_dmul>
 800702c:	465a      	mov	r2, fp
 800702e:	4604      	mov	r4, r0
 8007030:	460d      	mov	r5, r1
 8007032:	464b      	mov	r3, r9
 8007034:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007038:	f7f9 f938 	bl	80002ac <__adddf3>
 800703c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007040:	f7f9 faea 	bl	8000618 <__aeabi_dmul>
 8007044:	4622      	mov	r2, r4
 8007046:	462b      	mov	r3, r5
 8007048:	f7f9 f930 	bl	80002ac <__adddf3>
 800704c:	465a      	mov	r2, fp
 800704e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007052:	464b      	mov	r3, r9
 8007054:	4658      	mov	r0, fp
 8007056:	4649      	mov	r1, r9
 8007058:	f7f9 fade 	bl	8000618 <__aeabi_dmul>
 800705c:	4b6a      	ldr	r3, [pc, #424]	@ (8007208 <__ieee754_pow+0x790>)
 800705e:	2200      	movs	r2, #0
 8007060:	4606      	mov	r6, r0
 8007062:	460f      	mov	r7, r1
 8007064:	f7f9 f922 	bl	80002ac <__adddf3>
 8007068:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800706c:	f7f9 f91e 	bl	80002ac <__adddf3>
 8007070:	46d8      	mov	r8, fp
 8007072:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8007076:	460d      	mov	r5, r1
 8007078:	465a      	mov	r2, fp
 800707a:	460b      	mov	r3, r1
 800707c:	4640      	mov	r0, r8
 800707e:	4649      	mov	r1, r9
 8007080:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8007084:	f7f9 fac8 	bl	8000618 <__aeabi_dmul>
 8007088:	465c      	mov	r4, fp
 800708a:	4680      	mov	r8, r0
 800708c:	4689      	mov	r9, r1
 800708e:	4b5e      	ldr	r3, [pc, #376]	@ (8007208 <__ieee754_pow+0x790>)
 8007090:	2200      	movs	r2, #0
 8007092:	4620      	mov	r0, r4
 8007094:	4629      	mov	r1, r5
 8007096:	f7f9 f907 	bl	80002a8 <__aeabi_dsub>
 800709a:	4632      	mov	r2, r6
 800709c:	463b      	mov	r3, r7
 800709e:	f7f9 f903 	bl	80002a8 <__aeabi_dsub>
 80070a2:	4602      	mov	r2, r0
 80070a4:	460b      	mov	r3, r1
 80070a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80070aa:	f7f9 f8fd 	bl	80002a8 <__aeabi_dsub>
 80070ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070b2:	f7f9 fab1 	bl	8000618 <__aeabi_dmul>
 80070b6:	4622      	mov	r2, r4
 80070b8:	4606      	mov	r6, r0
 80070ba:	460f      	mov	r7, r1
 80070bc:	462b      	mov	r3, r5
 80070be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070c2:	f7f9 faa9 	bl	8000618 <__aeabi_dmul>
 80070c6:	4602      	mov	r2, r0
 80070c8:	460b      	mov	r3, r1
 80070ca:	4630      	mov	r0, r6
 80070cc:	4639      	mov	r1, r7
 80070ce:	f7f9 f8ed 	bl	80002ac <__adddf3>
 80070d2:	4606      	mov	r6, r0
 80070d4:	460f      	mov	r7, r1
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	4640      	mov	r0, r8
 80070dc:	4649      	mov	r1, r9
 80070de:	f7f9 f8e5 	bl	80002ac <__adddf3>
 80070e2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80070e6:	a33c      	add	r3, pc, #240	@ (adr r3, 80071d8 <__ieee754_pow+0x760>)
 80070e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ec:	4658      	mov	r0, fp
 80070ee:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80070f2:	460d      	mov	r5, r1
 80070f4:	f7f9 fa90 	bl	8000618 <__aeabi_dmul>
 80070f8:	465c      	mov	r4, fp
 80070fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070fe:	4642      	mov	r2, r8
 8007100:	464b      	mov	r3, r9
 8007102:	4620      	mov	r0, r4
 8007104:	4629      	mov	r1, r5
 8007106:	f7f9 f8cf 	bl	80002a8 <__aeabi_dsub>
 800710a:	4602      	mov	r2, r0
 800710c:	460b      	mov	r3, r1
 800710e:	4630      	mov	r0, r6
 8007110:	4639      	mov	r1, r7
 8007112:	f7f9 f8c9 	bl	80002a8 <__aeabi_dsub>
 8007116:	a332      	add	r3, pc, #200	@ (adr r3, 80071e0 <__ieee754_pow+0x768>)
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	f7f9 fa7c 	bl	8000618 <__aeabi_dmul>
 8007120:	a331      	add	r3, pc, #196	@ (adr r3, 80071e8 <__ieee754_pow+0x770>)
 8007122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007126:	4606      	mov	r6, r0
 8007128:	460f      	mov	r7, r1
 800712a:	4620      	mov	r0, r4
 800712c:	4629      	mov	r1, r5
 800712e:	f7f9 fa73 	bl	8000618 <__aeabi_dmul>
 8007132:	4602      	mov	r2, r0
 8007134:	460b      	mov	r3, r1
 8007136:	4630      	mov	r0, r6
 8007138:	4639      	mov	r1, r7
 800713a:	f7f9 f8b7 	bl	80002ac <__adddf3>
 800713e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007140:	4b32      	ldr	r3, [pc, #200]	@ (800720c <__ieee754_pow+0x794>)
 8007142:	4413      	add	r3, r2
 8007144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007148:	f7f9 f8b0 	bl	80002ac <__adddf3>
 800714c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007150:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007152:	f7f9 f9f7 	bl	8000544 <__aeabi_i2d>
 8007156:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007158:	4b2d      	ldr	r3, [pc, #180]	@ (8007210 <__ieee754_pow+0x798>)
 800715a:	4413      	add	r3, r2
 800715c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007160:	4606      	mov	r6, r0
 8007162:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007166:	460f      	mov	r7, r1
 8007168:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800716c:	f7f9 f89e 	bl	80002ac <__adddf3>
 8007170:	4642      	mov	r2, r8
 8007172:	464b      	mov	r3, r9
 8007174:	f7f9 f89a 	bl	80002ac <__adddf3>
 8007178:	4632      	mov	r2, r6
 800717a:	463b      	mov	r3, r7
 800717c:	f7f9 f896 	bl	80002ac <__adddf3>
 8007180:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8007184:	4632      	mov	r2, r6
 8007186:	463b      	mov	r3, r7
 8007188:	4658      	mov	r0, fp
 800718a:	460d      	mov	r5, r1
 800718c:	f7f9 f88c 	bl	80002a8 <__aeabi_dsub>
 8007190:	4642      	mov	r2, r8
 8007192:	464b      	mov	r3, r9
 8007194:	f7f9 f888 	bl	80002a8 <__aeabi_dsub>
 8007198:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800719c:	f7f9 f884 	bl	80002a8 <__aeabi_dsub>
 80071a0:	465c      	mov	r4, fp
 80071a2:	4602      	mov	r2, r0
 80071a4:	e036      	b.n	8007214 <__ieee754_pow+0x79c>
 80071a6:	bf00      	nop
 80071a8:	4a454eef 	.word	0x4a454eef
 80071ac:	3fca7e28 	.word	0x3fca7e28
 80071b0:	93c9db65 	.word	0x93c9db65
 80071b4:	3fcd864a 	.word	0x3fcd864a
 80071b8:	a91d4101 	.word	0xa91d4101
 80071bc:	3fd17460 	.word	0x3fd17460
 80071c0:	518f264d 	.word	0x518f264d
 80071c4:	3fd55555 	.word	0x3fd55555
 80071c8:	db6fabff 	.word	0xdb6fabff
 80071cc:	3fdb6db6 	.word	0x3fdb6db6
 80071d0:	33333303 	.word	0x33333303
 80071d4:	3fe33333 	.word	0x3fe33333
 80071d8:	e0000000 	.word	0xe0000000
 80071dc:	3feec709 	.word	0x3feec709
 80071e0:	dc3a03fd 	.word	0xdc3a03fd
 80071e4:	3feec709 	.word	0x3feec709
 80071e8:	145b01f5 	.word	0x145b01f5
 80071ec:	be3e2fe0 	.word	0xbe3e2fe0
 80071f0:	7ff00000 	.word	0x7ff00000
 80071f4:	43400000 	.word	0x43400000
 80071f8:	0003988e 	.word	0x0003988e
 80071fc:	000bb679 	.word	0x000bb679
 8007200:	08007fa8 	.word	0x08007fa8
 8007204:	3ff00000 	.word	0x3ff00000
 8007208:	40080000 	.word	0x40080000
 800720c:	08007f88 	.word	0x08007f88
 8007210:	08007f98 	.word	0x08007f98
 8007214:	460b      	mov	r3, r1
 8007216:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800721a:	e5d7      	b.n	8006dcc <__ieee754_pow+0x354>
 800721c:	f04f 0a01 	mov.w	sl, #1
 8007220:	e65e      	b.n	8006ee0 <__ieee754_pow+0x468>
 8007222:	a3b4      	add	r3, pc, #720	@ (adr r3, 80074f4 <__ieee754_pow+0xa7c>)
 8007224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007228:	4630      	mov	r0, r6
 800722a:	4639      	mov	r1, r7
 800722c:	f7f9 f83e 	bl	80002ac <__adddf3>
 8007230:	4642      	mov	r2, r8
 8007232:	e9cd 0100 	strd	r0, r1, [sp]
 8007236:	464b      	mov	r3, r9
 8007238:	4620      	mov	r0, r4
 800723a:	4629      	mov	r1, r5
 800723c:	f7f9 f834 	bl	80002a8 <__aeabi_dsub>
 8007240:	4602      	mov	r2, r0
 8007242:	460b      	mov	r3, r1
 8007244:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007248:	f7f9 fc76 	bl	8000b38 <__aeabi_dcmpgt>
 800724c:	2800      	cmp	r0, #0
 800724e:	f47f ae00 	bne.w	8006e52 <__ieee754_pow+0x3da>
 8007252:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8007256:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800725a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800725e:	fa43 fa0a 	asr.w	sl, r3, sl
 8007262:	44da      	add	sl, fp
 8007264:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007268:	489d      	ldr	r0, [pc, #628]	@ (80074e0 <__ieee754_pow+0xa68>)
 800726a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800726e:	4108      	asrs	r0, r1
 8007270:	ea00 030a 	and.w	r3, r0, sl
 8007274:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007278:	f1c1 0114 	rsb	r1, r1, #20
 800727c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007280:	fa4a fa01 	asr.w	sl, sl, r1
 8007284:	f1bb 0f00 	cmp.w	fp, #0
 8007288:	4640      	mov	r0, r8
 800728a:	4649      	mov	r1, r9
 800728c:	f04f 0200 	mov.w	r2, #0
 8007290:	bfb8      	it	lt
 8007292:	f1ca 0a00 	rsblt	sl, sl, #0
 8007296:	f7f9 f807 	bl	80002a8 <__aeabi_dsub>
 800729a:	4680      	mov	r8, r0
 800729c:	4689      	mov	r9, r1
 800729e:	4632      	mov	r2, r6
 80072a0:	463b      	mov	r3, r7
 80072a2:	4640      	mov	r0, r8
 80072a4:	4649      	mov	r1, r9
 80072a6:	f7f9 f801 	bl	80002ac <__adddf3>
 80072aa:	2400      	movs	r4, #0
 80072ac:	a37c      	add	r3, pc, #496	@ (adr r3, 80074a0 <__ieee754_pow+0xa28>)
 80072ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b2:	4620      	mov	r0, r4
 80072b4:	460d      	mov	r5, r1
 80072b6:	f7f9 f9af 	bl	8000618 <__aeabi_dmul>
 80072ba:	4642      	mov	r2, r8
 80072bc:	e9cd 0100 	strd	r0, r1, [sp]
 80072c0:	464b      	mov	r3, r9
 80072c2:	4620      	mov	r0, r4
 80072c4:	4629      	mov	r1, r5
 80072c6:	f7f8 ffef 	bl	80002a8 <__aeabi_dsub>
 80072ca:	4602      	mov	r2, r0
 80072cc:	460b      	mov	r3, r1
 80072ce:	4630      	mov	r0, r6
 80072d0:	4639      	mov	r1, r7
 80072d2:	f7f8 ffe9 	bl	80002a8 <__aeabi_dsub>
 80072d6:	a374      	add	r3, pc, #464	@ (adr r3, 80074a8 <__ieee754_pow+0xa30>)
 80072d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072dc:	f7f9 f99c 	bl	8000618 <__aeabi_dmul>
 80072e0:	a373      	add	r3, pc, #460	@ (adr r3, 80074b0 <__ieee754_pow+0xa38>)
 80072e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e6:	4680      	mov	r8, r0
 80072e8:	4689      	mov	r9, r1
 80072ea:	4620      	mov	r0, r4
 80072ec:	4629      	mov	r1, r5
 80072ee:	f7f9 f993 	bl	8000618 <__aeabi_dmul>
 80072f2:	4602      	mov	r2, r0
 80072f4:	460b      	mov	r3, r1
 80072f6:	4640      	mov	r0, r8
 80072f8:	4649      	mov	r1, r9
 80072fa:	f7f8 ffd7 	bl	80002ac <__adddf3>
 80072fe:	4604      	mov	r4, r0
 8007300:	460d      	mov	r5, r1
 8007302:	4602      	mov	r2, r0
 8007304:	460b      	mov	r3, r1
 8007306:	e9dd 0100 	ldrd	r0, r1, [sp]
 800730a:	f7f8 ffcf 	bl	80002ac <__adddf3>
 800730e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007312:	4680      	mov	r8, r0
 8007314:	4689      	mov	r9, r1
 8007316:	f7f8 ffc7 	bl	80002a8 <__aeabi_dsub>
 800731a:	4602      	mov	r2, r0
 800731c:	460b      	mov	r3, r1
 800731e:	4620      	mov	r0, r4
 8007320:	4629      	mov	r1, r5
 8007322:	f7f8 ffc1 	bl	80002a8 <__aeabi_dsub>
 8007326:	4642      	mov	r2, r8
 8007328:	4606      	mov	r6, r0
 800732a:	460f      	mov	r7, r1
 800732c:	464b      	mov	r3, r9
 800732e:	4640      	mov	r0, r8
 8007330:	4649      	mov	r1, r9
 8007332:	f7f9 f971 	bl	8000618 <__aeabi_dmul>
 8007336:	a360      	add	r3, pc, #384	@ (adr r3, 80074b8 <__ieee754_pow+0xa40>)
 8007338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733c:	4604      	mov	r4, r0
 800733e:	460d      	mov	r5, r1
 8007340:	f7f9 f96a 	bl	8000618 <__aeabi_dmul>
 8007344:	a35e      	add	r3, pc, #376	@ (adr r3, 80074c0 <__ieee754_pow+0xa48>)
 8007346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734a:	f7f8 ffad 	bl	80002a8 <__aeabi_dsub>
 800734e:	4622      	mov	r2, r4
 8007350:	462b      	mov	r3, r5
 8007352:	f7f9 f961 	bl	8000618 <__aeabi_dmul>
 8007356:	a35c      	add	r3, pc, #368	@ (adr r3, 80074c8 <__ieee754_pow+0xa50>)
 8007358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735c:	f7f8 ffa6 	bl	80002ac <__adddf3>
 8007360:	4622      	mov	r2, r4
 8007362:	462b      	mov	r3, r5
 8007364:	f7f9 f958 	bl	8000618 <__aeabi_dmul>
 8007368:	a359      	add	r3, pc, #356	@ (adr r3, 80074d0 <__ieee754_pow+0xa58>)
 800736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736e:	f7f8 ff9b 	bl	80002a8 <__aeabi_dsub>
 8007372:	4622      	mov	r2, r4
 8007374:	462b      	mov	r3, r5
 8007376:	f7f9 f94f 	bl	8000618 <__aeabi_dmul>
 800737a:	a357      	add	r3, pc, #348	@ (adr r3, 80074d8 <__ieee754_pow+0xa60>)
 800737c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007380:	f7f8 ff94 	bl	80002ac <__adddf3>
 8007384:	4622      	mov	r2, r4
 8007386:	462b      	mov	r3, r5
 8007388:	f7f9 f946 	bl	8000618 <__aeabi_dmul>
 800738c:	4602      	mov	r2, r0
 800738e:	460b      	mov	r3, r1
 8007390:	4640      	mov	r0, r8
 8007392:	4649      	mov	r1, r9
 8007394:	f7f8 ff88 	bl	80002a8 <__aeabi_dsub>
 8007398:	4604      	mov	r4, r0
 800739a:	460d      	mov	r5, r1
 800739c:	4602      	mov	r2, r0
 800739e:	460b      	mov	r3, r1
 80073a0:	4640      	mov	r0, r8
 80073a2:	4649      	mov	r1, r9
 80073a4:	f7f9 f938 	bl	8000618 <__aeabi_dmul>
 80073a8:	2200      	movs	r2, #0
 80073aa:	e9cd 0100 	strd	r0, r1, [sp]
 80073ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80073b2:	4620      	mov	r0, r4
 80073b4:	4629      	mov	r1, r5
 80073b6:	f7f8 ff77 	bl	80002a8 <__aeabi_dsub>
 80073ba:	4602      	mov	r2, r0
 80073bc:	460b      	mov	r3, r1
 80073be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073c2:	f7f9 fa53 	bl	800086c <__aeabi_ddiv>
 80073c6:	4632      	mov	r2, r6
 80073c8:	4604      	mov	r4, r0
 80073ca:	460d      	mov	r5, r1
 80073cc:	463b      	mov	r3, r7
 80073ce:	4640      	mov	r0, r8
 80073d0:	4649      	mov	r1, r9
 80073d2:	f7f9 f921 	bl	8000618 <__aeabi_dmul>
 80073d6:	4632      	mov	r2, r6
 80073d8:	463b      	mov	r3, r7
 80073da:	f7f8 ff67 	bl	80002ac <__adddf3>
 80073de:	4602      	mov	r2, r0
 80073e0:	460b      	mov	r3, r1
 80073e2:	4620      	mov	r0, r4
 80073e4:	4629      	mov	r1, r5
 80073e6:	f7f8 ff5f 	bl	80002a8 <__aeabi_dsub>
 80073ea:	4642      	mov	r2, r8
 80073ec:	464b      	mov	r3, r9
 80073ee:	f7f8 ff5b 	bl	80002a8 <__aeabi_dsub>
 80073f2:	460b      	mov	r3, r1
 80073f4:	4602      	mov	r2, r0
 80073f6:	493b      	ldr	r1, [pc, #236]	@ (80074e4 <__ieee754_pow+0xa6c>)
 80073f8:	2000      	movs	r0, #0
 80073fa:	f7f8 ff55 	bl	80002a8 <__aeabi_dsub>
 80073fe:	ec41 0b10 	vmov	d0, r0, r1
 8007402:	ee10 3a90 	vmov	r3, s1
 8007406:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800740a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800740e:	da30      	bge.n	8007472 <__ieee754_pow+0x9fa>
 8007410:	4650      	mov	r0, sl
 8007412:	f000 f87d 	bl	8007510 <scalbn>
 8007416:	ec51 0b10 	vmov	r0, r1, d0
 800741a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800741e:	f7ff bbd2 	b.w	8006bc6 <__ieee754_pow+0x14e>
 8007422:	4c31      	ldr	r4, [pc, #196]	@ (80074e8 <__ieee754_pow+0xa70>)
 8007424:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007428:	42a3      	cmp	r3, r4
 800742a:	d91a      	bls.n	8007462 <__ieee754_pow+0x9ea>
 800742c:	4b2f      	ldr	r3, [pc, #188]	@ (80074ec <__ieee754_pow+0xa74>)
 800742e:	440b      	add	r3, r1
 8007430:	4303      	orrs	r3, r0
 8007432:	d009      	beq.n	8007448 <__ieee754_pow+0x9d0>
 8007434:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007438:	2200      	movs	r2, #0
 800743a:	2300      	movs	r3, #0
 800743c:	f7f9 fb5e 	bl	8000afc <__aeabi_dcmplt>
 8007440:	3800      	subs	r0, #0
 8007442:	bf18      	it	ne
 8007444:	2001      	movne	r0, #1
 8007446:	e42b      	b.n	8006ca0 <__ieee754_pow+0x228>
 8007448:	4642      	mov	r2, r8
 800744a:	464b      	mov	r3, r9
 800744c:	f7f8 ff2c 	bl	80002a8 <__aeabi_dsub>
 8007450:	4632      	mov	r2, r6
 8007452:	463b      	mov	r3, r7
 8007454:	f7f9 fb66 	bl	8000b24 <__aeabi_dcmpge>
 8007458:	2800      	cmp	r0, #0
 800745a:	d1eb      	bne.n	8007434 <__ieee754_pow+0x9bc>
 800745c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80074fc <__ieee754_pow+0xa84>
 8007460:	e6f7      	b.n	8007252 <__ieee754_pow+0x7da>
 8007462:	469a      	mov	sl, r3
 8007464:	4b22      	ldr	r3, [pc, #136]	@ (80074f0 <__ieee754_pow+0xa78>)
 8007466:	459a      	cmp	sl, r3
 8007468:	f63f aef3 	bhi.w	8007252 <__ieee754_pow+0x7da>
 800746c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007470:	e715      	b.n	800729e <__ieee754_pow+0x826>
 8007472:	ec51 0b10 	vmov	r0, r1, d0
 8007476:	4619      	mov	r1, r3
 8007478:	e7cf      	b.n	800741a <__ieee754_pow+0x9a2>
 800747a:	491a      	ldr	r1, [pc, #104]	@ (80074e4 <__ieee754_pow+0xa6c>)
 800747c:	2000      	movs	r0, #0
 800747e:	f7ff bb18 	b.w	8006ab2 <__ieee754_pow+0x3a>
 8007482:	2000      	movs	r0, #0
 8007484:	2100      	movs	r1, #0
 8007486:	f7ff bb14 	b.w	8006ab2 <__ieee754_pow+0x3a>
 800748a:	4630      	mov	r0, r6
 800748c:	4639      	mov	r1, r7
 800748e:	f7ff bb10 	b.w	8006ab2 <__ieee754_pow+0x3a>
 8007492:	460c      	mov	r4, r1
 8007494:	f7ff bb5e 	b.w	8006b54 <__ieee754_pow+0xdc>
 8007498:	2400      	movs	r4, #0
 800749a:	f7ff bb49 	b.w	8006b30 <__ieee754_pow+0xb8>
 800749e:	bf00      	nop
 80074a0:	00000000 	.word	0x00000000
 80074a4:	3fe62e43 	.word	0x3fe62e43
 80074a8:	fefa39ef 	.word	0xfefa39ef
 80074ac:	3fe62e42 	.word	0x3fe62e42
 80074b0:	0ca86c39 	.word	0x0ca86c39
 80074b4:	be205c61 	.word	0xbe205c61
 80074b8:	72bea4d0 	.word	0x72bea4d0
 80074bc:	3e663769 	.word	0x3e663769
 80074c0:	c5d26bf1 	.word	0xc5d26bf1
 80074c4:	3ebbbd41 	.word	0x3ebbbd41
 80074c8:	af25de2c 	.word	0xaf25de2c
 80074cc:	3f11566a 	.word	0x3f11566a
 80074d0:	16bebd93 	.word	0x16bebd93
 80074d4:	3f66c16c 	.word	0x3f66c16c
 80074d8:	5555553e 	.word	0x5555553e
 80074dc:	3fc55555 	.word	0x3fc55555
 80074e0:	fff00000 	.word	0xfff00000
 80074e4:	3ff00000 	.word	0x3ff00000
 80074e8:	4090cbff 	.word	0x4090cbff
 80074ec:	3f6f3400 	.word	0x3f6f3400
 80074f0:	3fe00000 	.word	0x3fe00000
 80074f4:	652b82fe 	.word	0x652b82fe
 80074f8:	3c971547 	.word	0x3c971547
 80074fc:	4090cc00 	.word	0x4090cc00

08007500 <fabs>:
 8007500:	ec51 0b10 	vmov	r0, r1, d0
 8007504:	4602      	mov	r2, r0
 8007506:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800750a:	ec43 2b10 	vmov	d0, r2, r3
 800750e:	4770      	bx	lr

08007510 <scalbn>:
 8007510:	b570      	push	{r4, r5, r6, lr}
 8007512:	ec55 4b10 	vmov	r4, r5, d0
 8007516:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800751a:	4606      	mov	r6, r0
 800751c:	462b      	mov	r3, r5
 800751e:	b991      	cbnz	r1, 8007546 <scalbn+0x36>
 8007520:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007524:	4323      	orrs	r3, r4
 8007526:	d03d      	beq.n	80075a4 <scalbn+0x94>
 8007528:	4b35      	ldr	r3, [pc, #212]	@ (8007600 <scalbn+0xf0>)
 800752a:	4620      	mov	r0, r4
 800752c:	4629      	mov	r1, r5
 800752e:	2200      	movs	r2, #0
 8007530:	f7f9 f872 	bl	8000618 <__aeabi_dmul>
 8007534:	4b33      	ldr	r3, [pc, #204]	@ (8007604 <scalbn+0xf4>)
 8007536:	429e      	cmp	r6, r3
 8007538:	4604      	mov	r4, r0
 800753a:	460d      	mov	r5, r1
 800753c:	da0f      	bge.n	800755e <scalbn+0x4e>
 800753e:	a328      	add	r3, pc, #160	@ (adr r3, 80075e0 <scalbn+0xd0>)
 8007540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007544:	e01e      	b.n	8007584 <scalbn+0x74>
 8007546:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800754a:	4291      	cmp	r1, r2
 800754c:	d10b      	bne.n	8007566 <scalbn+0x56>
 800754e:	4622      	mov	r2, r4
 8007550:	4620      	mov	r0, r4
 8007552:	4629      	mov	r1, r5
 8007554:	f7f8 feaa 	bl	80002ac <__adddf3>
 8007558:	4604      	mov	r4, r0
 800755a:	460d      	mov	r5, r1
 800755c:	e022      	b.n	80075a4 <scalbn+0x94>
 800755e:	460b      	mov	r3, r1
 8007560:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007564:	3936      	subs	r1, #54	@ 0x36
 8007566:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800756a:	4296      	cmp	r6, r2
 800756c:	dd0d      	ble.n	800758a <scalbn+0x7a>
 800756e:	2d00      	cmp	r5, #0
 8007570:	a11d      	add	r1, pc, #116	@ (adr r1, 80075e8 <scalbn+0xd8>)
 8007572:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007576:	da02      	bge.n	800757e <scalbn+0x6e>
 8007578:	a11d      	add	r1, pc, #116	@ (adr r1, 80075f0 <scalbn+0xe0>)
 800757a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800757e:	a31a      	add	r3, pc, #104	@ (adr r3, 80075e8 <scalbn+0xd8>)
 8007580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007584:	f7f9 f848 	bl	8000618 <__aeabi_dmul>
 8007588:	e7e6      	b.n	8007558 <scalbn+0x48>
 800758a:	1872      	adds	r2, r6, r1
 800758c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007590:	428a      	cmp	r2, r1
 8007592:	dcec      	bgt.n	800756e <scalbn+0x5e>
 8007594:	2a00      	cmp	r2, #0
 8007596:	dd08      	ble.n	80075aa <scalbn+0x9a>
 8007598:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800759c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80075a0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80075a4:	ec45 4b10 	vmov	d0, r4, r5
 80075a8:	bd70      	pop	{r4, r5, r6, pc}
 80075aa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80075ae:	da08      	bge.n	80075c2 <scalbn+0xb2>
 80075b0:	2d00      	cmp	r5, #0
 80075b2:	a10b      	add	r1, pc, #44	@ (adr r1, 80075e0 <scalbn+0xd0>)
 80075b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075b8:	dac1      	bge.n	800753e <scalbn+0x2e>
 80075ba:	a10f      	add	r1, pc, #60	@ (adr r1, 80075f8 <scalbn+0xe8>)
 80075bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075c0:	e7bd      	b.n	800753e <scalbn+0x2e>
 80075c2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80075c6:	3236      	adds	r2, #54	@ 0x36
 80075c8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80075cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80075d0:	4620      	mov	r0, r4
 80075d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007608 <scalbn+0xf8>)
 80075d4:	4629      	mov	r1, r5
 80075d6:	2200      	movs	r2, #0
 80075d8:	e7d4      	b.n	8007584 <scalbn+0x74>
 80075da:	bf00      	nop
 80075dc:	f3af 8000 	nop.w
 80075e0:	c2f8f359 	.word	0xc2f8f359
 80075e4:	01a56e1f 	.word	0x01a56e1f
 80075e8:	8800759c 	.word	0x8800759c
 80075ec:	7e37e43c 	.word	0x7e37e43c
 80075f0:	8800759c 	.word	0x8800759c
 80075f4:	fe37e43c 	.word	0xfe37e43c
 80075f8:	c2f8f359 	.word	0xc2f8f359
 80075fc:	81a56e1f 	.word	0x81a56e1f
 8007600:	43500000 	.word	0x43500000
 8007604:	ffff3cb0 	.word	0xffff3cb0
 8007608:	3c900000 	.word	0x3c900000

0800760c <with_errno>:
 800760c:	b510      	push	{r4, lr}
 800760e:	ed2d 8b02 	vpush	{d8}
 8007612:	eeb0 8a40 	vmov.f32	s16, s0
 8007616:	eef0 8a60 	vmov.f32	s17, s1
 800761a:	4604      	mov	r4, r0
 800761c:	f7fd f866 	bl	80046ec <__errno>
 8007620:	eeb0 0a48 	vmov.f32	s0, s16
 8007624:	eef0 0a68 	vmov.f32	s1, s17
 8007628:	ecbd 8b02 	vpop	{d8}
 800762c:	6004      	str	r4, [r0, #0]
 800762e:	bd10      	pop	{r4, pc}

08007630 <xflow>:
 8007630:	4603      	mov	r3, r0
 8007632:	b507      	push	{r0, r1, r2, lr}
 8007634:	ec51 0b10 	vmov	r0, r1, d0
 8007638:	b183      	cbz	r3, 800765c <xflow+0x2c>
 800763a:	4602      	mov	r2, r0
 800763c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007640:	e9cd 2300 	strd	r2, r3, [sp]
 8007644:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007648:	f7f8 ffe6 	bl	8000618 <__aeabi_dmul>
 800764c:	ec41 0b10 	vmov	d0, r0, r1
 8007650:	2022      	movs	r0, #34	@ 0x22
 8007652:	b003      	add	sp, #12
 8007654:	f85d eb04 	ldr.w	lr, [sp], #4
 8007658:	f7ff bfd8 	b.w	800760c <with_errno>
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	e7ee      	b.n	8007640 <xflow+0x10>
 8007662:	0000      	movs	r0, r0
 8007664:	0000      	movs	r0, r0
	...

08007668 <__math_uflow>:
 8007668:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007670 <__math_uflow+0x8>
 800766c:	f7ff bfe0 	b.w	8007630 <xflow>
 8007670:	00000000 	.word	0x00000000
 8007674:	10000000 	.word	0x10000000

08007678 <__math_oflow>:
 8007678:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007680 <__math_oflow+0x8>
 800767c:	f7ff bfd8 	b.w	8007630 <xflow>
 8007680:	00000000 	.word	0x00000000
 8007684:	70000000 	.word	0x70000000

08007688 <__ieee754_sqrt>:
 8007688:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768c:	4a68      	ldr	r2, [pc, #416]	@ (8007830 <__ieee754_sqrt+0x1a8>)
 800768e:	ec55 4b10 	vmov	r4, r5, d0
 8007692:	43aa      	bics	r2, r5
 8007694:	462b      	mov	r3, r5
 8007696:	4621      	mov	r1, r4
 8007698:	d110      	bne.n	80076bc <__ieee754_sqrt+0x34>
 800769a:	4622      	mov	r2, r4
 800769c:	4620      	mov	r0, r4
 800769e:	4629      	mov	r1, r5
 80076a0:	f7f8 ffba 	bl	8000618 <__aeabi_dmul>
 80076a4:	4602      	mov	r2, r0
 80076a6:	460b      	mov	r3, r1
 80076a8:	4620      	mov	r0, r4
 80076aa:	4629      	mov	r1, r5
 80076ac:	f7f8 fdfe 	bl	80002ac <__adddf3>
 80076b0:	4604      	mov	r4, r0
 80076b2:	460d      	mov	r5, r1
 80076b4:	ec45 4b10 	vmov	d0, r4, r5
 80076b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076bc:	2d00      	cmp	r5, #0
 80076be:	dc0e      	bgt.n	80076de <__ieee754_sqrt+0x56>
 80076c0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80076c4:	4322      	orrs	r2, r4
 80076c6:	d0f5      	beq.n	80076b4 <__ieee754_sqrt+0x2c>
 80076c8:	b19d      	cbz	r5, 80076f2 <__ieee754_sqrt+0x6a>
 80076ca:	4622      	mov	r2, r4
 80076cc:	4620      	mov	r0, r4
 80076ce:	4629      	mov	r1, r5
 80076d0:	f7f8 fdea 	bl	80002a8 <__aeabi_dsub>
 80076d4:	4602      	mov	r2, r0
 80076d6:	460b      	mov	r3, r1
 80076d8:	f7f9 f8c8 	bl	800086c <__aeabi_ddiv>
 80076dc:	e7e8      	b.n	80076b0 <__ieee754_sqrt+0x28>
 80076de:	152a      	asrs	r2, r5, #20
 80076e0:	d115      	bne.n	800770e <__ieee754_sqrt+0x86>
 80076e2:	2000      	movs	r0, #0
 80076e4:	e009      	b.n	80076fa <__ieee754_sqrt+0x72>
 80076e6:	0acb      	lsrs	r3, r1, #11
 80076e8:	3a15      	subs	r2, #21
 80076ea:	0549      	lsls	r1, r1, #21
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d0fa      	beq.n	80076e6 <__ieee754_sqrt+0x5e>
 80076f0:	e7f7      	b.n	80076e2 <__ieee754_sqrt+0x5a>
 80076f2:	462a      	mov	r2, r5
 80076f4:	e7fa      	b.n	80076ec <__ieee754_sqrt+0x64>
 80076f6:	005b      	lsls	r3, r3, #1
 80076f8:	3001      	adds	r0, #1
 80076fa:	02dc      	lsls	r4, r3, #11
 80076fc:	d5fb      	bpl.n	80076f6 <__ieee754_sqrt+0x6e>
 80076fe:	1e44      	subs	r4, r0, #1
 8007700:	1b12      	subs	r2, r2, r4
 8007702:	f1c0 0420 	rsb	r4, r0, #32
 8007706:	fa21 f404 	lsr.w	r4, r1, r4
 800770a:	4323      	orrs	r3, r4
 800770c:	4081      	lsls	r1, r0
 800770e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007712:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8007716:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800771a:	07d2      	lsls	r2, r2, #31
 800771c:	bf5c      	itt	pl
 800771e:	005b      	lslpl	r3, r3, #1
 8007720:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8007724:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007728:	bf58      	it	pl
 800772a:	0049      	lslpl	r1, r1, #1
 800772c:	2600      	movs	r6, #0
 800772e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8007732:	106d      	asrs	r5, r5, #1
 8007734:	0049      	lsls	r1, r1, #1
 8007736:	2016      	movs	r0, #22
 8007738:	4632      	mov	r2, r6
 800773a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800773e:	1917      	adds	r7, r2, r4
 8007740:	429f      	cmp	r7, r3
 8007742:	bfde      	ittt	le
 8007744:	193a      	addle	r2, r7, r4
 8007746:	1bdb      	suble	r3, r3, r7
 8007748:	1936      	addle	r6, r6, r4
 800774a:	0fcf      	lsrs	r7, r1, #31
 800774c:	3801      	subs	r0, #1
 800774e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8007752:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007756:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800775a:	d1f0      	bne.n	800773e <__ieee754_sqrt+0xb6>
 800775c:	4604      	mov	r4, r0
 800775e:	2720      	movs	r7, #32
 8007760:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8007764:	429a      	cmp	r2, r3
 8007766:	eb00 0e0c 	add.w	lr, r0, ip
 800776a:	db02      	blt.n	8007772 <__ieee754_sqrt+0xea>
 800776c:	d113      	bne.n	8007796 <__ieee754_sqrt+0x10e>
 800776e:	458e      	cmp	lr, r1
 8007770:	d811      	bhi.n	8007796 <__ieee754_sqrt+0x10e>
 8007772:	f1be 0f00 	cmp.w	lr, #0
 8007776:	eb0e 000c 	add.w	r0, lr, ip
 800777a:	da42      	bge.n	8007802 <__ieee754_sqrt+0x17a>
 800777c:	2800      	cmp	r0, #0
 800777e:	db40      	blt.n	8007802 <__ieee754_sqrt+0x17a>
 8007780:	f102 0801 	add.w	r8, r2, #1
 8007784:	1a9b      	subs	r3, r3, r2
 8007786:	458e      	cmp	lr, r1
 8007788:	bf88      	it	hi
 800778a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800778e:	eba1 010e 	sub.w	r1, r1, lr
 8007792:	4464      	add	r4, ip
 8007794:	4642      	mov	r2, r8
 8007796:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800779a:	3f01      	subs	r7, #1
 800779c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80077a0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80077a4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80077a8:	d1dc      	bne.n	8007764 <__ieee754_sqrt+0xdc>
 80077aa:	4319      	orrs	r1, r3
 80077ac:	d01b      	beq.n	80077e6 <__ieee754_sqrt+0x15e>
 80077ae:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8007834 <__ieee754_sqrt+0x1ac>
 80077b2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8007838 <__ieee754_sqrt+0x1b0>
 80077b6:	e9da 0100 	ldrd	r0, r1, [sl]
 80077ba:	e9db 2300 	ldrd	r2, r3, [fp]
 80077be:	f7f8 fd73 	bl	80002a8 <__aeabi_dsub>
 80077c2:	e9da 8900 	ldrd	r8, r9, [sl]
 80077c6:	4602      	mov	r2, r0
 80077c8:	460b      	mov	r3, r1
 80077ca:	4640      	mov	r0, r8
 80077cc:	4649      	mov	r1, r9
 80077ce:	f7f9 f99f 	bl	8000b10 <__aeabi_dcmple>
 80077d2:	b140      	cbz	r0, 80077e6 <__ieee754_sqrt+0x15e>
 80077d4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80077d8:	e9da 0100 	ldrd	r0, r1, [sl]
 80077dc:	e9db 2300 	ldrd	r2, r3, [fp]
 80077e0:	d111      	bne.n	8007806 <__ieee754_sqrt+0x17e>
 80077e2:	3601      	adds	r6, #1
 80077e4:	463c      	mov	r4, r7
 80077e6:	1072      	asrs	r2, r6, #1
 80077e8:	0863      	lsrs	r3, r4, #1
 80077ea:	07f1      	lsls	r1, r6, #31
 80077ec:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80077f0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80077f4:	bf48      	it	mi
 80077f6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80077fa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80077fe:	4618      	mov	r0, r3
 8007800:	e756      	b.n	80076b0 <__ieee754_sqrt+0x28>
 8007802:	4690      	mov	r8, r2
 8007804:	e7be      	b.n	8007784 <__ieee754_sqrt+0xfc>
 8007806:	f7f8 fd51 	bl	80002ac <__adddf3>
 800780a:	e9da 8900 	ldrd	r8, r9, [sl]
 800780e:	4602      	mov	r2, r0
 8007810:	460b      	mov	r3, r1
 8007812:	4640      	mov	r0, r8
 8007814:	4649      	mov	r1, r9
 8007816:	f7f9 f971 	bl	8000afc <__aeabi_dcmplt>
 800781a:	b120      	cbz	r0, 8007826 <__ieee754_sqrt+0x19e>
 800781c:	1ca0      	adds	r0, r4, #2
 800781e:	bf08      	it	eq
 8007820:	3601      	addeq	r6, #1
 8007822:	3402      	adds	r4, #2
 8007824:	e7df      	b.n	80077e6 <__ieee754_sqrt+0x15e>
 8007826:	1c63      	adds	r3, r4, #1
 8007828:	f023 0401 	bic.w	r4, r3, #1
 800782c:	e7db      	b.n	80077e6 <__ieee754_sqrt+0x15e>
 800782e:	bf00      	nop
 8007830:	7ff00000 	.word	0x7ff00000
 8007834:	200001e0 	.word	0x200001e0
 8007838:	200001d8 	.word	0x200001d8
 800783c:	00000000 	.word	0x00000000

08007840 <__ieee754_log>:
 8007840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007844:	ec51 0b10 	vmov	r0, r1, d0
 8007848:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800784c:	b087      	sub	sp, #28
 800784e:	460d      	mov	r5, r1
 8007850:	da26      	bge.n	80078a0 <__ieee754_log+0x60>
 8007852:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007856:	4303      	orrs	r3, r0
 8007858:	4602      	mov	r2, r0
 800785a:	d10a      	bne.n	8007872 <__ieee754_log+0x32>
 800785c:	49ce      	ldr	r1, [pc, #824]	@ (8007b98 <__ieee754_log+0x358>)
 800785e:	2200      	movs	r2, #0
 8007860:	2300      	movs	r3, #0
 8007862:	2000      	movs	r0, #0
 8007864:	f7f9 f802 	bl	800086c <__aeabi_ddiv>
 8007868:	ec41 0b10 	vmov	d0, r0, r1
 800786c:	b007      	add	sp, #28
 800786e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007872:	2900      	cmp	r1, #0
 8007874:	da05      	bge.n	8007882 <__ieee754_log+0x42>
 8007876:	460b      	mov	r3, r1
 8007878:	f7f8 fd16 	bl	80002a8 <__aeabi_dsub>
 800787c:	2200      	movs	r2, #0
 800787e:	2300      	movs	r3, #0
 8007880:	e7f0      	b.n	8007864 <__ieee754_log+0x24>
 8007882:	4bc6      	ldr	r3, [pc, #792]	@ (8007b9c <__ieee754_log+0x35c>)
 8007884:	2200      	movs	r2, #0
 8007886:	f7f8 fec7 	bl	8000618 <__aeabi_dmul>
 800788a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800788e:	460d      	mov	r5, r1
 8007890:	4ac3      	ldr	r2, [pc, #780]	@ (8007ba0 <__ieee754_log+0x360>)
 8007892:	4295      	cmp	r5, r2
 8007894:	dd06      	ble.n	80078a4 <__ieee754_log+0x64>
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	f7f8 fd07 	bl	80002ac <__adddf3>
 800789e:	e7e3      	b.n	8007868 <__ieee754_log+0x28>
 80078a0:	2300      	movs	r3, #0
 80078a2:	e7f5      	b.n	8007890 <__ieee754_log+0x50>
 80078a4:	152c      	asrs	r4, r5, #20
 80078a6:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 80078aa:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80078ae:	441c      	add	r4, r3
 80078b0:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 80078b4:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 80078b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80078bc:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 80078c0:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 80078c4:	ea42 0105 	orr.w	r1, r2, r5
 80078c8:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80078cc:	2200      	movs	r2, #0
 80078ce:	4bb5      	ldr	r3, [pc, #724]	@ (8007ba4 <__ieee754_log+0x364>)
 80078d0:	f7f8 fcea 	bl	80002a8 <__aeabi_dsub>
 80078d4:	1cab      	adds	r3, r5, #2
 80078d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078da:	2b02      	cmp	r3, #2
 80078dc:	4682      	mov	sl, r0
 80078de:	468b      	mov	fp, r1
 80078e0:	f04f 0200 	mov.w	r2, #0
 80078e4:	dc53      	bgt.n	800798e <__ieee754_log+0x14e>
 80078e6:	2300      	movs	r3, #0
 80078e8:	f7f9 f8fe 	bl	8000ae8 <__aeabi_dcmpeq>
 80078ec:	b1d0      	cbz	r0, 8007924 <__ieee754_log+0xe4>
 80078ee:	2c00      	cmp	r4, #0
 80078f0:	f000 8120 	beq.w	8007b34 <__ieee754_log+0x2f4>
 80078f4:	4620      	mov	r0, r4
 80078f6:	f7f8 fe25 	bl	8000544 <__aeabi_i2d>
 80078fa:	a391      	add	r3, pc, #580	@ (adr r3, 8007b40 <__ieee754_log+0x300>)
 80078fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007900:	4606      	mov	r6, r0
 8007902:	460f      	mov	r7, r1
 8007904:	f7f8 fe88 	bl	8000618 <__aeabi_dmul>
 8007908:	a38f      	add	r3, pc, #572	@ (adr r3, 8007b48 <__ieee754_log+0x308>)
 800790a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790e:	4604      	mov	r4, r0
 8007910:	460d      	mov	r5, r1
 8007912:	4630      	mov	r0, r6
 8007914:	4639      	mov	r1, r7
 8007916:	f7f8 fe7f 	bl	8000618 <__aeabi_dmul>
 800791a:	4602      	mov	r2, r0
 800791c:	460b      	mov	r3, r1
 800791e:	4620      	mov	r0, r4
 8007920:	4629      	mov	r1, r5
 8007922:	e7ba      	b.n	800789a <__ieee754_log+0x5a>
 8007924:	a38a      	add	r3, pc, #552	@ (adr r3, 8007b50 <__ieee754_log+0x310>)
 8007926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792a:	4650      	mov	r0, sl
 800792c:	4659      	mov	r1, fp
 800792e:	f7f8 fe73 	bl	8000618 <__aeabi_dmul>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	2000      	movs	r0, #0
 8007938:	499b      	ldr	r1, [pc, #620]	@ (8007ba8 <__ieee754_log+0x368>)
 800793a:	f7f8 fcb5 	bl	80002a8 <__aeabi_dsub>
 800793e:	4652      	mov	r2, sl
 8007940:	4606      	mov	r6, r0
 8007942:	460f      	mov	r7, r1
 8007944:	465b      	mov	r3, fp
 8007946:	4650      	mov	r0, sl
 8007948:	4659      	mov	r1, fp
 800794a:	f7f8 fe65 	bl	8000618 <__aeabi_dmul>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	4630      	mov	r0, r6
 8007954:	4639      	mov	r1, r7
 8007956:	f7f8 fe5f 	bl	8000618 <__aeabi_dmul>
 800795a:	4606      	mov	r6, r0
 800795c:	460f      	mov	r7, r1
 800795e:	b914      	cbnz	r4, 8007966 <__ieee754_log+0x126>
 8007960:	4632      	mov	r2, r6
 8007962:	463b      	mov	r3, r7
 8007964:	e0a0      	b.n	8007aa8 <__ieee754_log+0x268>
 8007966:	4620      	mov	r0, r4
 8007968:	f7f8 fdec 	bl	8000544 <__aeabi_i2d>
 800796c:	a374      	add	r3, pc, #464	@ (adr r3, 8007b40 <__ieee754_log+0x300>)
 800796e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007972:	4680      	mov	r8, r0
 8007974:	4689      	mov	r9, r1
 8007976:	f7f8 fe4f 	bl	8000618 <__aeabi_dmul>
 800797a:	a373      	add	r3, pc, #460	@ (adr r3, 8007b48 <__ieee754_log+0x308>)
 800797c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007980:	4604      	mov	r4, r0
 8007982:	460d      	mov	r5, r1
 8007984:	4640      	mov	r0, r8
 8007986:	4649      	mov	r1, r9
 8007988:	f7f8 fe46 	bl	8000618 <__aeabi_dmul>
 800798c:	e0a5      	b.n	8007ada <__ieee754_log+0x29a>
 800798e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007992:	f7f8 fc8b 	bl	80002ac <__adddf3>
 8007996:	4602      	mov	r2, r0
 8007998:	460b      	mov	r3, r1
 800799a:	4650      	mov	r0, sl
 800799c:	4659      	mov	r1, fp
 800799e:	f7f8 ff65 	bl	800086c <__aeabi_ddiv>
 80079a2:	e9cd 0100 	strd	r0, r1, [sp]
 80079a6:	4620      	mov	r0, r4
 80079a8:	f7f8 fdcc 	bl	8000544 <__aeabi_i2d>
 80079ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079b4:	4610      	mov	r0, r2
 80079b6:	4619      	mov	r1, r3
 80079b8:	f7f8 fe2e 	bl	8000618 <__aeabi_dmul>
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80079c4:	f7f8 fe28 	bl	8000618 <__aeabi_dmul>
 80079c8:	a363      	add	r3, pc, #396	@ (adr r3, 8007b58 <__ieee754_log+0x318>)
 80079ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ce:	4680      	mov	r8, r0
 80079d0:	4689      	mov	r9, r1
 80079d2:	f7f8 fe21 	bl	8000618 <__aeabi_dmul>
 80079d6:	a362      	add	r3, pc, #392	@ (adr r3, 8007b60 <__ieee754_log+0x320>)
 80079d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079dc:	f7f8 fc66 	bl	80002ac <__adddf3>
 80079e0:	4642      	mov	r2, r8
 80079e2:	464b      	mov	r3, r9
 80079e4:	f7f8 fe18 	bl	8000618 <__aeabi_dmul>
 80079e8:	a35f      	add	r3, pc, #380	@ (adr r3, 8007b68 <__ieee754_log+0x328>)
 80079ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ee:	f7f8 fc5d 	bl	80002ac <__adddf3>
 80079f2:	4642      	mov	r2, r8
 80079f4:	464b      	mov	r3, r9
 80079f6:	f7f8 fe0f 	bl	8000618 <__aeabi_dmul>
 80079fa:	a35d      	add	r3, pc, #372	@ (adr r3, 8007b70 <__ieee754_log+0x330>)
 80079fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a00:	f7f8 fc54 	bl	80002ac <__adddf3>
 8007a04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a08:	f7f8 fe06 	bl	8000618 <__aeabi_dmul>
 8007a0c:	a35a      	add	r3, pc, #360	@ (adr r3, 8007b78 <__ieee754_log+0x338>)
 8007a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a16:	4640      	mov	r0, r8
 8007a18:	4649      	mov	r1, r9
 8007a1a:	f7f8 fdfd 	bl	8000618 <__aeabi_dmul>
 8007a1e:	a358      	add	r3, pc, #352	@ (adr r3, 8007b80 <__ieee754_log+0x340>)
 8007a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a24:	f7f8 fc42 	bl	80002ac <__adddf3>
 8007a28:	4642      	mov	r2, r8
 8007a2a:	464b      	mov	r3, r9
 8007a2c:	f7f8 fdf4 	bl	8000618 <__aeabi_dmul>
 8007a30:	a355      	add	r3, pc, #340	@ (adr r3, 8007b88 <__ieee754_log+0x348>)
 8007a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a36:	f7f8 fc39 	bl	80002ac <__adddf3>
 8007a3a:	4642      	mov	r2, r8
 8007a3c:	464b      	mov	r3, r9
 8007a3e:	f7f8 fdeb 	bl	8000618 <__aeabi_dmul>
 8007a42:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8007a4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a52:	f7f8 fc2b 	bl	80002ac <__adddf3>
 8007a56:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8007a5a:	3551      	adds	r5, #81	@ 0x51
 8007a5c:	4335      	orrs	r5, r6
 8007a5e:	2d00      	cmp	r5, #0
 8007a60:	4680      	mov	r8, r0
 8007a62:	4689      	mov	r9, r1
 8007a64:	dd48      	ble.n	8007af8 <__ieee754_log+0x2b8>
 8007a66:	4b50      	ldr	r3, [pc, #320]	@ (8007ba8 <__ieee754_log+0x368>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	4650      	mov	r0, sl
 8007a6c:	4659      	mov	r1, fp
 8007a6e:	f7f8 fdd3 	bl	8000618 <__aeabi_dmul>
 8007a72:	4652      	mov	r2, sl
 8007a74:	465b      	mov	r3, fp
 8007a76:	f7f8 fdcf 	bl	8000618 <__aeabi_dmul>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	4606      	mov	r6, r0
 8007a80:	460f      	mov	r7, r1
 8007a82:	4640      	mov	r0, r8
 8007a84:	4649      	mov	r1, r9
 8007a86:	f7f8 fc11 	bl	80002ac <__adddf3>
 8007a8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a8e:	f7f8 fdc3 	bl	8000618 <__aeabi_dmul>
 8007a92:	4680      	mov	r8, r0
 8007a94:	4689      	mov	r9, r1
 8007a96:	b964      	cbnz	r4, 8007ab2 <__ieee754_log+0x272>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	4639      	mov	r1, r7
 8007aa0:	f7f8 fc02 	bl	80002a8 <__aeabi_dsub>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	4650      	mov	r0, sl
 8007aaa:	4659      	mov	r1, fp
 8007aac:	f7f8 fbfc 	bl	80002a8 <__aeabi_dsub>
 8007ab0:	e6da      	b.n	8007868 <__ieee754_log+0x28>
 8007ab2:	a323      	add	r3, pc, #140	@ (adr r3, 8007b40 <__ieee754_log+0x300>)
 8007ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007abc:	f7f8 fdac 	bl	8000618 <__aeabi_dmul>
 8007ac0:	a321      	add	r3, pc, #132	@ (adr r3, 8007b48 <__ieee754_log+0x308>)
 8007ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	460d      	mov	r5, r1
 8007aca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ace:	f7f8 fda3 	bl	8000618 <__aeabi_dmul>
 8007ad2:	4642      	mov	r2, r8
 8007ad4:	464b      	mov	r3, r9
 8007ad6:	f7f8 fbe9 	bl	80002ac <__adddf3>
 8007ada:	4602      	mov	r2, r0
 8007adc:	460b      	mov	r3, r1
 8007ade:	4630      	mov	r0, r6
 8007ae0:	4639      	mov	r1, r7
 8007ae2:	f7f8 fbe1 	bl	80002a8 <__aeabi_dsub>
 8007ae6:	4652      	mov	r2, sl
 8007ae8:	465b      	mov	r3, fp
 8007aea:	f7f8 fbdd 	bl	80002a8 <__aeabi_dsub>
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	4620      	mov	r0, r4
 8007af4:	4629      	mov	r1, r5
 8007af6:	e7d9      	b.n	8007aac <__ieee754_log+0x26c>
 8007af8:	4602      	mov	r2, r0
 8007afa:	460b      	mov	r3, r1
 8007afc:	4650      	mov	r0, sl
 8007afe:	4659      	mov	r1, fp
 8007b00:	f7f8 fbd2 	bl	80002a8 <__aeabi_dsub>
 8007b04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b08:	f7f8 fd86 	bl	8000618 <__aeabi_dmul>
 8007b0c:	4606      	mov	r6, r0
 8007b0e:	460f      	mov	r7, r1
 8007b10:	2c00      	cmp	r4, #0
 8007b12:	f43f af25 	beq.w	8007960 <__ieee754_log+0x120>
 8007b16:	a30a      	add	r3, pc, #40	@ (adr r3, 8007b40 <__ieee754_log+0x300>)
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b20:	f7f8 fd7a 	bl	8000618 <__aeabi_dmul>
 8007b24:	a308      	add	r3, pc, #32	@ (adr r3, 8007b48 <__ieee754_log+0x308>)
 8007b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	460d      	mov	r5, r1
 8007b2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b32:	e729      	b.n	8007988 <__ieee754_log+0x148>
 8007b34:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8007b90 <__ieee754_log+0x350>
 8007b38:	e698      	b.n	800786c <__ieee754_log+0x2c>
 8007b3a:	bf00      	nop
 8007b3c:	f3af 8000 	nop.w
 8007b40:	fee00000 	.word	0xfee00000
 8007b44:	3fe62e42 	.word	0x3fe62e42
 8007b48:	35793c76 	.word	0x35793c76
 8007b4c:	3dea39ef 	.word	0x3dea39ef
 8007b50:	55555555 	.word	0x55555555
 8007b54:	3fd55555 	.word	0x3fd55555
 8007b58:	df3e5244 	.word	0xdf3e5244
 8007b5c:	3fc2f112 	.word	0x3fc2f112
 8007b60:	96cb03de 	.word	0x96cb03de
 8007b64:	3fc74664 	.word	0x3fc74664
 8007b68:	94229359 	.word	0x94229359
 8007b6c:	3fd24924 	.word	0x3fd24924
 8007b70:	55555593 	.word	0x55555593
 8007b74:	3fe55555 	.word	0x3fe55555
 8007b78:	d078c69f 	.word	0xd078c69f
 8007b7c:	3fc39a09 	.word	0x3fc39a09
 8007b80:	1d8e78af 	.word	0x1d8e78af
 8007b84:	3fcc71c5 	.word	0x3fcc71c5
 8007b88:	9997fa04 	.word	0x9997fa04
 8007b8c:	3fd99999 	.word	0x3fd99999
	...
 8007b98:	c3500000 	.word	0xc3500000
 8007b9c:	43500000 	.word	0x43500000
 8007ba0:	7fefffff 	.word	0x7fefffff
 8007ba4:	3ff00000 	.word	0x3ff00000
 8007ba8:	3fe00000 	.word	0x3fe00000

08007bac <_init>:
 8007bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bae:	bf00      	nop
 8007bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bb2:	bc08      	pop	{r3}
 8007bb4:	469e      	mov	lr, r3
 8007bb6:	4770      	bx	lr

08007bb8 <_fini>:
 8007bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bba:	bf00      	nop
 8007bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bbe:	bc08      	pop	{r3}
 8007bc0:	469e      	mov	lr, r3
 8007bc2:	4770      	bx	lr
